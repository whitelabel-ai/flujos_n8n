{
  "active": true,
  "connections": {
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Completed Notification": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-12T22:45:58.589Z",
  "id": "enFqyjgdk54Qh1h2",
  "meta": null,
  "name": "Backtup",
  "nodes": [
    {
      "parameters": {},
      "id": "801a8161-ed66-4340-91b7-71301248e607",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -900,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "3620620e-c426-4f05-b366-8184e063a1c8",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1380,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "5d4729ef-ecc2-4dd5-8d17-416a521e6f92",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -1340,
        980
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "61868480-47ab-439b-9bfb-b7886d76edd9",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        -500,
        320
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "ziza9SqfW3f86uej",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "ef195419-98dd-46f6-9f6b-963fc10ccaf0",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        800
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "a0f51483-6ef2-4a33-bf61-4a8de2761335",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -480,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5169c80b-5fb5-49fa-9281-8e7d9368ed6c",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        -800,
        700
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "2b0c6f96-fc4a-4db2-a5a0-873515999449",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        -720,
        960
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "b00db8ea-5fb1-4bc2-a68c-6e6c747d96b5",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        -520,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "31cf6ae5-828e-47af-9ab8-2d8805e762f6",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        -120,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6d215e30-7341-4d1a-9db8-5e9fa52c0865",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        100,
        800
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "481c25ae-ca69-4b3b-8352-1001b29cfc3b",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        100,
        960
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "38513c82-f225-42a1-9860-d7ee6048294e",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        100,
        1160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "whitelabel-ai",
          "mode": "list",
          "cachedResultName": "whitelabel-ai",
          "cachedResultUrl": "https://github.com/whitelabel-ai"
        },
        "repository": {
          "__rl": true,
          "value": "flujos_n8n",
          "mode": "list",
          "cachedResultName": "flujos_n8n",
          "cachedResultUrl": "https://github.com/whitelabel-ai/flujos_n8n"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "51795c31-702e-48c8-8b28-7d63fd681bd3",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        320,
        1160
      ],
      "typeVersion": 1,
      "webhookId": "bcb66584-4797-4a71-9eaa-f501094e6b0f",
      "credentials": {
        "githubApi": {
          "id": "LO7jkr64CSPkxXZS",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "whitelabel-ai",
          "mode": "list",
          "cachedResultName": "whitelabel-ai",
          "cachedResultUrl": "https://github.com/whitelabel-ai"
        },
        "repository": {
          "__rl": true,
          "value": "flujos_n8n",
          "mode": "list",
          "cachedResultName": "flujos_n8n",
          "cachedResultUrl": "https://github.com/whitelabel-ai/flujos_n8n"
        },
        "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "c04ec1e4-45ca-475a-8fac-d55a978fc0d2",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        320,
        960
      ],
      "typeVersion": 1,
      "webhookId": "ccd1b477-92cc-4ae5-8afe-4d611de1df73",
      "credentials": {
        "githubApi": {
          "id": "LO7jkr64CSPkxXZS",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "29760354-aa88-4193-8af9-80d262a8e644",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -300,
        320
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 17,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "2dcd36a5-9753-4cc5-a878-d352fa5c686a",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -900,
        420
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "24f1dd3d-7c5e-4669-9aad-809314e416ad",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        -320,
        960
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "b1733ca8-6fc9-41d1-a5c9-32f5cdb77b68",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1380,
        140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "72f3aea5-9cd3-464b-9269-df58a15a8907",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -940,
        140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "7106e6a1-cc64-44f4-b3f1-d816ebe3fa2d",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        -660,
        320
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "6d9de0ec-3a01-4c51-8883-1c6da276e618",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        140,
        340
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "4f733b98-710c-431c-8157-c1233b2ab624",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        140,
        120
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "mode": "name",
          "value": "#notifications"
        },
        "text": "=:x: Failed to backup {{ $('Loop Over Items').item.json.id }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "7164df60-86c5-49a3-bf4f-b6129052d58f",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        340,
        360
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=whitelabel-ai"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=flujos_n8n"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "=Angela/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "e50b0793-4ca3-40ef-ab6f-f3f06c164ee9",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        -1140,
        980
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "whitelabel-ai",
          "mode": "list",
          "cachedResultName": "whitelabel-ai",
          "cachedResultUrl": "https://github.com/whitelabel-ai"
        },
        "repository": {
          "__rl": true,
          "value": "flujos_n8n",
          "mode": "list",
          "cachedResultName": "flujos_n8n",
          "cachedResultUrl": "https://github.com/whitelabel-ai/flujos_n8n"
        },
        "filePath": "={{ $json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        -1020,
        700
      ],
      "id": "b8edcb3c-e103-4bb9-ba05-e43a7fa6b501",
      "name": "Get file data",
      "webhookId": "527e150b-cefa-44a1-a238-92c581dbfd32",
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "LO7jkr64CSPkxXZS",
          "name": "GitHub account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=✅ Backup Angela has completed - {{ $('n8n').all().length }} workflows have been processed.\nsave to: https://github.com/whitelabel-ai/flujos_n8n/tree/main/Angela/",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        360,
        120
      ],
      "id": "99a1d720-c8fb-4bb9-af4d-c7250d8e4361",
      "name": "Discord",
      "webhookId": "13a6e839-db87-4433-b130-0c500b347783",
      "executeOnce": true,
      "credentials": {
        "discordWebhookApi": {
          "id": "h5pRvUrCmTbh14ui",
          "name": "Discord Webhook account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Done"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -80,
        220
      ],
      "id": "351a794f-410f-4908-b4a2-3cac167cc068",
      "name": "Aggregate"
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "createdAt": "2025-06-12T22:45:58.589Z",
          "updatedAt": "2025-06-12T22:48:16.445Z",
          "id": "enFqyjgdk54Qh1h2",
          "name": "My workflow",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "801a8161-ed66-4340-91b7-71301248e607",
              "name": "On clicking 'execute'",
              "type": "n8n-nodes-base.manualTrigger",
              "position": [
                -900,
                220
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## Subworkflow",
                "height": 731.7039821513649,
                "width": 1910.7813046051347,
                "color": 6
              },
              "id": "3620620e-c426-4f05-b366-8184e063a1c8",
              "name": "Sticky Note",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1380,
                600
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "5d4729ef-ecc2-4dd5-8d17-416a521e6f92",
              "name": "Execute Workflow Trigger",
              "type": "n8n-nodes-base.executeWorkflowTrigger",
              "position": [
                -1340,
                980
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "filters": {},
                "requestOptions": {}
              },
              "id": "61868480-47ab-439b-9bfb-b7886d76edd9",
              "name": "n8n",
              "type": "n8n-nodes-base.n8n",
              "position": [
                -500,
                320
              ],
              "typeVersion": 1,
              "credentials": {
                "n8nApi": {
                  "id": "ziza9SqfW3f86uej",
                  "name": "n8n account"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                      "name": "Done",
                      "type": "boolean",
                      "value": true
                    }
                  ]
                },
                "options": {}
              },
              "id": "ef195419-98dd-46f6-9f6b-963fc10ccaf0",
              "name": "Return",
              "type": "n8n-nodes-base.set",
              "position": [
                560,
                800
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "url": "={{ $json.download_url }}",
                "options": {}
              },
              "id": "a0f51483-6ef2-4a33-bf61-4a8de2761335",
              "name": "Get File",
              "type": "n8n-nodes-base.httpRequest",
              "position": [
                -480,
                680
              ],
              "typeVersion": 4.2
            },
            {
              "parameters": {
                "conditions": {
                  "options": {
                    "caseSensitive": true,
                    "leftValue": "",
                    "typeValidation": "strict",
                    "version": 1
                  },
                  "conditions": [
                    {
                      "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                      "operator": {
                        "type": "string",
                        "operation": "empty",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.content }}",
                      "rightValue": ""
                    },
                    {
                      "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                      "operator": {
                        "type": "string",
                        "operation": "notExists",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.error }}",
                      "rightValue": ""
                    }
                  ],
                  "combinator": "and"
                },
                "options": {}
              },
              "id": "5169c80b-5fb5-49fa-9281-8e7d9368ed6c",
              "name": "If file too large",
              "type": "n8n-nodes-base.if",
              "position": [
                -800,
                700
              ],
              "typeVersion": 2
            },
            {
              "parameters": {},
              "id": "2b0c6f96-fc4a-4db2-a5a0-873515999449",
              "name": "Merge Items",
              "type": "n8n-nodes-base.merge",
              "position": [
                -720,
                960
              ],
              "typeVersion": 2
            },
            {
              "parameters": {
                "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
              },
              "id": "b00db8ea-5fb1-4bc2-a68c-6e6c747d96b5",
              "name": "isDiffOrNew",
              "type": "n8n-nodes-base.code",
              "position": [
                -520,
                960
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "dataType": "string",
                "value1": "={{$json.github_status}}",
                "rules": {
                  "rules": [
                    {
                      "value2": "same"
                    },
                    {
                      "value2": "different",
                      "output": 1
                    },
                    {
                      "value2": "new",
                      "output": 2
                    }
                  ]
                }
              },
              "id": "31cf6ae5-828e-47af-9ab8-2d8805e762f6",
              "name": "Check Status",
              "type": "n8n-nodes-base.switch",
              "position": [
                -120,
                960
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "6d215e30-7341-4d1a-9db8-5e9fa52c0865",
              "name": "Same file - Do nothing",
              "type": "n8n-nodes-base.noOp",
              "position": [
                100,
                800
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "481c25ae-ca69-4b3b-8352-1001b29cfc3b",
              "name": "File is different",
              "type": "n8n-nodes-base.noOp",
              "position": [
                100,
                960
              ],
              "typeVersion": 1
            },
            {
              "parameters": {},
              "id": "38513c82-f225-42a1-9860-d7ee6048294e",
              "name": "File is new",
              "type": "n8n-nodes-base.noOp",
              "position": [
                100,
                1160
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "resource": "file",
                "owner": {
                  "__rl": true,
                  "value": "whitelabel-ai",
                  "mode": "list",
                  "cachedResultName": "whitelabel-ai",
                  "cachedResultUrl": "https://github.com/whitelabel-ai"
                },
                "repository": {
                  "__rl": true,
                  "value": "flujos_n8n",
                  "mode": "list",
                  "cachedResultName": "flujos_n8n",
                  "cachedResultUrl": "https://github.com/whitelabel-ai/flujos_n8n"
                },
                "filePath": "={{ $('Config').item.json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
                "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
                "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
              },
              "id": "51795c31-702e-48c8-8b28-7d63fd681bd3",
              "name": "Create new file",
              "type": "n8n-nodes-base.github",
              "position": [
                320,
                1160
              ],
              "typeVersion": 1,
              "webhookId": "bcb66584-4797-4a71-9eaa-f501094e6b0f",
              "credentials": {
                "githubApi": {
                  "id": "LO7jkr64CSPkxXZS",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {
                "resource": "file",
                "operation": "edit",
                "owner": {
                  "__rl": true,
                  "value": "whitelabel-ai",
                  "mode": "list",
                  "cachedResultName": "whitelabel-ai",
                  "cachedResultUrl": "https://github.com/whitelabel-ai"
                },
                "repository": {
                  "__rl": true,
                  "value": "flujos_n8n",
                  "mode": "list",
                  "cachedResultName": "flujos_n8n",
                  "cachedResultUrl": "https://github.com/whitelabel-ai/flujos_n8n"
                },
                "filePath": "={{ $('Config').first().item.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
                "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
                "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
              },
              "id": "c04ec1e4-45ca-475a-8fac-d55a978fc0d2",
              "name": "Edit existing file",
              "type": "n8n-nodes-base.github",
              "position": [
                320,
                960
              ],
              "typeVersion": 1,
              "webhookId": "ccd1b477-92cc-4ae5-8afe-4d611de1df73",
              "credentials": {
                "githubApi": {
                  "id": "LO7jkr64CSPkxXZS",
                  "name": "GitHub account"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "29760354-aa88-4193-8af9-80d262a8e644",
              "name": "Loop Over Items",
              "type": "n8n-nodes-base.splitInBatches",
              "position": [
                -300,
                320
              ],
              "typeVersion": 3
            },
            {
              "parameters": {
                "rule": {
                  "interval": [
                    {
                      "triggerAtHour": 17,
                      "triggerAtMinute": 33
                    }
                  ]
                }
              },
              "id": "2dcd36a5-9753-4cc5-a878-d352fa5c686a",
              "name": "Schedule Trigger",
              "type": "n8n-nodes-base.scheduleTrigger",
              "position": [
                -900,
                420
              ],
              "typeVersion": 1.2
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
                      "name": "subPath",
                      "type": "string",
                      "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "24f1dd3d-7c5e-4669-9aad-809314e416ad",
              "name": "Create sub path",
              "type": "n8n-nodes-base.set",
              "position": [
                -320,
                960
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
                "height": 417,
                "width": 385,
                "color": 4
              },
              "id": "b1733ca8-6fc9-41d1-a5c9-32f5cdb77b68",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -1380,
                140
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "content": "## Main workflow loop",
                "height": 416.1856906618075,
                "width": 1272.6408145680155,
                "color": 7
              },
              "id": "72f3aea5-9cd3-464b-9269-df58a15a8907",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                -940,
                140
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "select": "channel",
                "channelId": {
                  "__rl": true,
                  "mode": "name",
                  "value": "#notifications"
                },
                "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
                "otherOptions": {
                  "includeLinkToWorkflow": false
                }
              },
              "id": "7106e6a1-cc64-44f4-b3f1-d816ebe3fa2d",
              "name": "Starting Message",
              "type": "n8n-nodes-base.slack",
              "position": [
                -660,
                320
              ],
              "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
              "typeVersion": 2.2,
              "disabled": true
            },
            {
              "parameters": {
                "workflowId": "={{ $workflow.id }}",
                "mode": "each",
                "options": {}
              },
              "id": "6d9de0ec-3a01-4c51-8883-1c6da276e618",
              "name": "Execute Workflow",
              "type": "n8n-nodes-base.executeWorkflow",
              "position": [
                140,
                340
              ],
              "typeVersion": 1,
              "onError": "continueErrorOutput"
            },
            {
              "parameters": {
                "select": "channel",
                "channelId": {
                  "__rl": true,
                  "mode": "name",
                  "value": "#notifications"
                },
                "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
                "otherOptions": {}
              },
              "id": "4f733b98-710c-431c-8157-c1233b2ab624",
              "name": "Completed Notification",
              "type": "n8n-nodes-base.slack",
              "position": [
                140,
                120
              ],
              "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
              "executeOnce": true,
              "typeVersion": 2.2,
              "disabled": true
            },
            {
              "parameters": {
                "select": "channel",
                "channelId": {
                  "__rl": true,
                  "mode": "name",
                  "value": "#notifications"
                },
                "text": "=:x: Failed to backup {{ $('Loop Over Items').item.json.id }}",
                "otherOptions": {
                  "includeLinkToWorkflow": false
                }
              },
              "id": "7164df60-86c5-49a3-bf4f-b6129052d58f",
              "name": "Failed Flows",
              "type": "n8n-nodes-base.slack",
              "position": [
                340,
                360
              ],
              "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
              "typeVersion": 2.2,
              "disabled": true
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
                      "name": "repo_owner",
                      "type": "string",
                      "value": "=whitelabel-ai"
                    },
                    {
                      "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
                      "name": "repo_name",
                      "type": "string",
                      "value": "=flujos_n8n"
                    },
                    {
                      "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
                      "name": "repo_path",
                      "type": "string",
                      "value": "=Angela/"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "e50b0793-4ca3-40ef-ab6f-f3f06c164ee9",
              "name": "Config",
              "type": "n8n-nodes-base.set",
              "position": [
                -1140,
                980
              ],
              "typeVersion": 3.4
            },
            {
              "parameters": {
                "resource": "file",
                "operation": "get",
                "owner": {
                  "__rl": true,
                  "value": "whitelabel-ai",
                  "mode": "list",
                  "cachedResultName": "whitelabel-ai",
                  "cachedResultUrl": "https://github.com/whitelabel-ai"
                },
                "repository": {
                  "__rl": true,
                  "value": "flujos_n8n",
                  "mode": "list",
                  "cachedResultName": "flujos_n8n",
                  "cachedResultUrl": "https://github.com/whitelabel-ai/flujos_n8n"
                },
                "filePath": "={{ $json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
                "asBinaryProperty": false,
                "additionalParameters": {}
              },
              "type": "n8n-nodes-base.github",
              "typeVersion": 1.1,
              "position": [
                -1020,
                700
              ],
              "id": "b8edcb3c-e103-4bb9-ba05-e43a7fa6b501",
              "name": "Get file data",
              "webhookId": "527e150b-cefa-44a1-a238-92c581dbfd32",
              "alwaysOutputData": true,
              "credentials": {
                "githubApi": {
                  "id": "LO7jkr64CSPkxXZS",
                  "name": "GitHub account"
                }
              },
              "onError": "continueRegularOutput"
            },
            {
              "parameters": {
                "authentication": "webhook",
                "content": "=✅ Backup Angela has completed - {{ $('n8n').all().length }} workflows have been processed.\nsave to: https://github.com/whitelabel-ai/flujos_n8n/tree/main/Angela/",
                "options": {}
              },
              "type": "n8n-nodes-base.discord",
              "typeVersion": 2,
              "position": [
                360,
                120
              ],
              "id": "99a1d720-c8fb-4bb9-af4d-c7250d8e4361",
              "name": "Discord",
              "webhookId": "13a6e839-db87-4433-b130-0c500b347783",
              "executeOnce": true,
              "credentials": {
                "discordWebhookApi": {
                  "id": "h5pRvUrCmTbh14ui",
                  "name": "Discord Webhook account"
                }
              }
            },
            {
              "parameters": {
                "fieldsToAggregate": {
                  "fieldToAggregate": [
                    {
                      "fieldToAggregate": "Done"
                    }
                  ]
                },
                "options": {}
              },
              "type": "n8n-nodes-base.aggregate",
              "typeVersion": 1,
              "position": [
                -80,
                220
              ],
              "id": "351a794f-410f-4908-b4a2-3cac167cc068",
              "name": "Aggregate"
            }
          ],
          "connections": {
            "On clicking 'execute'": {
              "main": [
                [
                  {
                    "node": "Starting Message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow Trigger": {
              "main": [
                [
                  {
                    "node": "Config",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "n8n": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get File": {
              "main": [
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "If file too large": {
              "main": [
                [
                  {
                    "node": "Get File",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Merge Items": {
              "main": [
                [
                  {
                    "node": "isDiffOrNew",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "isDiffOrNew": {
              "main": [
                [
                  {
                    "node": "Create sub path",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Check Status": {
              "main": [
                [
                  {
                    "node": "Same file - Do nothing",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "File is different",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "File is new",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Same file - Do nothing": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "File is different": {
              "main": [
                [
                  {
                    "node": "Edit existing file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "File is new": {
              "main": [
                [
                  {
                    "node": "Create new file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create new file": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Edit existing file": {
              "main": [
                [
                  {
                    "node": "Return",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Loop Over Items": {
              "main": [
                [
                  {
                    "node": "Aggregate",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Execute Workflow",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Schedule Trigger": {
              "main": [
                [
                  {
                    "node": "Starting Message",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Create sub path": {
              "main": [
                [
                  {
                    "node": "Check Status",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Starting Message": {
              "main": [
                [
                  {
                    "node": "n8n",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Execute Workflow": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ],
                [
                  {
                    "node": "Failed Flows",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Completed Notification": {
              "main": [
                [
                  {
                    "node": "Discord",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Failed Flows": {
              "main": [
                [
                  {
                    "node": "Loop Over Items",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Config": {
              "main": [
                [
                  {
                    "node": "Merge Items",
                    "type": "main",
                    "index": 1
                  },
                  {
                    "node": "Get file data",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Get file data": {
              "main": [
                [
                  {
                    "node": "If file too large",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Aggregate": {
              "main": [
                [
                  {
                    "node": "Completed Notification",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "executionOrder": "v1"
          },
          "staticData": null,
          "meta": null,
          "pinData": {
            "Execute Workflow Trigger": [
              {
                "json": {
                  "createdAt": "2025-03-17T15:46:44.901Z",
                  "updatedAt": "2025-04-03T13:40:07.794Z",
                  "id": "FLF6PYPoSbhxOeCz",
                  "name": "FAQ Agent",
                  "active": false,
                  "nodes": [
                    {
                      "parameters": {
                        "options": {}
                      },
                      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
                      "typeVersion": 1.3,
                      "position": [
                        260,
                        0
                      ],
                      "id": "eb9032c8-7c90-47b4-9cce-7621c72f83fd",
                      "name": "Question and Answer Chain",
                      "alwaysOutputData": true
                    },
                    {
                      "parameters": {
                        "options": {}
                      },
                      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
                      "typeVersion": 1,
                      "position": [
                        200,
                        220
                      ],
                      "id": "92faca8e-e083-43a7-8846-212807db9dae",
                      "name": "OpenAI Chat Model",
                      "credentials": {
                        "openAiApi": {
                          "id": "n0YNBr6r2ZQqJ11H",
                          "name": "OpenAi account"
                        }
                      }
                    },
                    {
                      "parameters": {},
                      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
                      "typeVersion": 1,
                      "position": [
                        380,
                        220
                      ],
                      "id": "8a436a67-7b0c-4000-9833-f5ded36ada6c",
                      "name": "Vector Store Retriever"
                    },
                    {
                      "parameters": {
                        "pineconeIndex": {
                          "__rl": true,
                          "value": "rag-n8n",
                          "mode": "list",
                          "cachedResultName": "rag-n8n"
                        },
                        "options": {}
                      },
                      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
                      "typeVersion": 1,
                      "position": [
                        300,
                        420
                      ],
                      "id": "4a045935-2b12-4e1a-bc0f-af7e0fdad3fa",
                      "name": "Pinecone Vector Store1",
                      "credentials": {
                        "pineconeApi": {
                          "id": "wU5pmUBrwYAvBJ34",
                          "name": "PineconeApi account"
                        }
                      }
                    },
                    {
                      "parameters": {
                        "options": {}
                      },
                      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
                      "typeVersion": 1.1,
                      "position": [
                        300,
                        600
                      ],
                      "id": "aeb25a3a-d22c-4ac3-9057-e1df126a8187",
                      "name": "Embeddings OpenAI1",
                      "credentials": {
                        "openAiApi": {
                          "id": "n0YNBr6r2ZQqJ11H",
                          "name": "OpenAi account"
                        }
                      }
                    },
                    {
                      "parameters": {},
                      "type": "n8n-nodes-base.executeWorkflowTrigger",
                      "typeVersion": 1,
                      "position": [
                        -20,
                        0
                      ],
                      "id": "fff1fe8e-7992-4ca8-babe-1a14ffe8fdb6",
                      "name": "Execute Workflow Trigger"
                    },
                    {
                      "parameters": {
                        "assignments": {
                          "assignments": [
                            {
                              "id": "dd56e7d2-f812-4619-bed7-d99c74d77440",
                              "name": "response",
                              "value": "={{ $json.response.text }}",
                              "type": "string"
                            }
                          ]
                        },
                        "options": {}
                      },
                      "type": "n8n-nodes-base.set",
                      "typeVersion": 3.4,
                      "position": [
                        696,
                        0
                      ],
                      "id": "f99380d2-985f-41ce-9fc8-036327a98d61",
                      "name": "response_ok"
                    }
                  ],
                  "connections": {
                    "OpenAI Chat Model": {
                      "ai_languageModel": [
                        [
                          {
                            "node": "Question and Answer Chain",
                            "type": "ai_languageModel",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "Vector Store Retriever": {
                      "ai_retriever": [
                        [
                          {
                            "node": "Question and Answer Chain",
                            "type": "ai_retriever",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "Pinecone Vector Store1": {
                      "ai_vectorStore": [
                        [
                          {
                            "node": "Vector Store Retriever",
                            "type": "ai_vectorStore",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "Embeddings OpenAI1": {
                      "ai_embedding": [
                        [
                          {
                            "node": "Pinecone Vector Store1",
                            "type": "ai_embedding",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "Execute Workflow Trigger": {
                      "main": [
                        [
                          {
                            "node": "Question and Answer Chain",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    },
                    "Question and Answer Chain": {
                      "main": [
                        [
                          {
                            "node": "response_ok",
                            "type": "main",
                            "index": 0
                          }
                        ]
                      ]
                    }
                  },
                  "settings": {
                    "executionOrder": "v1"
                  },
                  "staticData": null,
                  "meta": {
                    "templateCredsSetupCompleted": true
                  },
                  "pinData": {},
                  "versionId": "88c52a19-b839-455c-85b9-2b66658c9839",
                  "triggerCount": 0,
                  "tags": [
                    {
                      "createdAt": "2025-04-02T21:00:25.027Z",
                      "updatedAt": "2025-04-02T21:00:25.027Z",
                      "id": "4Z9BlXLNysnGHcBB",
                      "name": "Produccion"
                    }
                  ]
                }
              }
            ]
          },
          "versionId": "df31c913-26b8-4893-9b2a-954c2716731f",
          "triggerCount": 0,
          "tags": []
        }
      }
    ]
  },
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Angela/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-16T23:51:44.840Z",
  "versionId": "34b06a51-1356-4a95-bb5d-0b2130c0f912"
}