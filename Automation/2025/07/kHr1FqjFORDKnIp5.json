{
  "active": true,
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Enviar texto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "ClickUp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create tasks": {
      "ai_tool": [
        [
          {
            "node": "Create tasks and follow-up call",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Format to html": {
      "main": [
        [
          {
            "node": "Send meeting summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Create tasks and follow-up call",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Only 1 item": {
      "main": [
        [
          {
            "node": "Filter: Only 1 item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Zoom: Get transcript file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create follow-up call": {
      "ai_tool": [
        [
          {
            "node": "Create tasks and follow-up call",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Filter transcript URL": {
      "main": [
        [
          {
            "node": "Filter: Only 1 item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter: Last 24 hours": {
      "main": [
        [
          {
            "node": "Zoom: Get transcripts data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create meeting summary": {
      "main": [
        [
          {
            "node": "Sort for mail delivery",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create tasks and follow-up call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format transcript text": {
      "main": [
        [
          {
            "node": "Zoom: Get participants data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort for mail delivery": {
      "main": [
        [
          {
            "node": "Format to html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get transcript file": {
      "main": [
        [
          {
            "node": "Extract text from transcript file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get transcripts data": {
      "main": [
        [
          {
            "node": "Filter transcript URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Recording/Transcript available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get participants data": {
      "main": [
        [
          {
            "node": "Create meeting summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zoom: Get data of last meeting": {
      "main": [
        [
          {
            "node": "Filter: Last 24 hours",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract text from transcript file": {
      "main": [
        [
          {
            "node": "Format transcript text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agenda Adoreal": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger1": {
      "main": [
        []
      ]
    },
    "Agenda Mappa": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agenda Whitelabel": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Agenda Personal": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-16T17:11:09.576Z",
  "id": "kHr1FqjFORDKnIp5",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Agenda Manager",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1904,
        288
      ],
      "id": "01ac38ea-5547-406a-ac52-dfcc00094b95",
      "name": "Telegram Trigger",
      "webhookId": "59b698be-b77c-46b0-ab05-61c593ba33c0",
      "credentials": {
        "telegramApi": {
          "id": "xrf1D2O5qOceQaVy",
          "name": "Valeia_Transcriber"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Que eventos tengo?",
        "options": {
          "systemMessage": "=Eres el asistente personal de Andrés. Tu función es gestionar su agenda compilando diferentes agendas e informarle sobre todos los eventos que tiene.\n\nPara lograr tu ejetivo tienes las herramientas: \n\n\"Agenda Adoreal\"\n\"Agenda Mappa\"\n\"Agenda Personal\"\n\"Agenda Whitelabel\"\n\nDebes enviarle el mensaje separando la los eventos por agenda.\n\nIgnora los eventos que tengan como titulo: Busy, busy, out of office, lunch\n\n## CONTEXTO TEMPORAL\nFecha y hora actual: {{ $now.format('cccc, yyyy-MM-dd HH:mm') }}\nZona horaria: {{ $now.format('z') }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        224,
        0
      ],
      "id": "5313bdc0-270b-4732-a339-f5616ce40222",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro-preview-06-05",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        160,
        208
      ],
      "id": "85623ba4-d11d-492a-b0a0-4159177ae454",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "automation.whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "b29d1455-8e84-4d53-83db-7440ea9d2b6c",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        464,
        1520
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "errorMessage": "={{ $json.error.cause.message }}"
      },
      "id": "5b8ccf30-0861-4af1-8891-de0571ee6c3c",
      "name": "No Recording/Transcript available",
      "type": "n8n-nodes-base.stopAndError",
      "position": [
        -848,
        1152
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "type": "scheduled"
        }
      },
      "id": "1cdcff0a-4184-434b-ac7f-dfa97357b69e",
      "name": "Zoom: Get data of last meeting",
      "type": "n8n-nodes-base.zoom",
      "position": [
        -1376,
        944
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ef149af8-7f9d-4e5a-8ccf-4a5f1e09eecc",
              "name": "transcript_file",
              "type": "string",
              "value": "={{ $json.recording_files.find(f => f.file_type === 'TRANSCRIPT').download_url }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ce125898-691b-44d8-bec6-742bbca2a582",
      "name": "Filter transcript URL",
      "type": "n8n-nodes-base.set",
      "position": [
        -848,
        944
      ],
      "typeVersion": 3.4,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d28908e2-ca72-44c5-b6b3-fb9254e26e86",
      "name": "Filter: Only 1 item",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -656,
        944
      ],
      "typeVersion": 3,
      "disabled": true
    },
    {
      "parameters": {
        "url": "={{ $json.transcript_file }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zoomOAuth2Api",
        "options": {}
      },
      "id": "16055f45-47b5-47ee-8934-207a9664da65",
      "name": "Zoom: Get transcript file",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -480,
        944
      ],
      "typeVersion": 4.2,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "6fed9b91-6796-4df5-8b52-fd282995e52e",
      "name": "Extract text from transcript file",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -304,
        944
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "70019192-02ef-4b0a-a747-3ca5f46aeeaa",
              "name": "transcript",
              "type": "string",
              "value": "={{ $json.data.split('\\r\\n\\r\\n').slice(1).map(block => {\n const lines = block.split('\\r\\n');\n return lines.slice(2).join(' ');\n}).join('\\n') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "dd457d41-572d-4da1-af0f-68816c987986",
      "name": "Format transcript text",
      "type": "n8n-nodes-base.set",
      "position": [
        -128,
        944
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "url": "=https://api.zoom.us/v2/past_meetings/{{ $('Filter: Last 24 hours').item.json.id }}/participants",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zoomOAuth2Api",
        "options": {}
      },
      "id": "2cc5b4c5-7a93-4130-a52a-ecc7f5242fb9",
      "name": "Zoom: Get participants data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        64,
        944
      ],
      "typeVersion": 4.2,
      "disabled": true
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "=Create a formal meeting minutes document from the following transcript and meeting details.\n\nMeeting Date: {{ $('Zoom: Get data of last meeting').item.json.start_time }} // This needs to be formatted from the meeting details\nParticipants: {{ $json.participants.map(p => p.name + ' (' + p.user_email + ')').join(', ') }}\n\nTranscript:\n{{ $('Format transcript text').item.json.transcript }}\n\nPlease create the minutes in the following format:\n\nMeeting on [Date]\n\nParticipants:\n[List of participants with email addresses]\n\nSummary of the Meeting:\n[Brief and concise summary of the topics discussed]\n\nTasks:\n- [Task] (Responsible: [Name])\n- ...\n\nImportant Dates:\n- [Date] ([Context])\n- ...\n"
            }
          ]
        },
        "options": {}
      },
      "id": "4750323c-bc4c-4f1d-aa5d-211fb86a0f88",
      "name": "Create meeting summary",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "position": [
        224,
        944
      ],
      "typeVersion": 1.8,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cc51b7e4-d5c2-4cd4-9488-4d181eaaa02e",
              "name": "subject",
              "type": "string",
              "value": "=Meeting summary: {{ $('Zoom: Get data of last meeting').item.json.topic }} on {{ $('Zoom: Get data of last meeting').item.json.start_time }}"
            },
            {
              "id": "f3940ea2-9084-4c25-828e-5ddaa428ec83",
              "name": "=to",
              "type": "string",
              "value": "={{ $('Zoom: Get participants data').item.json.participants[0].user_email }}"
            },
            {
              "id": "1211af5b-2240-44ce-9df7-63d93f57806e",
              "name": "body",
              "type": "string",
              "value": "={{ $json.message.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8f9a9a10-f552-4056-86ce-0f7077c69456",
      "name": "Sort for mail delivery",
      "type": "n8n-nodes-base.set",
      "position": [
        544,
        944
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const items = [];\n\nfor (const item of $input.all()) {\n const body = item.json.body;\n if (!body) continue;\n\n // Simple split approach\n const sections = body.split('\\n\\n');\n const title = sections[0].replace(/\\*\\*/g, '');\n const participants = sections[1].split('\\n').slice(1).join('\\n');\n const summary = sections[2].split('\\n').slice(1).join('\\n');\n const tasks = sections[3].split('\\n').slice(1).join('\\n');\n const dates = sections[4].split('\\n').slice(1).join('\\n');\n\n const html = `<html>\n<body style=\"font-family: Arial, sans-serif; max-width: 800px; margin: 20px;\">\n<h1 style=\"color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;\">${title}</h1>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Participants:</h2>\n<ul style=\"list-style-type: none; padding-left: 20px;\">\n${participants.split('\\n').map(p => `<li>${p.replace('- ', '')}</li>`).join('\\n')}\n</ul>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Meeting Summary:</h2>\n<p style=\"margin-left: 20px;\">${summary}</p>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Tasks:</h2>\n<ul style=\"margin-left: 20px;\">\n${tasks.split('\\n').map(t => `<li>${t.replace('- ', '')}</li>`).join('\\n')}\n</ul>\n<h2 style=\"color: #2c3e50; margin-top: 20px;\">Important Dates:</h2>\n<ul style=\"margin-left: 20px;\">\n${dates.split('\\n').map(d => `<li>${d.replace('- ', '')}</li>`).join('\\n')}\n</ul>\n</body>\n</html>`;\n\n items.push({\n json: {\n html,\n to: item.json.to,\n subject: item.json.subject\n }\n });\n}\n\nreturn items;"
      },
      "id": "a83bab82-4f55-41d8-b7dd-3298a9bb3896",
      "name": "Format to html",
      "type": "n8n-nodes-base.code",
      "position": [
        704,
        944
      ],
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "fromEmail": "friedemann.schuetz@posteo.de",
        "toEmail": "={{ $json.to }}",
        "subject": "={{ $json.subject }}",
        "html": "={{ $json.html }}",
        "options": {}
      },
      "id": "0c975cdf-ff63-47f8-a143-60af84ec632e",
      "name": "Send meeting summary",
      "type": "n8n-nodes-base.emailSend",
      "position": [
        864,
        944
      ],
      "typeVersion": 2.1,
      "webhookId": "807ef1b1-572a-465e-9984-4176cee9c331",
      "disabled": true
    },
    {
      "parameters": {
        "name": "create_task",
        "description": "=Use this tool to create a task. \nFor task creation use only action items for me Friedemann, don't use action items for other participants.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "zSKQLEObdU9RiThI",
          "cachedResultName": "create_task"
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n \"type\": \"object\",\n \"properties\": {\n \"items\": {\n \"type\": \"array\",\n \"description\": \"An array of tasks\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": {\n \"name\": {\n \"type\": \"string\",\n \"description\": \"The name of the task\"\n },\n \"description\": {\n \"type\": \"string\",\n \"description\": \"A detailed description of the task\"\n },\n \"due_date\": {\n \"type\": \"string\",\n \"description\": \"Due Date\"\n },\n \"priority\": {\n \"type\": \"string\",\n \"description\": \"Priority. . Please capitalize first letter\"\n },\n \"project_name\": {\n \"type\": \"string\",\n \"description\": \"Name of the project. Word 'Project' shouldn't be included\"\n }\n },\n \"required\": [\n \"name\",\n \"description\",\n \"due_date\",\n \"priority\"\n ],\n \"additionalProperties\": false\n }\n }\n },\n \"required\": [\n \"items\"\n ],\n \"additionalProperties\": false\n}"
      },
      "id": "2f1168c7-5605-44ee-8721-b87f9e5678d1",
      "name": "Create tasks",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        640,
        1520
      ],
      "typeVersion": 1.3,
      "disabled": true
    },
    {
      "parameters": {
        "agent": "openAiFunctionsAgent",
        "promptType": "define",
        "text": "=<system_prompt>\n\nTODAY IS: {{ $now }}\n\nYOU ARE A MEETING ASSISTANT FOR AUTOMATION IN N8N. YOUR TASK IS TO EFFICIENTLY AND PRECISELY PROCESS INFORMATION FROM ZOOM MEETINGS TO GENERATE TO-DOS AND SCHEDULE FOLLOW-UP MEETINGS. YOU HAVE ACCESS TO THE FOLLOWING DATA:\n\n### INPUTS ###\n- **MEETING TITLE**: {{ $('Zoom: Get data of last meeting').item.json.topic }}\n- **PARTICIPANTS**: {{ $('Zoom: Get participants data').item.json.participants[0].name }}\n- **TRANSCRIPT**: {{ $('Format transcript text').item.json.transcript }}\n\n### YOUR TASKS ###\n1. **CREATE TO-DOS**:\n - IDENTIFY TASKS AND TO-DOS IN THE TRANSCRIPT.\n - FORMULATE CLEAR, CONCRETE TASKS.\n - PASS THESE TASKS TO THE TOOL \"Create tasks\" TO SAVE THEM IN CLICKUP. \n - DATA STRUCTURE:\n - **TASK DESCRIPTION**: Brief description of the task.\n - **ASSIGNED PERSON**: First name from the participant list.\n - **DUE DATE**: Use any date mentioned in the transcript; otherwise, set to \"Not specified.\"\n\n2. **CREATE MEETING**:\n - ANALYZE THE TRANSCRIPT TO IDENTIFY INFORMATION ABOUT THE NEXT MEETING (DATE, TIME, AND TOPIC).\n - PASS THIS INFORMATION TO THE TOOL \"Create follow-up call.\"\n - DATA STRUCTURE:\n - **MEETING TITLE**: \"Follow-up: [Meeting Title]\"\n - **DATE AND TIME**: Determined from the transcript or set to \"Next Tuesday at 10:00 AM\" if no information is provided.\n - **PARTICIPANTS**: Add all participants from the list.\n\n### CHAIN OF THOUGHTS ###\n1. **UNDERSTAND**: Read and analyze the provided inputs (title, participants, transcript).\n2. **IDENTIFY**: Extract relevant information for the to-dos and the next meeting.\n3. **DIVIDE**: Split the task into two separate processes: creating to-dos and creating the meeting.\n4. **STRUCTURE**: Format the results in the required structure for the respective tools.\n5. **TRANSMIT**: Pass the data to the designated tools in n8n.\n6. **VERIFY**: Ensure the data is correct and complete.\n\n### WHAT YOU SHOULD NOT DO ###\n- **NEVER**: Create unclear or vague to-dos.\n- **NEVER**: Ignore missing data – use default values where uncertain.\n- **NEVER**: Overlook information from the inputs or make incorrect connections.\n- **NEVER**: Transmit tasks or meetings without proper formatting.\n\n### OUTPUT EXAMPLES ###\n1. **TO-DO**:\n - **TASK DESCRIPTION**: \"Prepare presentation for the next meeting.\"\n - **ASSIGNED PERSON**: \"John Doe.\"\n - **DUE DATE**: \"2025-01-25.\"\n\n2. **MEETING**:\n - **MEETING TITLE**: \"Follow-up: Project Discussion.\"\n - **DATE AND TIME**: \"2025-01-28 at 10:00 AM.\"\n - **PARTICIPANTS**: \"John Doe, Jane Example.\"\n\n### NOTES ###\n- EXECUTE YOUR TASKS WITH THE HIGHEST PRECISION AND CONTEXT SENSITIVITY.\n- RELY ON THE PROVIDED DATA AND DEFAULT VALUES WHERE NECESSARY.\n</system_prompt>\n",
        "options": {}
      },
      "id": "51608b72-38cb-402a-8b56-5a96eda71e14",
      "name": "Create tasks and follow-up call",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        544,
        1200
      ],
      "typeVersion": 1.7,
      "disabled": true
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Use tool to create Outlook Calendar Event. Use this tool only when transcript contains information that call should be scheduled.",
        "resource": "event",
        "operation": "create",
        "calendarId": {
          "__rl": true,
          "mode": "list",
          "value": "AQMkADAwATNiZmYAZC1jYjE5LWExMzQtMDACLTAwCgBGAAAD1gD8iHcpKEiYQc0w4fCLUgcA-79r8r8ac0aInYGVxRUqCwAAAgEGAAAA-79r8r8ac0aInYGVxRUqCwAAAkH-AAAA",
          "cachedResultName": "Calendar"
        },
        "subject": "={{ $fromAI(\"meeting_name\",\"Meeting name\",\"string\") }}",
        "startDateTime": "={{ $fromAI(\"start_date_time\",\"Date and time of meeting start\",\"string\") }}",
        "endDateTime": "={{ $fromAI(\"end_date_time\",\"Date and time of meeting end\",\"string\") }}",
        "additionalFields": {
          "timeZone": "Europe/Berlin"
        }
      },
      "id": "799d9303-2c4d-4494-b859-0b15805df0cb",
      "name": "Create follow-up call",
      "type": "n8n-nodes-base.microsoftOutlookTool",
      "position": [
        800,
        1520
      ],
      "typeVersion": 2,
      "webhookId": "677ebc93-9e6c-4773-85f3-8eec17e763ef",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "de097a4f-1f3e-4dc0-9ab6-139311ff4676",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              },
              "leftValue": "={{ $json.start_time }}",
              "rightValue": "={{$now.minus({ hours: 24 }).toISO()}}"
            }
          ]
        },
        "options": {}
      },
      "id": "c74ddef6-1aeb-4d0c-9f41-83885ca093d6",
      "name": "Filter: Last 24 hours",
      "type": "n8n-nodes-base.filter",
      "position": [
        -1216,
        944
      ],
      "typeVersion": 2.2,
      "disabled": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "query.items",
        "options": {}
      },
      "id": "830ccdbe-8dc9-4e8b-a857-7cbf5e2a2a02",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -224,
        1472
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "team": "9012366821",
        "space": "90122025710",
        "folder": "90123813376",
        "list": "901207046581",
        "name": "={{ $json.name }}",
        "additionalFields": {
          "content": "={{ $json.description }}",
          "dueDate": "={{ $json.due_date }}"
        }
      },
      "id": "e0b22a24-8d56-4624-b307-383e69222a87",
      "name": "ClickUp",
      "type": "n8n-nodes-base.clickUp",
      "position": [
        32,
        1472
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Sub workflow: Create Task in ClickUp",
        "height": 280,
        "width": 1000
      },
      "id": "93648680-81c1-4ba4-afef-7568e908691a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -656,
        1392
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Welcome to my Zoom AI Meeting Assistant Workflow!\n\n### This workflow has the following sequence:\n\n1. manual trigger (Can be replaced by a scheduled trigger or a webhook)\n2. retrieval of of Zoom meeting data\n3. filter the events of the last 24 hours\n4. retrieval of transcripts and extract of the text\n5. creating a meeting summary, format to html and send per mail\n6. create tasks and follow-up call (if discussed in the meeting) in ClickUp/Outlook (can be replaced by Gmail, Airtable, and so forth) via sub workflow\n\n### The following accesses are required for the workflow:\n- Zoom Workspace (via API and HTTP Request): [Documentation](https://docs.n8n.io/integrations/builtin/credentials/zoom/)\n- Microsoft Outlook: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/microsoft/)\n- ClickUp: [Documentation](https://docs.n8n.io/integrations/builtin/credentials/clickup/)\n- AI API access (e.g. via OpenAI, Anthropic, Google or Ollama)\n- SMTP access data (for sending the mail)\n\nYou can contact me via LinkedIn, if you have any questions: https://www.linkedin.com/in/friedemann-schuetz",
        "height": 520,
        "width": 660
      },
      "id": "670b32ba-6bf6-463f-9459-775b854c719d",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1584,
        1152
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "=https://api.zoom.us/v2/meetings/{{ $json.id }}/recordings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "zoomOAuth2Api",
        "options": {}
      },
      "id": "c30d301f-fca8-4394-810d-cf9f5f4dbaf1",
      "name": "Zoom: Get transcripts data",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1040,
        944
      ],
      "typeVersion": 4.2,
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "event",
        "fromAllCalendars": false,
        "calendarId": {
          "__rl": true,
          "value": "AAMkAGRhZTIyNWY0LTAwYzEtNDQwYi1hMGUzLWYzNjNlOGQyNWZmMABGAAAAAADG4r0_gV9ITY3DO1mr_eNSBwCmfm1fbYtYQKkso_9FD2FdAAAAAAEGAACmfm1fbYtYQKkso_9FD2FdAAAAACC0AAA=",
          "mode": "list",
          "cachedResultName": "Calendario"
        },
        "returnAll": true,
        "filters": {
          "custom": ""
        }
      },
      "type": "n8n-nodes-base.microsoftOutlookTool",
      "typeVersion": 2,
      "position": [
        592,
        272
      ],
      "id": "d9a7f103-f7ae-4dc5-b672-d4381a633858",
      "name": "Agenda Adoreal",
      "webhookId": "235f98af-eab2-45d4-96c9-bee4c7cea75a",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "GkZE7g6pqvN5dLci",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "remoteJid": "57304580963",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1664,
        288
      ],
      "id": "3f6d9970-1186-4911-85f0-281eec769352",
      "name": "Enviar texto",
      "credentials": {
        "evolutionApi": {
          "id": "OFo9A7x3qE1W1DKN",
          "name": "Evolution account Pedro"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -448,
        -176
      ],
      "id": "5ca96d6e-cb0f-4d83-9d03-a040e37ae57e",
      "name": "Telegram Trigger1",
      "webhookId": "c6d0c7b4-fd76-4a54-85d8-5df776754717",
      "credentials": {
        "telegramApi": {
          "id": "iDWZwExyaEtemxqA",
          "name": "Workant"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "176878701",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        592,
        0
      ],
      "id": "53055f64-b3bc-499f-9aa3-4eff746f5ca0",
      "name": "Send a text message",
      "webhookId": "18a658e0-c142-438f-ae70-3ab50d6b69a8",
      "credentials": {
        "telegramApi": {
          "id": "iDWZwExyaEtemxqA",
          "name": "Workant"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "andres@mappa.ai",
          "mode": "list",
          "cachedResultName": "andres@mappa.ai"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ day: 1 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        432,
        288
      ],
      "id": "7a605a14-e97e-4d6d-a64b-747a6e305e29",
      "name": "Agenda Mappa",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Q0ztMJVO6QGlJf7z",
          "name": "Mappa"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            },
            {
              "triggerAtHour": 13
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "98c37e0a-6499-4982-9d64-123417e4a48a",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "hola@whitelabel.lat",
          "mode": "list",
          "cachedResultName": "hola@whitelabel.lat"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ day: 1 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        752,
        272
      ],
      "id": "d1929ad4-2517-4a87-b2c2-844ecea5f658",
      "name": "Agenda Whitelabel",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RMuQyYsn6eGZTZPX",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "andresco70@gmail.com",
          "mode": "list",
          "cachedResultName": "andres corrral"
        },
        "returnAll": true,
        "timeMax": "={{ $now.plus({ day: 1 }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        912,
        272
      ],
      "id": "8744fe44-fee3-4db3-bd57-a394d706002b",
      "name": "Agenda Personal",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "AH3OiZ8CUZ7yhAry",
          "name": "Andrés Personal"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleTasksTool",
      "typeVersion": 1,
      "position": [
        288,
        288
      ],
      "id": "98dee1ca-b111-42df-993b-b3e215d28d79",
      "name": "Get many tasks in Google Tasks",
      "disabled": true
    }
  ],
  "pinData": {},
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-07-19T17:13:18.958Z",
  "versionId": "d0bf5ebe-c0b9-44ee-830a-a17d56c23463"
}