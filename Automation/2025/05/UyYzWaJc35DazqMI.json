{
  "active": false,
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Created": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Doc Rows": {
      "main": [
        [
          {
            "node": "Delete Old Data Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID": {
      "main": [
        [
          {
            "node": "Delete Old Doc Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Set Schema",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema": {
      "main": [
        [
          {
            "node": "Update Schema for Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Document Metadata Table": {
      "main": [
        [
          {
            "node": "Create Document Rows Table (for Tabular Data)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set File ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Documents Table and Match Function": {
      "main": [
        [
          {
            "node": "Create Document Metadata Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Rows": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Select rows from a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Table Name": {
      "main": [
        [
          {
            "node": "Create Documents Table and Match Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Table Name DELETE": {
      "main": [
        [
          {
            "node": "DELETE Documents Table and Match Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DELETE Documents Table and Match Function": {
      "main": [
        []
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Retrieve Documents",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_vectorStore": [
        [
          {
            "node": "Retrieve Documents",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve Documents": {
      "ai_tool": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Chat History": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Execute SQL Query": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Table Definition": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get DB Schema and Tables List": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Execute SQL Query1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-14T20:23:57.210Z",
  "id": "UyYzWaJc35DazqMI",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "RAG SUPABASE MEJORADO",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "9d3d7165-af0a-4013-bbb7-5111c747cfc8",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -180,
        260
      ],
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID').first().json.file_id }}"
              },
              {
                "name": "file_title",
                "value": "={{ $('Set File ID').first().json.file_title }}"
              }
            ]
          }
        }
      },
      "id": "0ef5d256-18f6-4e2a-9817-edb34e01315f",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1000,
        1140
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "fef10083-9576-44a8-bf03-4356ab378ec6",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        760,
        1140
      ],
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Agent Tools for RAG",
        "height": 489,
        "width": 583,
        "color": 4
      },
      "id": "3c2e1cda-07df-4398-8d54-1475a6d27953",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        580,
        -40
      ]
    },
    {
      "parameters": {
        "content": "## Tool Para agregar documentos de Google Drive a la Vector DB",
        "height": 867,
        "width": 3073,
        "color": 5
      },
      "id": "466788e3-2c9f-4ea9-b249-740fb47f5220",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1740,
        540
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "0892fce1-9978-4297-85c7-5e4404c93afe",
      "name": "Download File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -660,
        820
      ],
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "zaV2y8aJFPAFMtmH",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1Pq7SShL22J013cE2tx-1T1d8wuNW6mE8",
          "mode": "list",
          "cachedResultName": "RAG",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Pq7SShL22J013cE2tx-1T1d8wuNW6mE8"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "c3ca8780-1c90-44aa-9064-abe7231a43dd",
      "name": "File Created",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1680,
        660
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "zaV2y8aJFPAFMtmH",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 1,
              "unit": "minutes"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1Pq7SShL22J013cE2tx-1T1d8wuNW6mE8",
          "mode": "list",
          "cachedResultName": "RAG",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Pq7SShL22J013cE2tx-1T1d8wuNW6mE8"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "cb03e361-91da-42f4-bf13-131afe425bcb",
      "name": "File Updated",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -1680,
        820
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "zaV2y8aJFPAFMtmH",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "eac35ba6-2269-409f-a92d-3feb1a3b0fbb",
      "name": "Extract Document Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        200,
        1140
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "0dea5be5-7b16-4a4c-8f14-3fd1bab6397a",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -40,
        260
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "={{ $json.table_name }}",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $json.file_id }}*"
      },
      "id": "c169f041-9e1e-457d-929a-2c8168cf5ae2",
      "name": "Delete Old Doc Rows",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -1140,
        660
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "WOovBXIQKQRRL9tN",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c46aea19-96bb-4c5a-a00e-38c5298cbf85",
              "name": "table_name",
              "value": "test_rag",
              "type": "string"
            },
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "915e5bca-407b-4d72-ac72-3b87354bd6a8",
      "name": "Set File ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1320,
        820
      ]
    },
    {
      "parameters": {
        "content": "## EJEMPLO DE AGENT QUE REALIZA LA BUSQUEDA EN LA DB",
        "height": 464.8027193303974,
        "width": 1035.6381264595484
      },
      "id": "a2ae30d2-b9a3-45a5-ba53-102f7f0f9176",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        -40
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "dff37bb9-f63e-410d-b1df-20397945f33b",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        380,
        40
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "70aee4d6-f469-439b-a3f5-8a1c029d3395",
              "name": "tableName",
              "value": "test_rag",
              "type": "string"
            },
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e07406d7-7484-4b84-a3cc-ac99dae04b37",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -180,
        40
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "34f2c921-412a-4d75-a95d-8f52cdba015f",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -440,
        40
      ],
      "webhookId": "e104e40e-6134-4825-a6f0-8a646d882662"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "rag",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "e138c83c-f1ac-4645-b341-8608a619191c",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -440,
        240
      ],
      "webhookId": "bf4dd093-bb02-472c-9454-7ab9af97bd1d",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "23e47263-dbc3-4e5c-8ebe-b0775c83ea0d",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        200,
        580
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "e3c4694e-5176-4087-acf2-cb77ee56bc96",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        240,
        760
      ]
    },
    {
      "parameters": {},
      "id": "84c8daea-43ca-4829-a798-b05603cd9872",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        900,
        1260
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "fe5ba504-e5cb-4e25-90b3-40cdc98e911f",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        440,
        760
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=UserMessage: {{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the '{{ $json.tableName }}' table, look up the documents available in your knowledge base in the '{{ $json.tableName }}_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the '{{ $json.tableName }}_rows' table.\n\nAlways start by performing RAG unless the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "id": "f28852ef-0020-4cbe-82e7-c3eabfc5adeb",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        40,
        40
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "=application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b69f5605-0179-4b02-9a32-e34bb085f82d",
                    "leftValue": "={{ $('Set File ID').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 3
        }
      },
      "id": "35ba7545-fa5d-4835-8e73-14010cde6540",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -460,
        800
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.table_name }}",
          "mode": "id"
        },
        "options": {}
      },
      "id": "45d60650-2a08-47ac-8616-57f6468e44a7",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        920,
        920
      ],
      "credentials": {
        "supabaseApi": {
          "id": "WOovBXIQKQRRL9tN",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f422e2e0-381c-46ea-8f38-3f58c501d8b9",
              "name": "schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "bb07c71e-5b60-4795-864c-cc3845b6bc46",
              "name": "data",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        880,
        700
      ],
      "id": "0f00ba5c-8314-4caf-af29-1aaca9c13dbd",
      "name": "Set Schema"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        20,
        920
      ],
      "id": "98788522-4277-4cbe-a7bf-cab75ebd15e2",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "content": "## Ejecuta estos Nodo Una Vez para Configurar las Tablas de la Base de Datos, debes agregar el nombre de la tabla en los nodos set en Table Name",
        "height": 300,
        "width": 1020,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1740,
        220
      ],
      "typeVersion": 1,
      "id": "0b5cf91a-403b-423f-b315-fe8064249a84",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE {{ $('Table Name').item.json.tableName }}_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1160,
        340
      ],
      "id": "4fa397ee-4058-4b4b-918b-eae4cf04cddb",
      "name": "Create Document Metadata Table",
      "credentials": {
        "postgres": {
          "id": "gFhB2sfDoFHEQ7Pn",
          "name": "pgvector n8n_scrapper"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE {{ $('Table Name').item.json.tableName }}_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES {{ $('Table Name').item.json.tableName }}_metadata(id),\n    row_data JSONB  -- Store the actual row data\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -940,
        340
      ],
      "id": "6c43ca3d-fd7a-4547-bedf-e9244057feaf",
      "name": "Create Document Rows Table (for Tabular Data)",
      "credentials": {
        "postgres": {
          "id": "gFhB2sfDoFHEQ7Pn",
          "name": "pgvector n8n_scrapper"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "test_rag_metadata",
          "mode": "list",
          "cachedResultName": "test_rag_metadata"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        100,
        260
      ],
      "id": "6cf1f316-362b-438f-ab1d-793fb4ac4168",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      },
      "notes": "Select table {table}_metadata"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(content, ' ') as document_text\nFROM {{ $('Edit Fields').item.json.tableName }}\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        220,
        260
      ],
      "id": "540c4ccd-2ff8-4515-8041-95327f1e7bdd",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "=Run a SQL query - use this to query from the test_rag_rows table once you know the file ID you are querying. dataset_id is the file_id and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the test_rag_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM test_rag_rows\nWHERE dataset_id = '123';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '123'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        380,
        260
      ],
      "id": "64d8bcd2-43f4-4022-84c7-898d29c1c426",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "={{ $('Edit Fields').item.json.tableName }}",
          "mode": "id"
        },
        "options": {
          "queryName": "=match_{{ $('Edit Fields').item.json.tableName }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        720,
        40
      ],
      "id": "5c255e27-7422-459d-b719-75dc9540ed7c",
      "name": "Supabase Vector Store1",
      "credentials": {
        "supabaseApi": {
          "id": "WOovBXIQKQRRL9tN",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        820,
        220
      ],
      "id": "8976cce0-9644-478c-ab62-38fc41382f13",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1500,
        660
      ],
      "id": "deae2d90-57d3-4a49-a3b7-b2bbcfeca377",
      "name": "Loop Over Items",
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Enable the pgvector extension to work with embedding vectors\n--create extension vector; --Ya esta activo\n\n-- Create a table to store your documents\ncreate table {{ $json.tableName }} (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_{{ $json.tableName }} (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - ({{ $json.tableName }}.embedding <=> query_embedding) as similarity\n  from {{ $json.tableName }}\n  where metadata @> filter\n  order by {{ $json.tableName }}.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1340,
        340
      ],
      "id": "830bf6dc-ff83-4048-9794-27807d1656e0",
      "name": "Create Documents Table and Match Function",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "gFhB2sfDoFHEQ7Pn",
          "name": "pgvector n8n_scrapper"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "={{ $('Set File ID').item.json.table_name }}_rows",
        "filters": {
          "conditions": [
            {
              "keyName": "dataset_id",
              "condition": "eq",
              "keyValue": "={{ $('Set File ID').item.json.file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -980,
        820
      ],
      "id": "4afe66ff-d28f-44a0-8842-0a1e051a1342",
      "name": "Delete Old Data Rows",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "supabaseApi": {
          "id": "WOovBXIQKQRRL9tN",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.table_name }}_metadata",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "url": "={{ $('Set File ID').item.json.file_url }}",
            "title": "={{ $('Set File ID').item.json.file_title }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -820,
        680
      ],
      "id": "752b8927-306c-4b25-9bd6-5d3b37ea6fba",
      "name": "Insert Document Metadata",
      "executeOnce": true,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.table_name }}_rows",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        240,
        920
      ],
      "id": "25d187d0-1fd1-4ff3-b18f-3dd71aef849a",
      "name": "Insert Table Rows",
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "={{ $('Set File ID').item.json.table_name }}_metadata",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1060,
        700
      ],
      "id": "308fee52-f72f-4f94-901d-36ca32ce3200",
      "name": "Update Schema for Document Metadata",
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "content": "## 🚀 ¿Qué es esta plantilla?\n\nUna implementación completa y personalizable de **Agentic RAG** en n8n, que va más allá del RAG tradicional. No solo recupera información, sino que puede **razonar, adaptarse y elegir la mejor herramienta** para responder según el tipo de pregunta y el formato de los datos (texto, PDF, Excel, CSV, etc.).\n\n## 🧠 ¿Por qué usar Agentic RAG?\n\nEl RAG clásico se limita a buscar fragmentos de texto. Esta plantilla supera esas limitaciones:\n\n* Usa **razonamiento avanzado** sobre tu base de conocimiento.\n* Puede hacer cálculos con datos numéricos/tabulares (por ejemplo, desde Excel o CSV).\n* Recupera **documentos completos** si el contexto lo requiere.\n* **Conecta ideas entre documentos** distintos.\n* Cambia dinámicamente entre RAG, SQL o respuestas directas.\n\n## 🛠️ Lo que hace especial a esta plantilla:\n\n* 🔄 **Adaptabilidad inteligente**: Usa la herramienta correcta según el tipo de consulta (por ejemplo: embedding, SQL, texto completo).\n* 📑 **Manejo de múltiples documentos**: Puedes cargar y procesar varios archivos al mismo tiempo.\n* 📊 **Análisis tabular exacto**: No solo lee datos de hojas de cálculo, también puede analizarlos y responder con precisión usando SQL.\n* 🧩 **Contexto ampliado**: Usa tanto fragmentos como documentos enteros según la necesidad.\n* 📦 **Almacenamiento flexible**: Los datos tabulares se guardan como JSONB en Supabase, evitando crear una tabla nueva por cada archivo.\n\n## 🔁 Flujo resumido (parte inferior del diagrama):\n\n1. Escucha cambios en Google Drive (archivo nuevo o actualizado).\n2. Elimina versiones anteriores del documento en Supabase.\n3. Descarga el archivo y detecta su tipo (PDF, Excel, CSV, TXT).\n4. Extrae el texto o estructura tabular.\n5. Divide el texto en fragmentos (\"chunks\") y genera embeddings.\n6. Inserta los datos y metadatos en Supabase para futuras consultas.\n\n## 💬 Flujo del Agente (parte superior del diagrama):\n\n1. Recibe la pregunta vía Webhook.\n2. Usa memoria del chat y documentos para contextualizar.\n3. Selecciona automáticamente la mejor herramienta:\n\n   * Embeddings RAG\n   * Consulta SQL sobre datos tabulares\n   * Acceso directo a documentos completos\n4. Genera la respuesta con OpenAI usando toda esta información combinada.\n\n## 📋 ¿Cómo comenzar?\n\n1. Ejecuta los nodos rojos (👈) una sola vez para crear las tablas necesarias en Supabase.\n2. Conecta tu cuenta de Google Drive y sube documentos.\n3. Prueba el agente haciendo preguntas al Webhook.\n",
        "height": 1420,
        "width": 700,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2760,
        0
      ],
      "typeVersion": 1,
      "id": "b424657f-5a72-42a6-8875-3ba40f6e6e59",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## Cómo comenzar\n1. Ejecuta primero los nodos de creación de tablas para configurar tu base de datos en Supabase\n2. Sube tus documentos via Google Drive (o reemplázalo por otro sistema de almacenamiento)\n3. El agente los procesará automáticamente (dividiendo texto, almacenando datos tabulares en Supabase)\n4. Haz preguntas que aprovechen los múltiples enfoques de razonamiento del agente",
        "height": 180,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1740,
        20
      ],
      "id": "ab18111b-cffa-492c-a2f1-245860e29be5",
      "name": "Sticky Note4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -440,
        1520
      ],
      "id": "6b112c30-2b12-49ab-80aa-7f14477c4406",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "315bc723-45e0-4644-96b1-81366f5c6d31",
              "name": "tableName",
              "value": "tailwind_documentations",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1520,
        340
      ],
      "id": "510f2647-2cef-46d0-b214-99f345eea425",
      "name": "Table Name"
    },
    {
      "parameters": {
        "content": "## Ejecuta estos Nodo Una Vez para eliminar las tablas configuradas, (ELIMINA TODOS LOS DATOS ALMACENADOS)",
        "height": 300,
        "width": 720,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1720,
        1480
      ],
      "typeVersion": 1,
      "id": "b7406809-8d8d-4613-9aee-f49c7e5dd1a9",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "315bc723-45e0-4644-96b1-81366f5c6d31",
              "name": "tableName",
              "value": "tailwind_documentations",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1480,
        1600
      ],
      "id": "ff6d2035-b4f7-40aa-b0d6-3a675425ddb1",
      "name": "Table Name DELETE"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DROP FUNCTION IF EXISTS match_{{ $json.tableName }};\nDROP TABLE IF EXISTS {{ $json.tableName }}_rows;\nDROP TABLE IF EXISTS {{ $json.tableName }}_metadata;\nDROP TABLE IF EXISTS {{ $json.tableName }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1300,
        1600
      ],
      "id": "0f5fb361-006a-4038-a2ca-25b0c1cde0bc",
      "name": "DELETE Documents Table and Match Function",
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const xlsx = require('xlsx');\n\n// Leer el buffer desde el campo binario correctamente\nconst binaryData = items[0].binary.data.data;\nconst buffer = Buffer.from(binaryData, 'base64');\n\n// Leer el archivo Excel completo\nconst workbook = xlsx.read(buffer, { type: 'buffer' });\n\nconst result = [];\n\n// Iterar sobre todas las hojas\nfor (const sheetName of workbook.SheetNames) {\n  const sheet = workbook.Sheets[sheetName];\n  const jsonData = xlsx.utils.sheet_to_json(sheet, { defval: null });\n\n  // Para cada fila, agregarla como un item individual incluyendo el nombre de la hoja\n  for (const row of jsonData) {\n    result.push({\n      json: {\n        sheetName,\n        ...row, // Añade las columnas del Excel como propiedades\n      }\n    });\n  }\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        760
      ],
      "id": "1ee46c68-16c4-4c60-b1f2-24caad04b930",
      "name": "Extract from Excel"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "b3ef413d-78e0-4112-8fb4-56907cfb9eed",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1600,
        220
      ],
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "name": "documents",
        "description": "Use RAG to look up information in the knowledgebase."
      },
      "id": "7a2ed004-cc1a-4abf-abc3-b0ebcd3fc2cf",
      "name": "Retrieve Documents",
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        1380,
        40
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "56cf5c5e-7e89-4ec8-86f5-9fca316ad23d",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        1420,
        320
      ],
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "tableName": {
          "__rl": true,
          "value": "test_rag",
          "mode": "list",
          "cachedResultName": "test_rag"
        },
        "options": {
          "queryName": "match_test_rag"
        }
      },
      "id": "656a358f-9a52-4689-9608-02fa2e472053",
      "name": "Supabase Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1260,
        200
      ],
      "credentials": {
        "supabaseApi": {
          "id": "WOovBXIQKQRRL9tN",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "content": "## OPCION 2 de Agent Tools for RAG",
        "height": 489,
        "width": 583,
        "color": 4
      },
      "id": "85f07bbc-b9da-4298-9aab-6a62f908d665",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1180,
        -40
      ]
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -180,
        260
      ],
      "id": "e6715bee-5fb2-45ef-80de-442bdb92c2c8",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "agent": "openAiFunctionsAgent",
        "options": {
          "systemMessage": "=You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user. Make sure every table has schema prefix to it in sql query which you can get from `Get DB Schema and Tables List` tool.\n\nFetch all data to analyse it for response if needed.\n\n## Tools\n\n- Execute SQL query - Executes any sql query generated by AI\n- Get DB Schema and Tables List - Lists all the tables in database with its schema name\n- Get Table Definition - Gets the table definition from db using table name and schema name"
        }
      },
      "id": "475fdc2b-9d67-4f3c-ab7a-2cb81da87f6a",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        0,
        -1020
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get table definition to find all columns and types",
        "operation": "executeQuery",
        "query": "select\n  c.column_name,\n  c.data_type,\n  c.is_nullable,\n  c.column_default,\n  tc.constraint_type,\n  ccu.table_name AS referenced_table,\n  ccu.column_name AS referenced_column\nfrom\n  information_schema.columns c\nLEFT join\n  information_schema.key_column_usage kcu\n  ON c.table_name = kcu.table_name\n  AND c.column_name = kcu.column_name\nLEFT join\n  information_schema.table_constraints tc\n  ON kcu.constraint_name = tc.constraint_name\n  AND tc.constraint_type = 'FOREIGN KEY'\nLEFT join\n  information_schema.constraint_column_usage ccu\n  ON tc.constraint_name = ccu.constraint_name\nwhere\n  c.table_name = '{{ $fromAI(\"table_name\") }}'\n  AND c.table_schema = '{{ $fromAI(\"schema_name\") }}'\norder by\n  c.ordinal_position",
        "options": {}
      },
      "id": "5e508cc1-a086-4858-a7dc-f434983dc531",
      "name": "Get Table Definition",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        780,
        -800
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {},
      "id": "b4536c5f-e700-4d44-88d0-e2508e45127b",
      "name": "Chat History",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        120,
        -780
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database.",
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
        "options": {}
      },
      "id": "bf306830-6bff-4a92-be93-4b3bb724560d",
      "name": "Execute SQL Query",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        380,
        -800
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get list of all tables with their schema in the database",
        "operation": "executeQuery",
        "query": "SELECT \n    table_schema,\n    table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE'\n    AND table_schema NOT IN ('pg_catalog', 'information_schema')\nORDER BY table_schema, table_name;",
        "options": {}
      },
      "id": "dd6c1fb9-52f7-4f9e-9fc1-e18cd853546e",
      "name": "Get DB Schema and Tables List",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        580,
        -800
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "462e875f-0e1c-40f9-b7f8-6775bd245b1c",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -60,
        -780
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "### 👨‍🎤 Setup\n1. Add your **postgresql** and **OpenAI** credentials.\n2. Click **Chat** button and start asking questions to your database.\n3. Activate the workflow and you can make the chat publicly available.",
        "height": 120,
        "width": 560,
        "color": 5
      },
      "id": "5b9ef25f-f0c3-453a-a37b-081804579613",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -300,
        -1180
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "🛠️ Tools Used:\n1. Execute SQL Query: Used to execute any query generated by the agent.\n2. Get DB Schema and Tables List: It returns the list of all the tables with its schema name.\n3. Get Table Definition: It returns table details like column names, foreign keys and more of a particular table in a schema.",
        "height": 156,
        "width": 562,
        "color": 7
      },
      "id": "c568426e-fa10-4937-ac80-8c55aed32ea7",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        360,
        -640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "👆 You can exchange this with any other chat model of your choice.",
        "height": 99,
        "width": 162,
        "color": 7
      },
      "id": "cfc19c7a-61a8-4130-b759-ce28fac73986",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -100,
        -640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "👆 You can change how many number of messages to keep using `Context Window Length` option. It's 5 by default.",
        "height": 159,
        "width": 162,
        "color": 7
      },
      "id": "4a32873e-656c-4588-b0e2-efd939dfdf50",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        100,
        -640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## CHAT CON POSTGRES",
        "height": 820,
        "width": 1580,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -440,
        -1240
      ],
      "id": "84e9807d-d1fb-49b1-9848-894f87aa50f4",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database.",
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}",
        "options": {}
      },
      "id": "238770bf-408c-42de-ab07-c80f29117999",
      "name": "Execute SQL Query1",
      "type": "n8n-nodes-base.postgresTool",
      "position": [
        520,
        280
      ],
      "typeVersion": 2.5,
      "credentials": {
        "postgres": {
          "id": "ElxPjsmHZmtqJ1PV",
          "name": "pg supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "_prisma_migrations",
          "mode": "list",
          "cachedResultName": "_prisma_migrations"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -180,
        1520
      ],
      "id": "ff8ead34-b209-49da-b6e6-da5d91cc1ea0",
      "name": "Select rows from a table",
      "credentials": {
        "postgres": {
          "id": "DCoXctJfby4wsUJP",
          "name": "pgvector englishTeacher"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "shared": [
    {
      "updatedAt": "2025-05-14T20:23:57.210Z",
      "createdAt": "2025-05-14T20:23:57.210Z",
      "role": "workflow:owner",
      "workflowId": "UyYzWaJc35DazqMI",
      "projectId": "jOPTDk8NtR0eZIqG"
    }
  ],
  "staticData": {
    "node:File Created": {
      "lastTimeChecked": "2025-05-27T23:47:12Z"
    },
    "node:File Updated": {
      "lastTimeChecked": "2025-05-27T23:47:12Z"
    }
  },
  "tags": [],
  "triggerCount": 3,
  "updatedAt": "2025-06-28T01:22:07.037Z",
  "versionId": "c99b750c-bb38-4e38-8ed5-4275e551abc1"
}