{
  "active": true,
  "connections": {
    "auto": {
      "main": [
        [
          {
            "node": "Set data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "PROMPT": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "content": {
      "main": [
        [
          {
            "node": "Get slug",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get slug": {
      "main": [
        [
          {
            "node": "verificar slug",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "verificar slug": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "dataFInal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Get slug",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dataFInal": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entryId": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "entryId1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entryId1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "entryId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "elegir imagen",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "elegir imagen": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "entryId2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "entryId2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "PROMPT",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-26T02:13:26.024Z",
  "id": "zsYwDkrkIXoMnhIa",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "PublishMain",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "publishmind",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -740,
        -290
      ],
      "id": "82b20b05-05e6-4b66-adac-6d619cd97ef3",
      "name": "auto",
      "webhookId": "52b17e88-23bb-45f4-8097-895ffc10f9ee"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52100938-8d98-473a-bed0-92279e4f9699",
              "name": "category",
              "value": "={{ $json.body.category }}",
              "type": "string"
            },
            {
              "id": "fafa76bf-64dd-4184-bb05-7aa5db48fb06",
              "name": "categoryId",
              "value": "={{ $json.body.categoryId }}",
              "type": "string"
            },
            {
              "id": "3694184c-3088-43fd-84e2-bb668715b10b",
              "name": "prompt",
              "value": "={{ $json.body.prompt }}",
              "type": "string"
            },
            {
              "id": "5904a4b8-d8d5-48b0-b06b-760495e6826f",
              "name": "imagenDestacada",
              "value": "={{ $json.body.imagenDestacada }}",
              "type": "string"
            },
            {
              "id": "aa727d77-3dc9-4dfe-8b4f-91745374f668",
              "name": "modoCreacion",
              "value": "={{ $json.body.modoCreacion }}",
              "type": "string"
            },
            {
              "id": "e97a6898-2d5a-4111-a98b-53cb49e45553",
              "name": "contentfulSpaceId",
              "value": "={{ $json.body.contentfulSpaceId }}",
              "type": "string"
            },
            {
              "id": "f13d7de8-871b-48b1-9d29-a175cf40363b",
              "name": "contentfulAccessToken",
              "value": "={{ $json.body.contentfulAccessToken }}",
              "type": "string"
            },
            {
              "id": "76e14dab-16ee-4158-b718-0ff242389692",
              "name": "contentfulEnvironment",
              "value": "={{ $json.body.contentfulEnvironment }}",
              "type": "string"
            },
            {
              "id": "bdca6f37-0080-4118-982c-2373508c51ef",
              "name": "contentfulManagementToken",
              "value": "={{ $json.body.contentfulManagementToken }}",
              "type": "string"
            },
            {
              "id": "e9030bca-2798-48b9-a31f-ea5e0f57585e",
              "name": "tono",
              "value": "={{ $json.body.tono }}",
              "type": "string"
            },
            {
              "id": "0eeab557-d9ca-435f-8d2a-7ec2f97bd241",
              "name": "longitud",
              "value": "={{ $json.body.longitud }}",
              "type": "string"
            },
            {
              "id": "7aa1921a-36da-4cbb-9431-f1cc4cd4ab96",
              "name": "autor",
              "value": "={{ $json.body.autor }}",
              "type": "string"
            },
            {
              "id": "ba9af6dd-3541-4522-9f03-5b9dafb3b541",
              "name": "titulo",
              "value": "={{ $json.body.titulo }}",
              "type": "string"
            },
            {
              "id": "87c0c49a-61b7-4995-b3ec-f23950223288",
              "name": "slug",
              "value": "={{ $json.body.slug }}",
              "type": "string"
            },
            {
              "id": "08d8898d-2895-4e91-9637-abe834f9910c",
              "name": "contenido",
              "value": "={{ $json.body.contenido }}",
              "type": "string"
            },
            {
              "id": "7969225e-1efc-4dc3-ad5a-55f8e50faf04",
              "name": "fechaPublicacion",
              "value": "={{ $json.body.fecha_publicacion }}",
              "type": "string"
            },
            {
              "id": "08175541-305a-4548-b4db-91660152b9b2",
              "name": "tags",
              "value": "={{ $json.body.tags }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -520,
        -300
      ],
      "id": "afa605d8-a30b-4747-b1be-21dfc8506040",
      "name": "Set data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=categoria: {{ $('Set data').item.json.category }},\nprompt: {{ $json.prompt_completo }},\nLa fecha actual es: {{ $json.timestamp }}",
        "options": {
          "systemMessage": "=Eres un escritor experto y editor de contenido digital para PublishMind. Tu trabajo es crear publicaciones completas, naturales y optimizadas para web a partir de prompts detallados.\n\nINSTRUCCIONES CRÍTICAS:\n- Debes crear contenido que suene 100% humano, nunca como IA\n- Usa un estilo conversacional y natural\n- Incluye experiencias personales creíbles y detalles específicos\n- Evita clichés típicos de IA y frases robóticas\n\nLa fecha actual es: {{ $json.timestamp }}. Úsala como contexto para situar el contenido en el tiempo, generar ideas actualizadas o anécdotas creíbles, y devuélvela en el campo \"fechaPublicacion\" con formato ISO 8601.\n\nFORMATO DE RESPUESTA OBLIGATORIO:\nResponde SOLO con los siguientes campos, SIN usar JSON\nNo incluyas explicaciones, solo responde exactamente así, con cada campo entre comillas dobles \" y separados por comas,\nIncluye siempre los campos exactamente como se indica a continuación\n\n  \"titulo\": \"Título atractivo y clicable de máximo 60 caracteres\",\n  \"contenido\": \"<h2>Sección</h2><p>Texto en HTML enriquecido, 400-1500 palabras...</p>\",\n  \"slug\": \"titulo-en-formato-slug-sin-tildes-ni-espacios\",\n  \"metaDescripcion\": \"Descripción SEO atractiva de 140-160 caracteres que invite a hacer clic\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\", \"tag4\", \"tag5\"],\n  \"fechaPublicacion\": [fechaPublicacion],\n  \"modo_creacion\": \"automatico\"\n\nSi no te doy un tema, invéntate uno relevante para jóvenes programadores, freelancers o historias de superación personal con tecnología.\n\nNo uses Markdown. Solo HTML enriquecido en el campo contenido.\nNo encierres la respuesta en bloques JSON o explicaciones.\nSolo responde con los campos y sus valores directos.\n\nTÍTULO:\n- Máximo 60 caracteres\n- Atractivo y clicable\n- Incluye palabras clave principales\n- Sin clickbait excesivo\n\n\nREGLAS PARA GENERAR CONTENIDO HTML:\n\n- Usa <h2> para secciones principales del texto (por ejemplo: “Cómo aprendí a programar”).\n- Usa <h3> para subsecciones o pasos dentro de una fase o bloque.\n- Usa <p> para párrafos claros y bien separados.\n- Usa <strong> para destacar palabras clave o frases importantes.\n- Usa <em> para marcar énfasis sutil o citas internas.\n- Usa <ul> y <ol> para listas de elementos (bullets o pasos numerados).\n- Usa <blockquote> para citas inspiradoras o frases de alguien más.\n- Usa <code> para resaltar código en línea (por ejemplo: console.log(\"Hola\")).\n- Usa <pre><code> para bloques de código completos (respetar identación).\n- Usa <a href=\"https://ejemplo.com\" target=\"_blank\"> para enlaces externos.\n- Todo el contenido debe ser válido y semántico HTML5.\n- Opcional: puedes incluir emojis si tiene sentido en el contexto, especialmente si refuerzan un mensaje positivo o motivador.\n\n-El contenido debe tener una introducción atrapante, desarrollo con ejemplos reales, y una conclusión útil o emocional., bien estructurado, fácil de escanear y visualmente legible cuando se renderiza con Tailwind prose\n\nSLUG:\n- Solo minúsculas, números y guiones\n- Sin tildes, ñ, espacios o caracteres especiales\n- Máximo 50 caracteres\n- Representa el título fielmente\n\nMETA DESCRIPCIÓN:\n- Entre 140-160 caracteres EXACTOS\n- Resume el valor del contenido\n- Incluye call-to-action sutil\n- Optimizada para CTR en buscadores\n\nTAGS:\n- Mínimo 3, máximo 5 tags\n- Palabras clave relevantes para SEO\n- En minúsculas\n- Sin espacios (usa guiones si es necesario)\n- Específicos y descriptivos\n\nESTRUCTURA DEL CONTENIDO:\n- Introducción emocional o realista (anécdota, pregunta o situación)\n- Secciones bien divididas con <h2> y <h3>\n- Experiencias personales o realistas\n- Consejos aplicables o aprendizajes\n- Cierre que inspire o invite a la acción\n\nELEMENTOS HUMANOS OBLIGATORIOS:\n- Usa \"yo\", \"mi\", \"nosotros\" cuando sea natural\n- Incluye errores menores o aprendizajes\n- Agrega opiniones personales\n- Menciona experiencias específicas (fechas, lugares, situaciones)\n- Usa expresiones coloquiales apropiadas\n\nLO QUE NUNCA DEBES HACER:\n- Empezar con \"En el mundo de...\", \"En la era digital...\"\n- Usar \"Es importante mencionar que...\"\n- Hacer listas sin contexto\n- Sonar académico o muy formal\n- Repetir información innecesaria\n- Usar frases típicas de IA\n\nOPTIMIZACIÓN SEO:\n- Incluye la palabra clave principal en el primer párrafo\n- Usa sinónimos y variaciones naturalmente\n- Usa estructura jerárquica clara con <h2> y <h3>\n- Contenido escaneable con párrafos cortos\n\nRECUERDA: El contenido debe ser tan natural que sea imposible detectar que fue escrito por IA. Debe aportar valor real y ser genuinamente útil para el lector.\n\nAhora, basándote en el prompt que recibas, genera la publicación siguiendo estas instrucciones al pie de la letra.\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        360,
        -390
      ],
      "id": "f11d0066-625e-4407-abe8-cb7225689e5f",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp-1219",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        380,
        -240
      ],
      "id": "805fe8f9-dba9-4480-9b57-559725b09403",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Nodo n8n - Prompt Engineer para PublishMind\n// Este nodo convierte instrucciones cortas en prompts completos y optimizados\n\nconst inputData = $input.all();\nconst results = [];\n\nfor (const item of inputData) {\n  // Extraer datos del input\n  const instruccion = item.json.prompt || '';\n  const categoria = item.json.category || 'general';\n  const autor = item.json.autor || '';\n  const tono = item.json.tono || 'conversacional';\n  const longitud = item.json.longitud || 'media'; // corta, media, larga\n  \n  // Función para generar el prompt completo\n  function crearPromptCompleto(instruccion, categoria, autor, tono, longitud) {\n    \n    // Mapeo de categorías a contextos específicos\n    const contextoPorCategoria = {\n      'tecnologia': {\n        expertise: 'experto en tecnología',\n        audiencia: 'desarrolladores, tech enthusiasts y profesionales de IT',\n        enfoque: 'técnico pero accesible, con ejemplos prácticos'\n      },\n      'cocina': {\n        expertise: 'chef experimentado o foodie apasionado',\n        audiencia: 'amantes de la cocina y principiantes culinarios',\n        enfoque: 'práctico, con tips útiles y experiencias personales'\n      },\n      'historias': {\n        expertise: 'narrador natural con experiencias de vida',\n        audiencia: 'lectores que buscan conexión emocional y entretenimiento',\n        enfoque: 'emotivo, descriptivo y personal'\n      },\n      'n8n': {\n        expertise: 'especialista en automatización y workflows',\n        audiencia: 'desarrolladores, no-coders y empresarios',\n        enfoque: 'paso a paso, con casos de uso reales'\n      },\n      'plantillas': {\n        expertise: 'consultor con experiencia práctica',\n        audiencia: 'profesionales buscando eficiencia',\n        enfoque: 'estructurado, actionable y reutilizable'\n      },\n      'finanzas': {\n        expertise: 'asesor financiero o inversionista experimentado',\n        audiencia: 'personas buscando educación financiera',\n        enfoque: 'educativo, con ejemplos reales y consejos prácticos'\n      },\n      'emprendimiento': {\n        expertise: 'emprendedor con experiencia real',\n        audiencia: 'aspirantes a emprendedores y pequeños empresarios',\n        enfoque: 'motivacional pero realista, con lecciones aprendidas'\n      }\n    };\n\n    // Mapeo de tonos\n    const estilosPorTono = {\n      'conversacional': 'como si estuvieras hablando con un amigo, cercano y natural',\n      'profesional': 'experto pero accesible, manteniendo credibilidad',\n      'casual': 'relajado y espontáneo, como en redes sociales',\n      'educativo': 'claro y didáctico, pero sin sonar académico',\n      'motivacional': 'inspirador y energético, que motive a la acción'\n    };\n\n    // Mapeo de longitudes\n    const estructuraPorLongitud = {\n      'corta': 'entre 300-500 palabras, directo al punto',\n      'media': 'entre 600-900 palabras, bien desarrollado',\n      'larga': 'entre 1000-1500 palabras, profundo y detallado'\n    };\n\n    const contexto = contextoPorCategoria[categoria.toLowerCase()] || contextoPorCategoria['general'];\n    const estilo = estilosPorTono[tono.toLowerCase()] || estilosPorTono['conversacional'];\n    const estructura = estructuraPorLongitud[longitud.toLowerCase()] || estructuraPorLongitud['media'];\n\n    // Generar el prompt completo\n    const promptCompleto = `\nINSTRUCCIONES PARA CREAR CONTENIDO HUMANO Y NATURAL:\n\n🎯 TEMA A DESARROLLAR:\n${instruccion}\n\n📝 CONTEXTO Y AUDIENCIA:\n- Escribes como: ${contexto?.expertise || 'una persona con experiencia en el tema'}\n- Tu audiencia son: ${contexto?.audiencia || 'lectores interesados en aprender'}\n- Enfoque: ${contexto?.enfoque || 'práctico y útil'}\n\n✨ ESTILO DE ESCRITURA:\n- Tono: ${estilo}\n- Longitud: ${estructura}\n${autor ? `- Nombre del autor: ${autor}` : ''}\n\n🚫 LO QUE NO DEBES HACER:\n- NO uses frases típicas de IA como \"En la era digital\", \"Es importante mencionar\", \"En conclusión\"\n- NO hagas listas excesivas sin contexto\n- NO uses un lenguaje demasiado formal o robótico\n- NO repitas información innecesariamente\n- NO uses clichés o lugares comunes\n\n✅ LO QUE SÍ DEBES HACER:\n- Empieza con una anécdota, pregunta o situación real\n- Usa experiencias personales (pueden ser ficticias pero creíbles)\n- Incluye detalles específicos y ejemplos concretos\n- Usa transiciones naturales entre párrafos\n- Incluye errores menores ocasionales o frases informales\n- Agrega opiniones personales y perspectivas únicas\n- Usa un vocabulario variado pero natural\n\n📚 ESTRUCTURA SUGERIDA:\n1. **Apertura enganchante**: Una historia, pregunta o situación que conecte\n2. **Desarrollo natural**: Explica el tema como lo harías en una conversación\n3. **Ejemplos específicos**: Casos reales, números, experiencias\n4. **Consejos prácticos**: Qué pueden hacer los lectores hoy mismo\n5. **Cierre personal**: Tu perspectiva o invitación a la acción\n\n🎨 ELEMENTOS HUMANOS A INCLUIR:\n- Menciona errores que has cometido o visto\n- Usa expresiones coloquiales apropiadas\n- Incluye dudas o preguntas retóricas\n- Agrega pequeñas digresiones naturales\n- Usa humor sutil cuando sea apropiado\n\n🔍 INVESTIGACIÓN IMPLÍCITA:\nSi necesitas datos o estadísticas, úsalos de forma natural en el contexto, no como lista de bullet points.\n\n💡 LLAMADA A LA ACCIÓN:\nTermina invitando a los lectores a compartir su experiencia, hacer preguntas, o tomar una acción específica relacionada con el tema.\n\nIMPORTANTE: El contenido debe sonar como si lo hubiera escrito una persona real con experiencia en el tema, no una IA. Debe ser útil, entretenido y genuinamente valioso para quien lo lea.\n\n¿Entendido? Ahora desarrolla el tema de forma natural y humana.`;\n\n    return promptCompleto;\n  }\n\n  // Crear el prompt\n  const promptGenerado = crearPromptCompleto(instruccion, categoria, autor, tono, longitud);\n  \n  // Preparar resultado\n  results.push({\n    json: {\n      prompt_original: instruccion,\n      categoria: categoria,\n      autor: autor,\n      tono: tono,\n      longitud: longitud,\n      prompt_completo: promptGenerado,\n      timestamp: new Date().toISOString(),\n      caracteres_prompt: promptGenerado.length\n    }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        -390
      ],
      "id": "c9c5cca6-267c-4922-8202-bf1443ee213e",
      "name": "PROMPT"
    },
    {
      "parameters": {
        "jsCode": "const rawOutput = $input.first().json.output;\n\nlet text = rawOutput;\n\n// Paso 1: Intentar parsear como JSON completo o como objeto parcial\ntry {\n  if (typeof rawOutput === 'string') {\n    let text = rawOutput.trim();\n\n    // Solo quitar comillas dobles si el string entero está envuelto entre ellas\n    if (text.startsWith('\"') && text.endsWith('\"')) {\n      text = text.slice(1, -1); // eliminar comillas externas\n    }\n\n    // Reemplazar caracteres escapados\n    text = text\n      .replace(/\\\\\"/g, '\"')   // desescapar comillas internas\n      .replace(/\\\\n/g, '\\n')  // desescapar saltos de línea\n      .trim();\n\n    // Asegurar formato de objeto JSON\n    if (!text.startsWith('{')) {\n      text = `{${text}}`;\n    }\n  }\n\n  const data = JSON.parse(text);\n\n  // Formatear resultado limpio\n  return [{\n    json: {\n      titulo: data.titulo || null,\n      contenido: data.contenido || null,\n      slug: data.slug || null,\n      metaDescripcion: data.metaDescripcion || null,\n      tags: Array.isArray(data.tags) ? data.tags : [],\n      fechaPublicacion: data.fechaPublicacion || null,\n      modo_creacion: data.modo_creacion || null\n    }\n  }];\n} catch (err) {\n  // Paso 2: Si no se puede parsear, usar regex como fallback\n  const fallback = {\n    titulo: null,\n    contenido: null,\n    slug: null,\n    metaDescripcion: null,\n    tags: [],\n    fechaPublicacion: null,\n    modo_creacion: null\n  };\n\n  const patterns = {\n    titulo: /\"titulo\":\\s*\"([^\"]+)\"/,\n    contenido: /\"contenido\":\\s*\"([\\s\\S]+?)\",\\s*\"slug\"/,\n    slug: /\"slug\":\\s*\"([^\"]+)\"/,\n    metaDescripcion: /\"metaDescripcion\":\\s*\"([^\"]+)\"/,\n    tags: /\"tags\":\\s*(\\[[^\\]]+\\])/,\n    fechaPublicacion: /\"fechaPublicacion\":\\s*\"([^\"]+)\"/,\n    modo_creacion: /\"modo_creacion\":\\s*\"([^\"]+)\"/\n  };\n\n  for (const [key, regex] of Object.entries(patterns)) {\n    const match = text.match(regex);\n    if (match && match[1]) {\n      if (key === 'tags') {\n        try {\n          fallback[key] = JSON.parse(match[1]);\n        } catch {\n          fallback[key] = match[1]\n            .replace(/[\\[\\]\"]/g, '')\n            .split(',')\n            .map(s => s.trim());\n        }\n      } else {\n        fallback[key] = match[1];\n      }\n    }\n  }\n\n  return [{ json: fallback }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        -390
      ],
      "id": "87b1ce01-9258-4785-9bf1-6fa210576c62",
      "name": "content"
    },
    {
      "parameters": {
        "url": "=https://cdn.contentful.com/spaces/{{ $('Set data').item.json.contentfulSpaceId }}/environments/{{ $('Set data').item.json.contentfulEnvironment }}/entries?content_type=publicacion&fields.slug={{$json[\"slug\"] || $('content').item.json.slug}}&select=sys.id\n",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Set data').item.json.contentfulAccessToken }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        956,
        -390
      ],
      "id": "17ef0c88-90ea-4921-a419-ef2ebd16b4d2",
      "name": "Get slug"
    },
    {
      "parameters": {
        "jsCode": "// Obtener el slug original generado por el agente\nconst originalSlug = $('content').first().json.slug;\n\n// Obtener la respuesta del nodo HTTP (contenido de Contentful)\nconst rawData = $input.first().json.data;\n\n// Parsear JSON (en rawData viene como string)\nconst data = JSON.parse(rawData);\n\n// Verificar si el slug ya existe (total > 0)\nconst exists = data.total > 0;\n\n// Obtener el intento actual (para crear sufijos) o iniciar en 0\nconst attempt = $json.attempt || 0;\n\n// Si existe, generar un nuevo slug agregando un sufijo numérico\nlet newSlug = attempt === 0 ? originalSlug : `${originalSlug}-${attempt}`;\n\n// Evitar loops infinitos: máximo 10 intentos\nif (attempt > 10) {\n  throw new Error(\"Demasiados intentos buscando un slug único.\");\n}\n\nif (exists) {\n  // Si el slug existe, incrementar intento para la próxima vuelta\n  return [\n    {\n      json: {\n        slugBase: originalSlug, // siempre el mismo slug base original\n        attempt: attempt + 1,\n        slug: `${originalSlug}-${attempt + 1}`,\n        repeat: true\n      }\n    }\n  ];\n} else {\n  // Slug disponible, devolver para continuar\n  return [\n    {\n      json: {\n        slugFinal: newSlug,\n        repeat: false\n      }\n    }\n  ];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1176,
        -465
      ],
      "id": "1bfe869f-0ab1-4c93-8436-cda0a30eafd5",
      "name": "verificar slug"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4b35bbb7-b070-46b9-aa13-d71a1b408dbf",
              "leftValue": "={{ $json.repeat }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1396,
        -465
      ],
      "id": "823020d8-26d2-481c-b46b-e45e48ef2f26",
      "name": "If"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1616,
        -290
      ],
      "id": "7bb65c63-9fc2-4813-b29e-437cbb1ff133",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3fa282ad-1767-4dae-bc96-79339cfa9701",
              "name": "titulo",
              "value": "={{ $('content').item.json.titulo }}",
              "type": "string"
            },
            {
              "id": "bb25c39a-ce88-4841-808e-98ff6e2fc1eb",
              "name": "slug",
              "value": "={{ $json.slugFinal }}",
              "type": "string"
            },
            {
              "id": "b33223e2-74ee-4cd2-bf2e-5bb2e9252f9f",
              "name": "metaDescripcion",
              "value": "={{ $('content').item.json.metaDescripcion }}",
              "type": "string"
            },
            {
              "id": "4fd3fc19-efe5-4dab-9e2a-0a5bf1faf959",
              "name": "contenido",
              "value": "={{ $('content').item.json.contenido }}",
              "type": "string"
            },
            {
              "id": "5533198c-b713-4560-85a0-b53588b586eb",
              "name": "fechaPublicacion",
              "value": "={{ $('content').item.json.fechaPublicacion }}",
              "type": "string"
            },
            {
              "id": "12d28f14-24b2-4bfe-991d-54f8dd5ee2ac",
              "name": "category",
              "value": "={{ $('Set data').item.json.category }}",
              "type": "string"
            },
            {
              "id": "ce845f95-afba-4056-8d8e-2f58fee49a61",
              "name": "categoryId",
              "value": "={{ $('Set data').item.json.categoryId }}",
              "type": "string"
            },
            {
              "id": "9acf6953-f606-4825-98c2-2cf4e9836198",
              "name": "imagenDestacada",
              "value": "={{ $('Set data').item.json.imagenDestacada }}",
              "type": "string"
            },
            {
              "id": "b962f09f-62f0-4c2f-916c-9c08d854f578",
              "name": "autor",
              "value": "={{ $('Set data').item.json.autor }}",
              "type": "string"
            },
            {
              "id": "2b9ceaa1-77aa-4483-84b2-6d7f93004401",
              "name": "modoCreacion",
              "value": "={{ $('Set data').item.json.modoCreacion }}",
              "type": "string"
            },
            {
              "id": "770523e1-8cfe-4474-af3d-e4778d572b12",
              "name": "contentfulManagementToken",
              "value": "={{ $('Set data').item.json.contentfulManagementToken }}",
              "type": "string"
            },
            {
              "id": "e3c14e93-11e2-4809-9b6a-0e7008866b08",
              "name": "contentfulSpaceId",
              "value": "={{ $('Set data').item.json.contentfulSpaceId }}",
              "type": "string"
            },
            {
              "id": "cb9d83df-0616-4733-a7ed-dc6a352984af",
              "name": "contentfulAccessToken",
              "value": "={{ $('Set data').item.json.contentfulAccessToken }}",
              "type": "string"
            },
            {
              "id": "4010c1e2-89af-42b0-9681-d7ee99cf59bd",
              "name": "tags",
              "value": "={{ $('content').item.json.tags }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1616,
        -515
      ],
      "id": "8d5e88ed-4142-470f-95a2-b045bc87486f",
      "name": "dataFInal"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.contentful.com/spaces/{{ $('Edit Fields').item.json.contentfulSpaceId }}/environments/master/entries/{{ $json.entryId }}/published",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Edit Fields').item.json.contentfulManagementToken }}"
            },
            {
              "name": "X-Contentful-Version",
              "value": "={{ $json.entryVersion }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4036,
        -515
      ],
      "id": "f734c90c-140c-4dee-8be1-b8a1698a4b66",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos el campo \"data\" que está en formato string JSON\nconst rawData = items[0].json.data;\n\n// Lo convertimos a un objeto JS\nconst parsedData = JSON.parse(rawData);\n\n// Extraemos el ID y la versión del entry\nconst entryId = parsedData.sys.id;\nconst entryVersion = parsedData.sys.version;\n\nreturn [\n  {\n    json: {\n      entryId: entryId,\n      entryVersion: entryVersion\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3816,
        -515
      ],
      "id": "42c1a4cf-be8c-452b-b878-f390fa43bbbf",
      "name": "entryId"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.contentful.com/spaces/{{ $('dataFInal').item.json.contentfulSpaceId }}/environments/master/assets/{{ $('dataFInal').item.json.imagenDestacada }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('dataFInal').item.json.contentfulManagementToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/vnd.contentful.management.v1+json"
            },
            {
              "name": "X-Contentful-Version",
              "value": "={{ $json.entryVersion }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"fields\": {\n    \"title\": {\n      \"en-US\": \"{{ $('dataFInal').item.json.titulo }}\"\n    },\n    \"description\": {\n      \"en-US\": \"{{ $('dataFInal').item.json.metaDescripcion }}.. {{ $('dataFInal').item.json.tags }}\"\n    },\n     \"file\": {{ JSON.stringify ($json.file) }}\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2496,
        -540
      ],
      "id": "fcedccc5-5ca4-4c4b-a2ae-4c33fc2d9e6d",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "url": "=https://api.contentful.com/spaces/{{ $json.contentfulSpaceId }}/environments/master/assets/{{ $json.imagenDestacada }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.contentfulManagementToken }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2056,
        -540
      ],
      "id": "d9da0ff1-ae02-4887-aac7-26ad73b7f036",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "const rawData = items[0].json.data;\nconst parsedData = JSON.parse(rawData);\n\nconst entryId = parsedData.sys.id;\nconst entryVersion = parsedData.sys.version;\n\nconst fileData = parsedData.fields.file['en-US'];\n\nreturn [\n  {\n    json: {\n      entryId,\n      entryVersion,\n      file: {\n        'en-US': {\n          url: fileData.url,\n          details: fileData.details,\n          fileName: fileData.fileName,\n          contentType: fileData.contentType\n        }\n      }\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2276,
        -540
      ],
      "id": "71d0ca44-aced-4e42-8d63-dcc6bf995d12",
      "name": "entryId1"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.contentful.com/spaces/{{ $('dataFInal').item.json.contentfulSpaceId }}/environments/master/assets/{{ $('dataFInal').item.json.imagenDestacada }}/published",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('dataFInal').item.json.contentfulManagementToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/vnd.contentful.management.v1+json"
            },
            {
              "name": "X-Contentful-Version",
              "value": "={{ $('entryId1').item.json.entryVersion + 1}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2716,
        -540
      ],
      "id": "6c5ab83c-e74f-4087-aec3-6ce8d930375c",
      "name": "HTTP Request4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9f1d604c-8c2b-4930-bf0f-bcccf81ea4eb",
              "leftValue": "={{ $json.imagenDestacada }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1836,
        -440
      ],
      "id": "f88441d6-917e-4a88-b3e5-68f3cfcde7c8",
      "name": "If1"
    },
    {
      "parameters": {
        "method": "=POST",
        "url": "=https://api.contentful.com/spaces/{{ $json.contentfulSpaceId }}/environments/master/entries",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.contentfulManagementToken }}"
            },
            {
              "name": "Content-Type",
              "value": "application/vnd.contentful.management.v1+json"
            },
            {
              "name": "X-Contentful-Content-Type",
              "value": "publicacion"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"fields\": {\n    \"titulo\": {\n      \"en-US\": \"{{ $json.titulo }}\"\n    },\n    \"contenido\": {\n      \"en-US\": {{ JSON.stringify($json.contenido) }}\n    },\n    \"slug\": {\n      \"en-US\": \"{{ $json.slug }}\"\n    },\n    \"metaDescripcion\": {\n      \"en-US\": \"{{ $json.metaDescripcion }}\"\n    },\n\"imagenDestacada\": {\n  \"en-US\": {\n    \"sys\": {\n      \"type\": \"Link\",\n      \"linkType\": \"Asset\",\n      \"id\": \"{{ $json.imagenDestacada }}\"\n    }\n  }\n},\n    \"tags\": {\n      \"en-US\": {{ JSON.stringify($json.tags) }}\n    },\n    \"fechaPublicacion\": {\n      \"en-US\": \"{{ $json.fechaPublicacion }}\"\n    },\n    \"autor\": {\n      \"en-US\": \"{{ $json.autor }}\"\n    },\n    \"modoCreacion\": {\n      \"en-US\": \"{{ $json.modoCreacion }}\"\n    },\n    \"categoria\": {\n  \"en-US\": {\n    \"sys\": {\n      \"type\": \"Link\",\n      \"linkType\": \"Entry\",\n      \"id\": \"{{ $json.categoryId }}\"\n    }\n  }\n}\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3596,
        -515
      ],
      "id": "692b29f2-74ec-466d-b6db-995507090341",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3156,
        -515
      ],
      "id": "37a18cb0-696c-4ff9-931a-40f10c7e3746",
      "name": "Merge"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"titulo\": \"{{ $('Edit Fields').item.json.titulo }}\",\n  \"slug\": \"{{ $('Edit Fields').item.json.slug }}\",\n  \"metaDescripcion\": \"{{ $('Edit Fields').item.json.metaDescripcion }}\",\n  \"categoria\": \"{{ $('Edit Fields').item.json.categoryId }}\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        4256,
        -515
      ],
      "id": "fa53de90-6bc3-4055-964e-f77a31072071",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b9e81291-f0e2-48a9-8b02-a9571d1d8d55",
              "name": "titulo",
              "value": "={{ $json.titulo }}",
              "type": "string"
            },
            {
              "id": "86f4ed41-679e-4db7-b470-7b5242d6d758",
              "name": "slug",
              "value": "={{ $json.slug }}",
              "type": "string"
            },
            {
              "id": "a4be246e-5784-4733-9c7f-3cc1fbe9c25a",
              "name": "metaDescripcion",
              "value": "={{ $json.metaDescripcion }}",
              "type": "string"
            },
            {
              "id": "39685dc0-cf33-42b0-b7cd-c8029b75bcbf",
              "name": "tags",
              "value": "={{ $json.tags }}",
              "type": "array"
            },
            {
              "id": "c80d8f08-cf3d-440d-9807-c2a935d8c79e",
              "name": "fechaPublicacion",
              "value": "={{ $json.fechaPublicacion }}",
              "type": "string"
            },
            {
              "id": "8ae246e1-83b4-4b7a-b59e-0e35bebe28f7",
              "name": "categoryId",
              "value": "={{ $json.categoryId }}",
              "type": "string"
            },
            {
              "id": "9f75e7ba-6ff6-4aba-8eff-82c17ca4700a",
              "name": "imagenDestacada",
              "value": "={{ $json.imagenDestacada || $json.imagenSeleccionada.id }}",
              "type": "string"
            },
            {
              "id": "0c04ba26-dda8-4554-8dbf-c2df6f5214d4",
              "name": "modoCreacion",
              "value": "={{ $json.modoCreacion }}",
              "type": "string"
            },
            {
              "id": "7d608933-4226-4988-88b3-a8f0685ecbdd",
              "name": "contentfulManagementToken",
              "value": "={{ $json.contentfulManagementToken }}",
              "type": "string"
            },
            {
              "id": "e71787f0-c4d6-4183-a600-b252d18193b6",
              "name": "contentfulSpaceId",
              "value": "={{ $json.contentfulSpaceId }}",
              "type": "string"
            },
            {
              "id": "1321dbab-25a3-492b-80d4-677ba9da5288",
              "name": "contentfulAccessToken",
              "value": "={{ $json.contentfulAccessToken }}",
              "type": "string"
            },
            {
              "id": "c3e65f67-e239-4e4f-bda0-8afc724c4af1",
              "name": "autor",
              "value": "={{ $json.autor }}",
              "type": "string"
            },
            {
              "id": "6db37fd0-1e47-4701-9fb9-22e25c0a2190",
              "name": "contenido",
              "value": "={{ $json.contenido }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3376,
        -515
      ],
      "id": "7264031c-c0be-48d1-8ded-b571db38762b",
      "name": "Edit Fields",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "=https://cdn.contentful.com/spaces/{{ $json.contentfulSpaceId }}/environments/master/assets",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.contentfulAccessToken }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2716,
        -340
      ],
      "id": "f798d00f-5331-40c3-9510-257decefe1f2",
      "name": "HTTP Request5"
    },
    {
      "parameters": {
        "jsCode": "// Obtener los datos de entrada\nconst rawData = JSON.parse($input.first().json.data);\nconst imagenes = rawData.items.map(item => {\n    return {\n        id: item.sys.id,  // Extraemos el ID del sistema\n        ...item.fields    // Mantenemos todos los campos fields\n    };\n});\n\nconst titulo = $('If1').first().json.titulo;\nconst descripcion = $('If1').first().json.metaDescripcion;\nconst tags = $('If1').first().json.tags || [];\nconst categoria = $('If1').first().json.category || '';\n\n// Función para calcular coincidencias\nfunction calcularCoincidencias(imagen) {\n    let puntuacion = 0;\n    const textoBusqueda = `${titulo} ${descripcion} ${tags.join(' ')} ${categoria}`.toLowerCase();\n    const camposImagen = `${imagen.title || ''} ${imagen.description || ''}`.toLowerCase();\n    \n    // Dividir en palabras clave\n    const palabrasBusqueda = textoBusqueda.split(/\\s+/);\n    const palabrasImagen = camposImagen.split(/\\s+/);\n    \n    // Calcular coincidencias exactas\n    palabrasBusqueda.forEach(palabra => {\n        if (palabrasImagen.includes(palabra)) {\n            puntuacion += 2; // Peso mayor para coincidencias exactas\n        } else if (camposImagen.includes(palabra)) {\n            puntuacion += 1; // Peso menor para coincidencias parciales\n        }\n    });\n    \n    // Bonus por coincidencia en título\n    if (imagen.title && titulo.toLowerCase().includes(imagen.title.toLowerCase())) {\n        puntuacion += 3;\n    }\n    \n    return puntuacion;\n}\n\n// Calcular puntuación para cada imagen\nconst imagenesConPuntuacion = imagenes.map(imagen => {\n    return {\n        ...imagen,\n        puntuacion: calcularCoincidencias(imagen)\n    };\n});\n\n// Ordenar por puntuación (mayor a menor)\nimagenesConPuntuacion.sort((a, b) => b.puntuacion - a.puntuacion);\n\n// Seleccionar la imagen con mayor puntuación\nconst imagenSeleccionada = imagenesConPuntuacion[0] || imagenes[0];\n\n// Devolver resultado con ID incluido\nreturn [{\n    json: {\n        imagenSeleccionada: {\n            id: imagenSeleccionada.id,\n            title: imagenSeleccionada.title,\n            description: imagenSeleccionada.description,\n            file: imagenSeleccionada.file,\n            puntuacion: imagenSeleccionada.puntuacion\n        },\n         todasLasOpciones: imagenesConPuntuacion.map(img => ({\n            id: img.id,\n            title: img.title,\n            puntuacion: img.puntuacion\n        })) // Opcional: para debug**/\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2936,
        -340
      ],
      "id": "cd49b4fd-b3e5-4914-8ddd-7021872333a1",
      "name": "elegir imagen"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos el campo \"data\" que está en formato string JSON\nconst rawData = items[0].json.data;\n\n// Lo convertimos a un objeto JS\nconst parsedData = JSON.parse(rawData);\n\n// Extraemos el ID y la versión del entry\nconst entryId = parsedData.sys.id;\nconst entryVersion = parsedData.sys.version;\n\nreturn [\n  {\n    json: {\n      entryId: entryId,\n      entryVersion: entryVersion\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2936,
        -540
      ],
      "id": "253c72a1-e3f3-4614-9601-8612ed0efa72",
      "name": "entryId2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e40c8ac6-1db4-478f-9923-1b6bdfe82abe",
              "leftValue": "={{ $json.modoCreacion }}",
              "rightValue": "automatico",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -300,
        -300
      ],
      "id": "a16b1df7-e294-478d-a119-8a49ad34aae9",
      "name": "If2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=titulo: {{ $json.titulo }},",
        "options": {
          "systemMessage": "=Eres un escritor experto y editor de contenido digital para PublishMind. Tu trabajo es transformar publicaciones ingresadas manualmente por usuarios en versiones visualmente mejoradas y optimizadas para web, sin cambiar el contenido ni el estilo original.\n\nINSTRUCCIONES CRÍTICAS:\n- No inventes el contenido. Solo mejora su estructura visual en HTML.\n- Si faltan campos como `metaDescripcion` o `tags`, debes generarlos.\n- El estilo debe ser natural, conversacional y parecer humano.\n- No modifiques el mensaje o ideas del autor.\n- No agregues secciones nuevas. Solo mejora la legibilidad.\n\nLa fecha actual es: {{ $json.fechaPublicacion }}\n\nDATOS DE ENTRADA DEL USUARIO:\n- titulo: {{ $json.titulo }},\n- slug: {{ $json.slug }},\n- categoria: {{ $('Set data').item.json.category }},\n- Contenido original: {{ $json.contenido }},\n- Tags: {{ $json.tags }}\n\nFORMATO DE RESPUESTA OBLIGATORIO (solo texto, sin bloques JSON):\n\n\"titulo\": \"{{ $json.titulo }},\",\n\"contenido\": \"<h2>Secciones bien organizadas</h2><p>Contenido limpio en HTML...</p>\",\n\"slug\": \"{{ $json.slug }}\",\n\"metaDescripcion\": \"Texto SEO de 140-160 caracteres, con CTA sutil.\",\n\"tags\": [\"tag1\", \"tag2\", \"tag3\", \"tag4\", \"tag5\"],\n\"fechaPublicacion\": \"{{ $json.fechaPublicacion }}\",\n\"modo_creacion\": \"manual\"\n\nREGLAS PARA MEJORAR EL CONTENIDO HTML:\n- Usa <h2> y <h3> para secciones y subsecciones\n- Mejora el uso de <p>, <strong>, <em>, listas <ul>/<ol>, <blockquote>, <code>\n- Elimina etiquetas innecesarias o duplicadas\n- Limpia errores visuales como etiquetas anidadas mal\n\nMETA DESCRIPCIÓN:\n- Usa una frase con valor real del contenido\n- Invita a hacer clic\n- No debe ser robótica ni genérica\n- Longitud: 140 a 160 caracteres exactos\n\nSLUG:\n- Formato: solo minúsculas, sin tildes, sin ñ, sin espacios\n- Máximo 50 caracteres\n- Reemplaza espacios con guiones\n\nTAGS:\n- Si hay pocos, sugiere otros relevantes\n- Siempre entre 3 y 5 tags\n- En minúsculas, sin tildes, sin espacios (usa guiones)\n\nRecuerda: solo debes responder con los campos indicados, separados por comas, sin bloques JSON ni explicaciones.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        360,
        -80
      ],
      "id": "7dc702e2-8ab5-4fe6-918d-0c7db78c6e3b",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp-1219",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        380,
        80
      ],
      "id": "cff487a4-4efb-45c7-a135-4ebd9495f253",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "shared": [
    {
      "updatedAt": "2025-05-26T02:13:26.024Z",
      "createdAt": "2025-05-26T02:13:26.024Z",
      "role": "workflow:owner",
      "workflowId": "zsYwDkrkIXoMnhIa",
      "projectId": "jOPTDk8NtR0eZIqG"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-03T02:06:45.735Z",
  "versionId": "a1a46738-8893-4ce3-ac37-d1094b5ec78f"
}