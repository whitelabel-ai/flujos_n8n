{
  "active": true,
  "connections": {
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wait14": {
      "main": [
        [
          {
            "node": "If16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait15": {
      "main": [
        [
          {
            "node": "If15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If15": {
      "main": [
        [
          {
            "node": "Send message6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If16": {
      "main": [
        [
          {
            "node": "Send message5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait16": {
      "main": [
        [
          {
            "node": "If17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If17": {
      "main": [
        [
          {
            "node": "Send message7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Send message3": {
      "main": [
        []
      ]
    },
    "Message a model3": {
      "main": [
        [
          {
            "node": "Wait14",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait15",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait16",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "user_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Message a model3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anuncio_disponible": {
      "main": [
        [
          {
            "node": "user free",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_semanal": {
      "main": [
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_mensual": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_trimestral": {
      "main": [
        [
          {
            "node": "resumen_trimestral1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen-financiero-hoy": {
      "main": [
        [
          {
            "node": "Execute a SQL query7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "alerta_presupuesto": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "meta_en_riesgo": {
      "main": [
        [
          {
            "node": "Execute a SQL query6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "recordatorio_suscripcion": {
      "main": [
        [
          {
            "node": "Execute a SQL query4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze_spending_habits": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "query_transactions": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_category_budgets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "add_user_subscription": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_saving_goals": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query7": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_trimestral1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query6": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query4": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "user_data": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "set_category_budget": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_user_subscription": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "set_reminder_preference": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_user_categories": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "create_user_category": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        []
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        []
      ]
    },
    "register_transaction": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "user free": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "anuncios por usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "data anuncio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "message anuncio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data anuncio": {
      "main": [
        [
          {
            "node": "log de vista",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anuncios por usuario": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reset anuncios": {
      "main": [
        [
          {
            "node": "anuncios por usuario",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "message anuncio": {
      "main": [
        [
          {
            "node": "send pay",
            "type": "main",
            "index": 0
          },
          {
            "node": "reset anuncios",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anuncio_disponible1": {
      "main": [
        [
          {
            "node": "user free",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anuncio_disponible2": {
      "main": [
        [
          {
            "node": "get user free",
            "type": "main",
            "index": 0
          },
          {
            "node": "Obtener Anuncios Activos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Obtener Logs Recientes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "enviar?": {
      "main": [
        [],
        []
      ]
    },
    "Airtable Trigger": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Anuncios Activos": {
      "main": [
        [
          {
            "node": "enviar ahora",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get user free": {
      "main": [
        []
      ]
    },
    "enviar ahora": {
      "main": [
        [
          {
            "node": "enviar?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Obtener Logs Recientes": {
      "main": [
        []
      ]
    }
  },
  "createdAt": "2025-08-01T22:35:15.126Z",
  "id": "0pIe1cDaBuDC9dT1",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Agente Coach",
  "nodes": [
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2912,
        5456
      ],
      "id": "8aa0afa9-6b31-463b-9065-dd9a249b4ea7",
      "name": "Wait16",
      "webhookId": "87aeebf1-a0c6-4899-b4d0-a0a8e4b02a2c"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b98c759-b4b7-4353-a5e4-d2ff1c030744",
              "leftValue": "={{ $json.message.content.parte4}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3136,
        5456
      ],
      "id": "cedb24f7-2e4d-4864-ab5f-d52c07ce65e5",
      "name": "If17"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3552,
        5456
      ],
      "id": "96261774-144a-4e08-bdd6-715d2fcc8782",
      "name": "No Operation, do nothing16"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $('Data').item.json.numero_whatsapp.replace(/^\\+/, '') }}",
        "textBody": "={{ $json.message.content.parte4 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3344,
        5424
      ],
      "id": "23707549-f579-4c9c-9322-53cb7e2c333b",
      "name": "Send message7",
      "webhookId": "01402dc2-26fb-438a-b7e7-71025cb3f5dc",
      "credentials": {
        "whatsAppApi": {
          "id": "vxdq4Km4pHfuOQVV",
          "name": "MONY"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3552,
        5264
      ],
      "id": "15b7c806-2cab-46ab-9052-cf020f371492",
      "name": "No Operation, do nothing14"
    },
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2912,
        5232
      ],
      "id": "ac88bbd5-a549-4b87-8728-a8b1da7cf06e",
      "name": "Wait15",
      "webhookId": "1e9449c3-7591-405c-bd2c-db7f9bb36030"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b98c759-b4b7-4353-a5e4-d2ff1c030744",
              "leftValue": "={{ $json.message.content.parte3}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3136,
        5232
      ],
      "id": "44e2566c-efab-4bed-ba71-dbc519ee2223",
      "name": "If15"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $('Data').item.json.numero_whatsapp.replace(/^\\+/, '') }}",
        "textBody": "={{ $json.message.content.parte3 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3344,
        5232
      ],
      "id": "9daba94e-9047-47ab-879f-b30ed28a9437",
      "name": "Send message6",
      "webhookId": "ca927ce1-b094-4d96-812d-06b5b8c0e32f",
      "credentials": {
        "whatsAppApi": {
          "id": "vxdq4Km4pHfuOQVV",
          "name": "MONY"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3712,
        5056
      ],
      "id": "458d68de-50b3-48c0-9908-11db9700e1bc",
      "name": "No Operation, do nothing15"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3120,
        5056
      ],
      "id": "4a29142f-0826-425d-8a7a-43b6f14f5cd1",
      "name": "Wait14",
      "webhookId": "4e5be309-0849-48ae-abcb-a5ed2b602c32"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "709f4717-003f-4f9f-b841-18d2f2f4ddb4",
              "leftValue": "={{ $json.message.content.parte2}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3312,
        5056
      ],
      "id": "740b6d95-d013-4098-af83-abf768e0b056",
      "name": "If16"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $('Data').item.json.numero_whatsapp.replace(/^\\+/, '') }}",
        "textBody": "={{ $json.message.content.parte1 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        2896,
        5056
      ],
      "id": "ad683364-7b2f-418d-bd08-aafe9a045803",
      "name": "Send message3",
      "webhookId": "f1605586-43d3-4829-b709-42d67a659c58",
      "credentials": {
        "whatsAppApi": {
          "id": "vxdq4Km4pHfuOQVV",
          "name": "MONY"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=\nDivide el siguiente mensaje en hasta *4 partes más pequeñas* solo si es necesario, asegurándote de que cada parte tenga sentido completo.\n\n### *Reglas:*\n\n- Si el mensaje es *corto* (hasta *160 caracteres*), devuélvelo en *una sola parte*.\n\n- Si es *mediano* (hasta *400 caracteres*), divídelo en *2 partes*.\n\n- Si es *largo* (hasta *600 caracteres*), divídelo en *3 partes*.\n\n- Si es *muy largo* (más de *600 caracteres*), agrégale una *parte4*.\n\n- *Evita dividir el mensaje innecesariamente*. Usa la *menor cantidad de partes posible*.\n\n- *No cortes oraciones en puntos, comas o conectores* para mantener la coherencia.\n\n- *Si hay una lista con varios ítems, no se debe dividir*, toda la lista debe ir en un mismo mensaje.\n\n- *No incluyas datos sensibles del usuario* en la respuesta, como:\n\n  - `user_id: <número>`\n  - `subscriber_id: <número>`\n  - `first_name: <nombre>`\n  - *Elimina estos datos sin dejar rastros.*\n\n- *Si no hay mensaje, no devuelvas nada.*\n\n---\n\n### *Formato de Salida:*\n\n- Devuelve la respuesta en *formato JSON* con *solo las partes necesarias*.\n- Usa `\\n\\n` para agregar saltos de línea cuando sea necesario o para mejorar la legibilidad en listas.\n- *Nunca uses comillas `\"` para resaltar palabras*. En su lugar, usa un solo asterisco: *palabra*.\n\n#### *Ejemplo de salida:*\n\n{\n\"parte1\": \"Texto de la primera parte.\",\n\"parte2\": \"Texto de la segunda parte.\"\n}\n\n### *Mensaje:*\n\n\"{{ $json.output }}\"\n"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2144,
        5056
      ],
      "id": "dc478cf3-2dfd-44f0-8c5b-279982ae3b36",
      "name": "Message a model3",
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $('Data').item.json.numero_whatsapp.replace(/^\\+/, '') }}",
        "textBody": "={{ $json.message.content.parte2 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3520,
        5040
      ],
      "id": "9c26e2a8-5b3b-45f4-b4be-9e3424524d0c",
      "name": "Send message5",
      "webhookId": "e6e117eb-45fc-426f-aea8-9777d88a3a1a",
      "credentials": {
        "whatsAppApi": {
          "id": "vxdq4Km4pHfuOQVV",
          "name": "MONY"
        }
      }
    },
    {
      "parameters": {
        "content": "## RESPONS AGENT",
        "height": 760,
        "width": 2264,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2064,
        4928
      ],
      "id": "7f639a3c-5572-4799-85ae-d36b53c45b03",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2688,
        4400
      ],
      "id": "7b5ea3ef-fb7f-40a9-b6f2-702ef68b36db",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "automation.whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=MONY_chat_id_{{ $('Data').item.json.numero_whatsapp }}",
        "sessionTTL": 500000,
        "contextWindowLength": 25
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        2816,
        4416
      ],
      "id": "6c2a22c6-560a-43b7-b6b8-4046793258f5",
      "name": "Redis Chat Memory1",
      "credentials": {
        "redis": {
          "id": "yzvE00xFtVHtaoZ1",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "content": "## AGENT MAIN",
        "height": 600,
        "width": 2240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2032,
        4096
      ],
      "id": "047fefbe-7590-4c41-9e6c-fd12bdcc3021",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "metadata",
              "type": "any"
            },
            {
              "name": "contacts",
              "type": "any"
            },
            {
              "name": "messages",
              "type": "any"
            },
            {
              "name": "field",
              "type": "any"
            },
            {
              "name": "usuario_data",
              "type": "any"
            }
          ]
        }
      },
      "id": "5c4b3dc3-9b38-4a88-96ab-fbaf86edb7b1",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        560,
        3472
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=nombre: {{ $json.user_data.first_name }},\nmensaje del usuario: {{ $json.user_data.message }},\ntrigger_data: {{ JSON.stringify($json.trigger_data) }}\nuser_data: {{ JSON.stringify($json.user_data) }}",
        "options": {
          "systemMessage": "=### 1. ROL Y PERSONA FUNDAMENTAL ###\n- Eres *Mony Coach*, el Estratega Financiero y Mentor Personal de *[nombre]*. Tu propósito trasciende el de un simple analista; eres un narrador de historias financieras.\n- Tu personalidad combina la agudeza de un analista de datos con la empatía de un coach de vida. Eres perspicaz, positivo y siempre enfocado en el empoderamiento. Usas un lenguaje claro y analogías para desmitificar las finanzas.\n- *Tu Filosofía Central:* Tu objetivo no es solo reportar números, sino *contar la historia que esos números revelan* sobre la vida financiera de tu usuario y darle las herramientas para que escriba un mejor próximo capítulo.\n\n### 2. ANÁLISIS DEL CONTEXTO Y MODO DE OPERACIÓN ###\nTu comportamiento se adapta al contexto de entrada. Primero, revisa si el campo `trigger_data` está vacío.\n\n- *Modo Proactivo (Trigger Detectado):*\n  - *Contexto:* `trigger_data` contiene un objeto con `trigger_type` y un `data` rico en información.\n  - *Tu Misión:* Entregar un *\"Reporte de Valor\"*. Este no es un simple mensaje, es un mini-informe bien estructurado, visualmente agradable y lleno de insights, utilizando la data provista.\n\n- *Modo Reactivo (Conversación Directa):*\n  - *Contexto:* `trigger_data` está vacío (`{}`). El usuario te ha hablado directamente.\n  - *Tu Misión:* Sostener una *\"Conversación de Coaching\"*. Utiliza tu memoria de chat, tus herramientas analíticas y tu protocolo de conversación para diagnosticar, aconsejar y guiar al usuario, detecta si el usuario tiene transacciones si no, invítalo a registrar su primer gasto y pide cada cuanto le gustaria que le recuerde registrar sus gastos y le enseñas como se registran las transacciones brevemente.\n\n### 3. MODO PROACTIVO: ESTRUCTURA DE REPORTES DE VALOR ###\nCuando un trigger te activa, NO uses las plantillas genéricas. Construye tus respuestas siguiendo estas estructuras detalladas para que sean dignas de un coach premium. Usa formato Markdown (negritas, cursivas, listas) y emojis para una máxima legibilidad en WhatsApp.\n\n---\n#### *Plantilla para: `resumen-financiero-hoy`, `resumen_semanal`, `resumen_mensual`, `resumen_trimestral`*\n\n* *Encabezado Atractivo:*\n    \"¡Hola, [nombre]! ☀️ ...(mensaje personalizado)!\"\n\n* *El Gran Panorama 📊:*\n    \"Un vistazo general de tu flujo de dinero:\"\n    * 🟢 *Ingresos:* `$(total_ingresos)`\n    * 🔴 *Gastos:* `$(total_gastos)`\n    * 💰 *Balance (Ahorro/Déficit):* `$(saldo_actual)`\n\n* *Análisis de Gastos 🔍:*\n    \"¿En qué se concentraron tus gastos? Tu top 3 fue:\"\n    1.  *$(categoria_1):* `$(monto_1)`\n    2.  *$(categoria_2):* `$(monto_2)`\n    3.  *$(categoria_3):* `$(monto_3)`\n\n* *💡 Insight:*\n    \"*Mi observación principal:* (Aquí va tu análisis. Ej: \"Veo que 'Restaurantes' 🍕 fue tu categoría principal esta semana, superando a 'Supermercado'. Esto puede ser una señal de que estás disfrutando de la vida social, ¡lo cual es genial! Solo tenlo presente para mantener el equilibrio con tu presupuesto mensual.\")\"\n\n* *Progreso hacia tus Sueños 🎯:*\n    \"Así van tus metas de ahorro:\"\n    * \"*(Nombre de la meta):* Has ahorrado `$(monto_actual)` de `$(monto_objetivo)`.\"\n\n* *Llamada a la Acción Conversacional:*\n    \"¿Quieres que profundicemos en alguna de estas categorías? Solo dime, por ejemplo, '*analiza mis gastos en restaurantes*'.\"\n\n---\n#### *Plantilla para: `alerta_presupuesto`*\n\n\"¡Hola [nombre]! Una pequeña alerta amistosa de tu coach 🧐.\n\nHe notado que tu gasto en la categoría *'[nombre_categoria]'* ha alcanzado el *[porcentaje_gastado]%* de tu presupuesto mensual.\n\nTe quedan *$[monto_restante]* para el resto del mes en esta área. ¡Gestionar con inteligencia estos últimos días será clave!\n\nSi quieres, podemos revisar los últimos gastos de esta categoría para ver dónde podemos ser más estratégicos. ¿Te parece?\"\n\n---\n#### *Plantilla para: `meta_en_riesgo`*\n\n\"¡Hola [nombre]! Hablemos de tu increíble meta: *'[nombre_meta]'* 🏖️.\n\nPara alcanzarla en la fecha que nos propusimos, tu progreso de ahorro debería estar en un *[progreso_esperado]%*, y actualmente vamos por un *[progreso_actual]%*.\n\n¡No te preocupes! Esto no es un problema, es una *oportunidad para ajustar la estrategia*. Aún estamos a tiempo de enderezar el rumbo.\n\nCreo que el primer paso sería identificar a dónde se está yendo el dinero que podría ir a este ahorro. ¿Quieres que juntos analicemos tus gastos del último mes para encontrar esas oportunidades?\"\n\n---\n\n### 4. MODO REACTIVO: PROTOCOLO DE CONVERSACIÓN DE COACHING ###\nCuando un usuario te hable, sigue este protocolo:\n\n1.  *Escucha y Empatiza:* Reconoce su pregunta o inquietud. Muestra que entiendes su necesidad. \"Entendido, quieres saber cómo optimizar tus ahorros. Es una excelente pregunta.\"\n2.  *Diagnostica con Datos (Piensa en Voz Alta):* Explica tu plan de acción y qué herramientas usarás. Esto genera confianza. \"Para darte el mejor consejo, voy a hacer un análisis completo. Primero, usaré `get_financial_health_snapshot` para ver tu panorama general. Luego, con `analyze_spending_habits`, buscaré patrones y 'gastos hormiga'. Finalmente, revisaré tus suscripciones con `get_user_subscriptions`.\"\n3.  *Prescribe con Claridad (Dato -> Insight -> Acción):* Sintetiza tus hallazgos en consejos prácticos.\n    * *Dato:* \"Mi análisis muestra que tienes 7 transacciones en 'Cafeterías' este mes, sumando $75.000.\"\n    * *Insight:* \"Este es un clásico 'gasto hormiga'. Individualmente parecen pequeños, pero juntos tienen un impacto significativo que podría estar yendo a tus metas.\"\n    * *Acción Sugerida:* \"¿Qué te parecería un reto? La próxima semana, intenta preparar tu café en casa y destinemos esos $20.000 que podrías ahorrar directamente a tu meta 'Viaje a la playa'.\"\n4.  *Invita al Siguiente Paso:* Termina siempre con una pregunta abierta que mantenga la conversación y el empoderamiento. \"¿Qué área te gustaría que ataquemos primero?\" o \"¿Quieres que configuremos un presupuesto para la categoría 'Restaurantes'?\"\n\n### 5. HERRAMIENTAS DISPONIBLES ###\n- *Consultas Generales:* `query_transactions`, `get_saving_goals`, `get_user_subscriptions`, `get_category_budgets`.\n- *Análisis Avanzado:* `get_financial_health_snapshot`, `analyze_spending_habits`, `compare_spending_periods`.\n- *Acciones Externas:* `generate_and_send_report`.\n\n### 6. REGLAS DE ORO DEL COACHING FINANCIERO ###\n- *Actúa, no anuncies:* Nunca digas \"Voy a buscar en la base de datos, o usare... o tienes toda la razon...\". Simplemente hazlo y presenta el resultado.\n- *Sé un Narrador de Datos:* No te limites a listar números. Explica qué significan y qué historia cuentan sobre los hábitos del usuario.\n- *Detecta y Nombra los Hábitos:* Busca activamente patrones como \"gastos de fin de semana\", \"gastos hormiga\", \"compras por impulso\" y menciónalos por su nombre para crear conciencia.\n- *Usa Analogías:* Simplifica conceptos complejos. \"Piensa en tus ahorros como semillas. Cada peso que guardas es una semilla que crecerá para convertirse en el árbol de tus metas.\"\n- *Formato Ante Todo:* La legibilidad es clave en WhatsApp. Usa *negritas* para destacar cifras y conceptos, _cursivas_ para énfasis y • listas para desglosar información.\n- *El Principio del \"Siguiente Paso Lógico\":* Siempre anticipa la próxima pregunta del usuario y ofrécele una acción o un análisis adicional.\n\n- *Nunca inventes información.* Si no encuentras datos, infórmalo. \"No encontré ninguna transacción de 'Transporte' para la semana pasada.\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        3008,
        4176
      ],
      "id": "77546394-7f5d-4e82-bd1d-e7bfd22e7989",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 20
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        4272
      ],
      "id": "ae172954-ca99-4183-9398-d669929d4403",
      "name": "resumen-financiero-hoy"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH transacciones_mes AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    t.descripcion,\n    t.fecha_transaccion,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    date_part('month', t.fecha_transaccion) = date_part('month', CURRENT_DATE)\n    AND date_part('year', t.fecha_transaccion) = date_part('year', CURRENT_DATE)\n),\ningresos_gastos AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS total_ingresos,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS total_gastos\n  FROM transacciones_mes\n  GROUP BY id_usuario\n),\ncategorias_top_gasto AS (\n  SELECT \n    id_usuario,\n    categoria,\n    SUM(monto) AS total_categoria\n  FROM transacciones_mes\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario, categoria\n),\ndetalle_metas_activas AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'nombre', nombre,\n        'monto_objetivo', monto_objetivo,\n        'monto_actual', monto_actual,\n        'fecha_objetivo', fecha_objetivo\n      ) ORDER BY fecha_objetivo\n    ) AS metas_ahorro_activas\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ntop_categorias_detalle AS (\n  SELECT id_usuario, categoria, total_categoria\n  FROM (\n    SELECT \n      id_usuario, \n      categoria, \n      total_categoria,\n      ROW_NUMBER() OVER (PARTITION BY id_usuario ORDER BY total_categoria DESC) AS rn\n    FROM categorias_top_gasto\n  ) sub\n  WHERE rn <= 3\n),\ntop_suscripciones_detalle AS (\n  SELECT \n    id_usuario,\n    json_agg(json_build_object(\n      'nombre', nombre,\n      'monto', monto,\n      'frecuencia', frecuencia,\n      'fecha_proximo_pago', fecha_proximo_pago\n    ) ORDER BY monto DESC) AS detalle_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\ntotal_suscripciones AS (\n  SELECT \n    id_usuario,\n    SUM(monto) AS total_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\nahorros_mes AS (\n  SELECT \n    id_usuario,\n    SUM(monto_actual) AS total_ahorrado\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ndetalle_transacciones AS (\n  SELECT \n    id_usuario,\n    json_build_object(\n      'ingresos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_mes\n        WHERE tipo = 'Ingreso' AND transacciones_mes.id_usuario = t.id_usuario\n      ),\n      'gastos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_mes\n        WHERE tipo = 'Gasto' AND transacciones_mes.id_usuario = t.id_usuario\n      )\n    ) AS transacciones\n  FROM transacciones_mes t\n  GROUP BY id_usuario\n),\ndetalle_top_categorias AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total_categoria\n      ) ORDER BY total_categoria DESC\n    ) AS categorias_top\n  FROM top_categorias_detalle\n  GROUP BY id_usuario\n),\n-- MES PASADO\ntransacciones_mes_pasado AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    date_part('month', t.fecha_transaccion) = date_part('month', CURRENT_DATE - INTERVAL '1 month')\n    AND date_part('year', t.fecha_transaccion) = date_part('year', CURRENT_DATE - INTERVAL '1 month')\n),\nresumen_mes_pasado AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS ingresos_mes_pasado,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS gastos_mes_pasado\n  FROM transacciones_mes_pasado\n  GROUP BY id_usuario\n),\ncategorias_mes_pasado AS (\n  SELECT \n    id_usuario,\n    tipo,\n    categoria,\n    SUM(monto) AS total\n  FROM transacciones_mes_pasado\n  GROUP BY id_usuario, tipo, categoria\n),\ndetalle_categorias_mes_pasado_ingreso AS (\n  SELECT \n    id_usuario,\n    'Ingreso'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_mes_pasado\n  WHERE tipo = 'Ingreso'\n  GROUP BY id_usuario\n),\ndetalle_categorias_mes_pasado_gasto AS (\n  SELECT \n    id_usuario,\n    'Gasto'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_mes_pasado\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario\n),\ndetalle_categorias_mes_pasado AS (\n  SELECT \n    id_usuario,\n    json_object_agg(tipo, detalle) AS categorias_mes_pasado\n  FROM (\n    SELECT * FROM detalle_categorias_mes_pasado_ingreso\n    UNION ALL\n    SELECT * FROM detalle_categorias_mes_pasado_gasto\n  ) sub\n  GROUP BY id_usuario\n)\n\n-- FINAL\nSELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda,\n  \n  -- Totales\n  COALESCE(ig.total_ingresos, 0) AS total_ingresos,\n  COALESCE(ig.total_gastos, 0) AS total_gastos,\n  COALESCE(ig.total_ingresos, 0) - COALESCE(ig.total_gastos, 0) AS saldo_actual,\n  COALESCE(ts.total_suscripciones, 0) AS total_suscripciones_activas,\n  COALESCE(am.total_ahorrado, 0) AS total_ahorrado_en_metas_activas,\n  \n  -- Detalles enriquecidos\n  COALESCE(tc.categorias_top, '[]') AS top_categorias_gasto,\n  COALESCE(sd.detalle_suscripciones, '[]') AS top_suscripciones_activas,\n  COALESCE(dt.transacciones, '[]') AS detalle_transacciones,\n  COALESCE(ma.metas_ahorro_activas, '[]') AS detalle_metas_ahorro_activas,\n\n  -- Totales del mes anterior\n  COALESCE(rmp.ingresos_mes_pasado, 0) AS ingresos_mes_pasado,\n  COALESCE(rmp.gastos_mes_pasado, 0) AS gastos_mes_pasado,\n\n  -- Detalles por categoría del mes anterior\n  COALESCE(dcmp.categorias_mes_pasado, '{}') AS categorias_mes_pasado\n\nFROM usuarios u\nLEFT JOIN ingresos_gastos ig ON u.id = ig.id_usuario\nLEFT JOIN total_suscripciones ts ON u.id = ts.id_usuario\nLEFT JOIN ahorros_mes am ON u.id = am.id_usuario\nLEFT JOIN detalle_top_categorias tc ON u.id = tc.id_usuario\nLEFT JOIN top_suscripciones_detalle sd ON u.id = sd.id_usuario\nLEFT JOIN detalle_transacciones dt ON u.id = dt.id_usuario\nLEFT JOIN detalle_metas_activas ma ON u.id = ma.id_usuario\nLEFT JOIN resumen_mes_pasado rmp ON u.id = rmp.id_usuario\nLEFT JOIN detalle_categorias_mes_pasado dcmp ON u.id = dcmp.id_usuario\n\nORDER BY saldo_actual DESC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        4656
      ],
      "id": "e526f52c-584e-4a85-8b3d-071da18402ba",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        336,
        5408
      ],
      "id": "c8a2e983-0d98-403b-926f-ca5e0e6d1836",
      "name": "anuncio_disponible",
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH transacciones_semana AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    t.descripcion,\n    t.fecha_transaccion,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n     t.fecha_transaccion >= CURRENT_DATE - INTERVAL '7 days'\n),\ningresos_gastos AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS total_ingresos,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS total_gastos\n  FROM transacciones_semana\n  GROUP BY id_usuario\n),\ncategorias_top_gasto AS (\n  SELECT \n    id_usuario,\n    categoria,\n    SUM(monto) AS total_categoria\n  FROM transacciones_semana\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario, categoria\n),\ndetalle_metas_activas AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'nombre', nombre,\n        'monto_objetivo', monto_objetivo,\n        'monto_actual', monto_actual,\n        'fecha_objetivo', fecha_objetivo\n      ) ORDER BY fecha_objetivo\n    ) AS metas_ahorro_activas\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\n\n  \ntop_categorias_detalle AS (\n  SELECT id_usuario, categoria, total_categoria\n  FROM (\n    SELECT \n      id_usuario, \n      categoria, \n      total_categoria,\n      ROW_NUMBER() OVER (PARTITION BY id_usuario ORDER BY total_categoria DESC) AS rn\n    FROM categorias_top_gasto\n  ) sub\n  WHERE rn <= 3\n),\ntop_suscripciones_detalle AS (\n  SELECT \n    id_usuario,\n    json_agg(json_build_object(\n      'nombre', nombre,\n      'monto', monto,\n      'frecuencia', frecuencia,\n      'fecha_proximo_pago', fecha_proximo_pago\n    ) ORDER BY monto DESC) AS detalle_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\ntotal_suscripciones AS (\n  SELECT \n    id_usuario,\n    SUM(monto) AS total_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\nahorros_semana AS (\n  SELECT \n    id_usuario,\n    SUM(monto_actual) AS total_ahorrado\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ndetalle_transacciones AS (\n  SELECT \n    id_usuario,\n    json_build_object(\n      'ingresos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_semana\n        WHERE tipo = 'Ingreso' AND transacciones_semana.id_usuario = t.id_usuario\n      ),\n      'gastos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_semana\n        WHERE tipo = 'Gasto' AND transacciones_semana.id_usuario = t.id_usuario\n      )\n    ) AS transacciones\n  FROM transacciones_semana t\n  GROUP BY id_usuario\n),\n\ndetalle_top_categorias AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total_categoria\n      ) ORDER BY total_categoria DESC\n    ) AS categorias_top\n  FROM top_categorias_detalle\n  GROUP BY id_usuario\n), \n  \n  resumen_semana_pasada AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS ingresos_semana_pasada,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS gastos_semana_pasada\n  FROM transacciones\n  WHERE \n    fecha_transaccion >= CURRENT_DATE - INTERVAL '14 days'\n    AND fecha_transaccion < CURRENT_DATE - INTERVAL '7 days'\n  GROUP BY id_usuario\n)\n\n\nSELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda,\n  \n  -- Totales\n  COALESCE(ig.total_ingresos, 0) AS total_ingresos,\n  COALESCE(ig.total_gastos, 0) AS total_gastos,\n  COALESCE(ig.total_ingresos, 0) - COALESCE(ig.total_gastos, 0) AS saldo_actual,\n  COALESCE(ts.total_suscripciones, 0) AS total_suscripciones_activas,\n  COALESCE(am.total_ahorrado, 0) AS total_ahorrado_en_metas_activas,\n  \n  -- Detalles enriquecidos\n  COALESCE(tc.categorias_top, '[]') AS top_categorias_gasto,\n  COALESCE(sd.detalle_suscripciones, '[]') AS top_suscripciones_activas,\n  COALESCE(dt.transacciones, '[]') AS detalle_transacciones,\n  COALESCE(ma.metas_ahorro_activas, '[]') AS detalle_metas_ahorro_activas,\n  COALESCE(rsp.ingresos_semana_pasada, 0) AS ingresos_semana_pasada,\n  COALESCE(rsp.gastos_semana_pasada, 0) AS gastos_semana_pasada\n\n\nFROM usuarios u\nLEFT JOIN ingresos_gastos ig ON u.id = ig.id_usuario\nLEFT JOIN total_suscripciones ts ON u.id = ts.id_usuario\nLEFT JOIN ahorros_semana am ON u.id = am.id_usuario\nLEFT JOIN detalle_top_categorias tc ON u.id = tc.id_usuario\nLEFT JOIN top_suscripciones_detalle sd ON u.id = sd.id_usuario\nLEFT JOIN detalle_transacciones dt ON u.id = dt.id_usuario\nLEFT JOIN detalle_metas_activas ma ON u.id = ma.id_usuario\nLEFT JOIN resumen_semana_pasada rsp ON u.id = rsp.id_usuario\n\n\n\nORDER BY saldo_actual DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        4464
      ],
      "id": "9b9e4cd6-b9ad-4656-92f2-29c60affd9ee",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  c.nombre AS categoria,\n  c.presupuesto_mensual,\n  COALESCE(SUM(t.monto), 0) AS gasto_actual,\n  (COALESCE(SUM(t.monto), 0) / c.presupuesto_mensual) * 100 AS porcentaje_usado\nFROM usuarios u\nJOIN categorias c ON c.id_usuario = u.id\nLEFT JOIN transacciones t ON t.id_usuario = u.id AND t.id_categoria = c.id\n  AND t.tipo = 'Gasto' AND date_trunc('month', t.fecha_transaccion) = date_trunc('month', CURRENT_DATE)\nWHERE c.presupuesto_mensual IS NOT NULL AND c.presupuesto_mensual > 0\nGROUP BY u.id, u.nombre_completo, u.numero_whatsapp, c.nombre, c.presupuesto_mensual\nHAVING (COALESCE(SUM(t.monto), 0) / c.presupuesto_mensual) >= 0.8;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        3664
      ],
      "id": "990283be-0347-499b-95b3-c90324638d31",
      "name": "Execute a SQL query3",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  s.nombre AS nombre_suscripcion,\n  s.fecha_proximo_pago,\n  s.monto,\n  s.moneda\nFROM usuarios u\nJOIN suscripciones_usuario s ON s.id_usuario = u.id\nWHERE s.activa = TRUE\n  AND s.fecha_proximo_pago = CURRENT_DATE + INTERVAL '1 day';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        4048
      ],
      "id": "1cedeb4a-773a-44da-ae74-ac25f1299b74",
      "name": "Execute a SQL query4",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  m.id AS id_meta,\n  m.nombre AS nombre_meta,\n  m.monto_objetivo,\n  m.monto_actual,\n  m.fecha_objetivo,\n  m.fecha_creacion,\n  ROUND(\n    EXTRACT(EPOCH FROM (CURRENT_DATE - m.fecha_creacion)) /\n    EXTRACT(EPOCH FROM (m.fecha_objetivo - m.fecha_creacion)) * 100, 2\n  ) AS porcentaje_esperado,\n  ROUND((m.monto_actual / m.monto_objetivo) * 100, 2) AS porcentaje_actual\nFROM usuarios u\nJOIN metas_ahorro m ON m.id_usuario = u.id\nWHERE m.estado = 'activa'\n  AND CURRENT_DATE < m.fecha_objetivo\n  AND m.monto_objetivo > 0\n  AND (m.monto_actual / m.monto_objetivo) < \n      (\n        EXTRACT(EPOCH FROM (CURRENT_DATE - m.fecha_creacion)) /\n        EXTRACT(EPOCH FROM (m.fecha_objetivo - m.fecha_creacion)) - 0.2\n      );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        3856
      ],
      "id": "39210825-0cd8-45b1-8a31-d418617eeb22",
      "name": "Execute a SQL query6",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "content": "## trigger Messages\n",
        "height": 1676,
        "width": 1280,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        3376
      ],
      "id": "955b8628-30bc-4896-8bec-616d27401a4d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        4464
      ],
      "id": "a46aa4d6-afe8-4847-98df-17d1cc157aad",
      "name": "resumen_semanal"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtDayOfMonth": 29,
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        4656
      ],
      "id": "9cfa6d04-1c6a-4876-be2b-883eb4a0e9f3",
      "name": "resumen_mensual"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "monthsInterval": 3,
              "triggerAtDayOfMonth": 29,
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        4848
      ],
      "id": "81e31659-355f-4cc7-a3a8-a4a5d0cf921c",
      "name": "resumen_trimestral"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH transacciones_trimestre AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    t.descripcion,\n    t.fecha_transaccion,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    t.fecha_transaccion >= date_trunc('quarter', CURRENT_DATE)\n    AND t.fecha_transaccion < date_trunc('quarter', CURRENT_DATE) + INTERVAL '3 months'\n),\ningresos_gastos AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS total_ingresos,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS total_gastos\n  FROM transacciones_trimestre\n  GROUP BY id_usuario\n),\ncategorias_top_gasto AS (\n  SELECT \n    id_usuario,\n    categoria,\n    SUM(monto) AS total_categoria\n  FROM transacciones_trimestre\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario, categoria\n),\ndetalle_metas_activas AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'nombre', nombre,\n        'monto_objetivo', monto_objetivo,\n        'monto_actual', monto_actual,\n        'fecha_objetivo', fecha_objetivo\n      ) ORDER BY fecha_objetivo\n    ) AS metas_ahorro_activas\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ntop_categorias_detalle AS (\n  SELECT id_usuario, categoria, total_categoria\n  FROM (\n    SELECT \n      id_usuario, \n      categoria, \n      total_categoria,\n      ROW_NUMBER() OVER (PARTITION BY id_usuario ORDER BY total_categoria DESC) AS rn\n    FROM categorias_top_gasto\n  ) sub\n  WHERE rn <= 3\n),\ntop_suscripciones_detalle AS (\n  SELECT \n    id_usuario,\n    json_agg(json_build_object(\n      'nombre', nombre,\n      'monto', monto,\n      'frecuencia', frecuencia,\n      'fecha_proximo_pago', fecha_proximo_pago\n    ) ORDER BY monto DESC) AS detalle_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND fecha_proximo_pago >= date_trunc('quarter', CURRENT_DATE)\n    AND fecha_proximo_pago < date_trunc('quarter', CURRENT_DATE) + INTERVAL '3 months'\n  GROUP BY id_usuario\n),\ntotal_suscripciones AS (\n  SELECT \n    id_usuario,\n    SUM(monto) AS total_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND fecha_proximo_pago >= date_trunc('quarter', CURRENT_DATE)\n    AND fecha_proximo_pago < date_trunc('quarter', CURRENT_DATE) + INTERVAL '3 months'\n  GROUP BY id_usuario\n),\nahorros_trimestre AS (\n  SELECT \n    id_usuario,\n    SUM(monto_actual) AS total_ahorrado\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ndetalle_transacciones AS (\n  SELECT \n    id_usuario,\n    json_build_object(\n      'ingresos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_trimestre\n        WHERE tipo = 'Ingreso' AND transacciones_trimestre.id_usuario = t.id_usuario\n      ),\n      'gastos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_trimestre\n        WHERE tipo = 'Gasto' AND transacciones_trimestre.id_usuario = t.id_usuario\n      )\n    ) AS transacciones\n  FROM transacciones_trimestre t\n  GROUP BY id_usuario\n),\ndetalle_top_categorias AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total_categoria\n      ) ORDER BY total_categoria DESC\n    ) AS categorias_top\n  FROM top_categorias_detalle\n  GROUP BY id_usuario\n),\n-- Trimestre PASADO\ntransacciones_trimestre_pasado AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    t.fecha_transaccion >= date_trunc('quarter', CURRENT_DATE - INTERVAL '3 months')\n    AND t.fecha_transaccion < date_trunc('quarter', CURRENT_DATE)\n),\nresumen_trimestre_pasado AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS ingresos_trimestre_pasado,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS gastos_trimestre_pasado\n  FROM transacciones_trimestre_pasado\n  GROUP BY id_usuario\n),\ncategorias_trimestre_pasado AS (\n  SELECT \n    id_usuario,\n    tipo,\n    categoria,\n    SUM(monto) AS total\n  FROM transacciones_trimestre_pasado\n  GROUP BY id_usuario, tipo, categoria\n),\ndetalle_categorias_trimestre_pasado_ingreso AS (\n  SELECT \n    id_usuario,\n    'Ingreso'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_trimestre_pasado\n  WHERE tipo = 'Ingreso'\n  GROUP BY id_usuario\n),\ndetalle_categorias_trimestre_pasado_gasto AS (\n  SELECT \n    id_usuario,\n    'Gasto'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_trimestre_pasado\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario\n),\ndetalle_categorias_trimestre_pasado AS (\n  SELECT \n    id_usuario,\n    json_object_agg(tipo, detalle) AS categorias_trimestre_pasado\n  FROM (\n    SELECT * FROM detalle_categorias_trimestre_pasado_ingreso\n    UNION ALL\n    SELECT * FROM detalle_categorias_trimestre_pasado_gasto\n  ) sub\n  GROUP BY id_usuario\n)\n\n-- FINAL\nSELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda,\n  \n  -- Totales\n  COALESCE(ig.total_ingresos, 0) AS total_ingresos,\n  COALESCE(ig.total_gastos, 0) AS total_gastos,\n  COALESCE(ig.total_ingresos, 0) - COALESCE(ig.total_gastos, 0) AS saldo_actual,\n  COALESCE(ts.total_suscripciones, 0) AS total_suscripciones_activas,\n  COALESCE(am.total_ahorrado, 0) AS total_ahorrado_en_metas_activas,\n  \n  -- Detalles enriquecidos\n  COALESCE(tc.categorias_top, '[]') AS top_categorias_gasto,\n  COALESCE(sd.detalle_suscripciones, '[]') AS top_suscripciones_activas,\n  COALESCE(dt.transacciones, '[]') AS detalle_transacciones,\n  COALESCE(ma.metas_ahorro_activas, '[]') AS detalle_metas_ahorro_activas,\n\n  -- Totales del trimestre anterior\n  COALESCE(rmp.ingresos_trimestre_pasado, 0) AS ingresos_trimestre_pasado,\n  COALESCE(rmp.gastos_trimestre_pasado, 0) AS gastos_trimestre_pasado,\n\n  -- Detalles por categoría del trimestre anterior\n  COALESCE(dcmp.categorias_trimestre_pasado, '{}') AS categorias_trimestre_pasado\n\nFROM usuarios u\nLEFT JOIN ingresos_gastos ig ON u.id = ig.id_usuario\nLEFT JOIN total_suscripciones ts ON u.id = ts.id_usuario\nLEFT JOIN ahorros_trimestre am ON u.id = am.id_usuario\nLEFT JOIN detalle_top_categorias tc ON u.id = tc.id_usuario\nLEFT JOIN top_suscripciones_detalle sd ON u.id = sd.id_usuario\nLEFT JOIN detalle_transacciones dt ON u.id = dt.id_usuario\nLEFT JOIN detalle_metas_activas ma ON u.id = ma.id_usuario\nLEFT JOIN resumen_trimestre_pasado rmp ON u.id = rmp.id_usuario\nLEFT JOIN detalle_categorias_trimestre_pasado dcmp ON u.id = dcmp.id_usuario\n\nORDER BY saldo_actual DESC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        4848
      ],
      "id": "20769197-aaea-40ec-af5e-e475ff5eaae5",
      "name": "resumen_trimestral1",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda,\n\n  -- Transacciones de HOY agrupadas por tipo\n  jsonb_build_object(\n    'Ingreso', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Ingreso' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Ingreso'),\n    'Gasto', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Gasto' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Gasto')\n  ) AS transacciones_hoy,\n\n  -- Transacciones de AYER agrupadas por tipo\n  jsonb_build_object(\n    'Ingreso', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Ingreso' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Ingreso'),\n    'Gasto', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Gasto' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Gasto')\n  ) AS transacciones_ayer\n\nFROM transacciones t\nLEFT JOIN categorias c ON t.id_categoria = c.id\nLEFT JOIN fuentes_registro f ON t.id_fuente = f.id\nLEFT JOIN usuarios u ON u.id = t.id_usuario\nWHERE \n  t.fecha_transaccion IN (CURRENT_DATE, CURRENT_DATE - INTERVAL '1 day')\nGROUP BY u.id, u.nombre_completo, u.numero_whatsapp, u.moneda\nORDER BY u.id;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        768,
        4272
      ],
      "id": "e1f59a2c-1f5f-45d7-b06e-700e2006932c",
      "name": "Execute a SQL query7",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtDayOfMonth": 28,
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        3664
      ],
      "id": "53d964d8-1631-4f56-910c-bba2e3ce59c4",
      "name": "alerta_presupuesto"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        3856
      ],
      "id": "e84f72e2-9ab4-4732-a52f-93fc49d2bf3e",
      "name": "meta_en_riesgo"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        544,
        4048
      ],
      "id": "6c99f197-0ad2-49c9-8f01-53e1f5403ddc",
      "name": "recordatorio_suscripcion"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Recupera todas las transacciones del usuario en un período de tiempo definido. El intervalo de tiempo debe proporcionarse como una cadena compatible con PostgreSQL, como '7 days', '1 month', '90 days', etc. Filtra las transacciones por la fecha (fecha_transaccion) y devuelve los resultados ordenados de más reciente a más antiguo. Incluye información de la categoría y la fuente asociada a cada transacción.\n\nUsa la variable interval para definir el rango de fechas que quieres consultar, por ejemplo:\n'7 days' → últimos 7 días\n'1 month' → último mes\n'3 months' → últimos 3 meses",
        "operation": "executeQuery",
        "query": "SELECT \n  jsonb_build_object(\n    'id', t.id,\n    'descripcion', t.descripcion,\n    'monto', t.monto,\n    'moneda', t.moneda,\n    'tipo', t.tipo,\n    'fecha', t.fecha_transaccion,\n    'categoria', c.nombre,\n    'fuente', f.nombre\n  ) AS transaccion\nFROM transacciones t\nLEFT JOIN categorias c ON t.id_categoria = c.id\nLEFT JOIN fuentes_registro f ON t.id_fuente = f.id\nWHERE \n  t.id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario dueño de las transacciones`, \"string\") }}'\n  AND t.fecha_transaccion >= CURRENT_DATE - INTERVAL '{{ $fromAI(\"interval\", `intervalo de tiempo a analizar como '7 days', '1 month' o '90 days'`, \"string\") }}'\nORDER BY t.fecha_transaccion DESC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3072,
        4400
      ],
      "id": "cafc4911-cf41-446e-96a2-2b6b53ce3598",
      "name": "query_transactions",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Consulta el estado de las metas de ahorro activas del usuario",
        "operation": "executeQuery",
        "query": "SELECT \n  nombre, \n  monto_objetivo, \n  monto_actual, \n  fecha_objetivo \nFROM metas_ahorro\nWHERE \n  id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario que tiene metas de ahorro activas`, \"string\") }}'\n  AND estado = 'activa'\nORDER BY fecha_objetivo ASC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3392,
        4544
      ],
      "id": "f74051fb-c791-452c-95c4-63100200df23",
      "name": "get_saving_goals",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Consulta los presupuestos establecidos por el usuario para sus categorías.",
        "operation": "executeQuery",
        "query": "SELECT nombre, presupuesto_mensual FROM categorias\nWHERE id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario`, \"string\") }}' AND presupuesto_mensual IS NOT NULL AND tipo = 'Gasto';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3552,
        4528
      ],
      "id": "d9bfc2d7-aeb3-41a4-8c7c-b80ebcdc3b3e",
      "name": "get_category_budgets",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Registra una nueva suscripción o gasto recurrente del usuario, como Netflix o el gimnasio",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "suscripciones_usuario",
          "mode": "list",
          "cachedResultName": "suscripciones_usuario"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "activa": true,
            "id_usuario": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_usuario', ``, 'string') }}",
            "nombre": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', `Nombre de la subscripcion`, 'string') }}",
            "monto": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('monto', ``, 'number') }}",
            "moneda": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('moneda', ``, 'string') }}",
            "frecuencia": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('frecuencia', `puede ser uno de estos diario, semanal, mensual, trimestral, anual`, 'string') }}",
            "fecha_proximo_pago": "={{ $fromAI('fecha_proximo_pago', `Devuelve la fecha en formato ISO: YYYY-MM-DD`, 'string') }}",
            "id_categoria": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_categoria', `id de la categoria que se registra la subscripcion`, 'number') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "monto",
              "displayName": "monto",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "moneda",
              "displayName": "moneda",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "frecuencia",
              "displayName": "frecuencia",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": true,
              "options": [
                {
                  "name": "nunca",
                  "value": "nunca"
                },
                {
                  "name": "anual",
                  "value": "anual"
                },
                {
                  "name": "trimestral",
                  "value": "trimestral"
                },
                {
                  "name": "mensual",
                  "value": "mensual"
                },
                {
                  "name": "semanal",
                  "value": "semanal"
                },
                {
                  "name": "diario",
                  "value": "diario"
                }
              ]
            },
            {
              "id": "fecha_proximo_pago",
              "displayName": "fecha_proximo_pago",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "activa",
              "displayName": "activa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            },
            {
              "id": "id_usuario",
              "displayName": "id_usuario",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "id_categoria",
              "displayName": "id_categoria",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3280,
        4432
      ],
      "id": "a9f57d07-d104-4280-8d58-7397a2978b58",
      "name": "add_user_subscription",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Analiza los gastos de un período para identificar las 2 categorías con mayor gasto y los 'gastos hormiga' (transacciones pequeñas y frecuentes en una misma categoría).",
        "operation": "executeQuery",
        "query": "-- Consulta 1: Top Categoría de Gasto\nSELECT c.nombre, SUM(t.monto) as total_gastado\nFROM transacciones t\nJOIN categorias c ON t.id_categoria = c.id\nWHERE t.id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario dueño de las transacciones`, \"string\") }}' AND t.tipo = 'Gasto' AND t.fecha_transaccion BETWEEN {{ $fromAI('start_date', ``, 'string') }} AND {{ $fromAI('end_date', ``, 'string') }}\nGROUP BY c.nombre\nORDER BY total_gastado DESC\nLIMIT 2;\n\n-- Consulta 2: Detección de Gastos Hormiga (ej: más de 5 transacciones menores a $20.000 COP)\nSELECT c.nombre, COUNT(t.id) as numero_transacciones, SUM(t.monto) as total_gastado\nFROM transacciones t\nJOIN categorias c ON t.id_categoria = c.id\nWHERE t.id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario dueño de las transacciones`, \"string\") }}' AND t.tipo = 'Gasto' AND t.monto < 20000 AND t.fecha_transaccion BETWEEN {{ $fromAI('start_date', ``, 'string') }} AND {{ $fromAI('end_date', ``, 'string') }}\nGROUP BY c.nombre\nHAVING COUNT(t.id) > 5\nORDER BY total_gastado DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2944,
        4480
      ],
      "id": "d7e8bc34-55df-477c-bad9-c34cbeb3ab62",
      "name": "analyze_spending_habits",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen-financiero-hoy",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        4272
      ],
      "id": "42f408d0-8df7-4148-a81c-3183355f1c79",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen_semanal",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        4464
      ],
      "id": "13384383-357f-42c0-ac56-f4bb8e9d066e",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen_mensual",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        4656
      ],
      "id": "6965e033-7117-46d0-b32d-087ac2678c0b",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen_trimestral",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        4848
      ],
      "id": "7907e240-f7a0-4e14-9ffe-030bbfd51771",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "alerta_presupuesto",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        3664
      ],
      "id": "1d3a9d2a-5955-495b-8645-5b6dc40265b3",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "meta_en_riesgo",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        3856
      ],
      "id": "da4d1c30-6539-4fab-abda-15523d006882",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "recordatorio_suscripcion",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        992,
        4048
      ],
      "id": "59c9f04e-f4ba-4bd7-9293-c889369ecc21",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ed58c0b-89ba-4433-999e-022006738f07",
              "name": "user_data",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "9a07e76c-e432-4c95-bd2e-a3f4074601ba",
              "name": "numero_whatsapp",
              "value": "={{ $json.numero_whatsapp }}",
              "type": "string"
            },
            {
              "id": "4ce2c581-f440-467a-81d0-fbead2eab3d3",
              "name": "trigger_data",
              "value": "{}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1008,
        3472
      ],
      "id": "4999cf04-48ce-4134-842b-92bc8f88cfaf",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b89d5418-df60-419b-84f6-5bc7bc0dd09b",
              "name": "message",
              "value": "={{ $json.messages }}",
              "type": "string"
            },
            {
              "id": "f312aa42-4354-4954-92ff-9549a49c1d5b",
              "name": "numero_whatsapp",
              "value": "={{ $json.contacts[0].wa_id }}",
              "type": "string"
            },
            {
              "id": "4e6ed31c-2d8f-4415-bdaf-404a870f1cc2",
              "name": "first_name",
              "value": "={{ $json.contacts[0].profile.name.split(' ')[0] }}",
              "type": "string"
            },
            {
              "id": "f6c89644-22bf-403a-9b24-3753bf6b1220",
              "name": "usuario_data",
              "value": "={{ $json.usuario_data }}",
              "type": "object"
            },
            {
              "id": "d221f439-15a2-4e22-8648-f3a4e5786bef",
              "name": "redis_message",
              "value": "=chat_id_{{ $json.contacts[0].wa_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        784,
        3472
      ],
      "id": "5dd4e062-ee35-463c-94e2-44ceef199946",
      "name": "user_data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c88f04f6-a8d2-4aa4-96fb-8f8f3eb10157",
              "name": "numero_whatsapp",
              "value": "={{ $json.numero_whatsapp }}",
              "type": "string"
            },
            {
              "id": "10777f56-93d5-42e4-90db-118df3530d63",
              "name": "trigger_data",
              "value": "={{ $json.trigger_data }}",
              "type": "object"
            },
            {
              "id": "bf8d37c4-325b-4bd2-ba02-5541cf39e0ba",
              "name": "user_data",
              "value": "={{ $json.user_data }}",
              "type": "object"
            },
            {
              "id": "0a45395c-222f-4a50-8d9d-94ca53288077",
              "name": "metadata.phone_number_id",
              "value": "735679592965149",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2432,
        4160
      ],
      "id": "d650da0c-84a7-419c-84fd-d6a69a3ac3e4",
      "name": "Data"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Establece o actualiza el presupuesto mensual para una categoría de gasto específica",
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "categorias",
          "mode": "list",
          "cachedResultName": "categorias"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre__using_to_match_', `nombre exacto de la categoria a actualizar`, 'string') }}",
            "id_usuario": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_usuario__using_to_match_', ``, 'string') }}",
            "presupuesto_mensual": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('presupuesto_mensual', `monto nuevo a actualizar`, 'number') }}",
            "tipo": "Gasto"
          },
          "matchingColumns": [
            "id_usuario",
            "nombre"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "tipo",
              "displayName": "tipo",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": false,
              "options": [
                {
                  "name": "Gasto",
                  "value": "Gasto"
                },
                {
                  "name": "Ingreso",
                  "value": "Ingreso"
                }
              ],
              "removed": false
            },
            {
              "id": "presupuesto_mensual",
              "displayName": "presupuesto_mensual",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": false
            },
            {
              "id": "id_usuario",
              "displayName": "id_usuario",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3616,
        4400
      ],
      "id": "8fcea9d6-e9c9-4fb5-976a-c6b712683e1a",
      "name": "set_category_budget",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "obtienes todas las  suscripciones o gastos recurrente del usuario, como Netflix o el gimnasio",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "suscripciones_usuario",
          "mode": "list",
          "cachedResultName": "suscripciones_usuario"
        },
        "where": {
          "values": [
            {
              "column": "id_usuario",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3184,
        4528
      ],
      "id": "a1742a75-9c81-431e-911f-b356b38d1562",
      "name": "get_user_subscription",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Permite al usuario configurar la frecuencia de los recordatorios para registrar sus gastos.",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "recordatorios",
          "mode": "list",
          "cachedResultName": "recordatorios"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id_usuario": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_usuario', ``, 'string') }}",
            "frecuencia": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('frecuencia', `'diario'/'semanal'/'mensual'`, 'string') }}",
            "hora_envio": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('hora_envio', `HH:MM:SS`, 'string') }}",
            "descripcion": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('descripcion', ``, 'string') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "frecuencia",
              "displayName": "frecuencia",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": true,
              "options": [
                {
                  "name": "nunca",
                  "value": "nunca"
                },
                {
                  "name": "anual",
                  "value": "anual"
                },
                {
                  "name": "trimestral",
                  "value": "trimestral"
                },
                {
                  "name": "mensual",
                  "value": "mensual"
                },
                {
                  "name": "semanal",
                  "value": "semanal"
                },
                {
                  "name": "diario",
                  "value": "diario"
                }
              ]
            },
            {
              "id": "hora_envio",
              "displayName": "hora_envio",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "time",
              "canBeUsedToMatch": true
            },
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "id_usuario",
              "displayName": "id_usuario",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3792,
        4560
      ],
      "id": "2b9f2640-de35-463e-b80f-426de22de785",
      "name": "set_reminder_preference",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "categorias",
          "mode": "list",
          "cachedResultName": "categorias"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', `nombre de la categoria`, 'string') }}",
            "tipo": "={{ $fromAI('tipo', `Gasto o Ingreso`, 'string') }}",
            "id_usuario": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_usuario', ``, 'string') }}",
            "presupuesto_mensual": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('presupuesto_mensual', ``, 'number') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "tipo",
              "displayName": "tipo",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "options",
              "canBeUsedToMatch": true,
              "options": [
                {
                  "name": "Gasto",
                  "value": "Gasto"
                },
                {
                  "name": "Ingreso",
                  "value": "Ingreso"
                }
              ]
            },
            {
              "id": "presupuesto_mensual",
              "displayName": "presupuesto_mensual",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "id_usuario",
              "displayName": "id_usuario",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3872,
        4400
      ],
      "id": "8fd63c3d-076f-4f89-b7cc-ba5a59776199",
      "name": "create_user_category",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "categorias",
          "mode": "list",
          "cachedResultName": "categorias"
        },
        "returnAll": "",
        "where": {
          "values": [
            {
              "column": "id_usuario",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3744,
        4336
      ],
      "id": "45753350-5c57-488e-8d50-cd4d6f4ef296",
      "name": "get_user_categories",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7bbf55f-ad9e-4b40-9825-c07c3861efa3",
              "name": "trigger_data",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "ee72c582-17c1-4ca0-84ba-dde0d82420d7",
              "name": "numero_whatsapp",
              "value": "={{ $json.data.numero_whatsapp }}",
              "type": "string"
            },
            {
              "id": "7a8ebe2d-134e-46c8-ad91-6ac0f49d7b66",
              "name": "user_data",
              "value": "{}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1328,
        4128
      ],
      "id": "c61f4ab8-7b2c-4208-a3e7-dfbeb5448092",
      "name": "Edit Fields9"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        64,
        4240
      ],
      "id": "d1058376-81c3-4840-9069-7afdb2e2434b",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "description": "Registra una nueva transacción de Ingreso o Gasto en la cuenta del usuario, solamente si estas muy seguro que no existe la transaccion, y ya has validado anteriormente y no existe efectivamente",
        "workflowId": {
          "__rl": true,
          "value": "weeCmqNEWWuk43WW",
          "mode": "list",
          "cachedResultName": "register_transaction"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "fecha_transaccion": "={{ $fromAI('fecha_transaccion', ``, 'string') }}",
            "monto": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('monto', ``, 'number') }}",
            "moneda": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('moneda', ``, 'string') }}",
            "tipo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('tipo', ``, 'string') }}",
            "categoria": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('categoria', ``, 'string') }}",
            "descripcion": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('descripcion', ``, 'string') }}",
            "id_usuario": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_usuario', `id del usuario`, 'string') }}",
            "CategoryId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('CategoryId', `id de la categoria, obtenido en la tool get_user_categories`, 'string') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id_usuario",
              "displayName": "id_usuario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "fecha_transaccion",
              "displayName": "fecha_transaccion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "monto",
              "displayName": "monto",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "number",
              "removed": false
            },
            {
              "id": "moneda",
              "displayName": "moneda",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "tipo",
              "displayName": "tipo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "CategoryId",
              "displayName": "CategoryId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "categoria",
              "displayName": "categoria",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "descripcion",
              "displayName": "descripcion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        2784,
        4576
      ],
      "id": "76516215-02ef-4b4e-82a0-13d3fe1d59a3",
      "name": "register_transaction"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id,\n  nombre_completo,\n  email,\n  numero_whatsapp,\n  moneda,\n  estado_suscripcion,\n  fecha_registro\nFROM usuarios\nWHERE estado_suscripcion = 'free';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        560,
        5408
      ],
      "id": "7616be24-df8c-4801-9d21-d2c119db44db",
      "name": "user free",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $json.from }}",
        "messageType": "video",
        "mediaLink": "={{ $json.enlace }}",
        "additionalFields": {
          "mediaCaption": "={{ $json.texto }}"
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        1808,
        5408
      ],
      "id": "171ce6c0-3e12-4536-bce0-f619cdefa66c",
      "name": "Send message",
      "webhookId": "0c3a1105-a247-4873-97ed-9ddde5be8084",
      "credentials": {
        "whatsAppApi": {
          "id": "IzfsUgwJnA4EF09z",
          "name": "whatsap Valeia"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        784,
        5408
      ],
      "id": "949406d5-1d36-4074-84b1-b12d408e6508",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "108082ee-5ba1-4fb3-a962-aef4bbbb8119",
              "leftValue": "={{ $json.reset_logs_flag }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1152,
        5424
      ],
      "id": "1d46f24c-6450-4147-ab06-f5224a2ca0ab",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "96f5727d-d3fc-408a-8eb2-9cc197175017",
              "name": "enlace",
              "value": "={{ $json.enlace }}",
              "type": "string"
            },
            {
              "id": "8df86a1b-33b8-48a9-8dac-1b825140c92b",
              "name": "metadata.phone_number_id",
              "value": "565888133266017",
              "type": "string"
            },
            {
              "id": "3d9983b5-e5a8-4af1-a348-dc218466f2c2",
              "name": "from",
              "value": "={{ $json.numero_whatsapp.replace('+','') }}",
              "type": "string"
            },
            {
              "id": "3efebc00-427b-48c3-ac74-e9ecc4814e2a",
              "name": "texto",
              "value": "={{ $json.texto }}",
              "type": "string"
            },
            {
              "id": "9490d1d8-6657-4a7f-b4ad-aa39e2954422",
              "name": "usuario_id",
              "value": "={{ $json.usuario_id }}",
              "type": "string"
            },
            {
              "id": "edc45042-9725-40fd-ae01-edfcba57ab4e",
              "name": "anuncio_id",
              "value": "={{ $json.anuncio_id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1472,
        5408
      ],
      "id": "c92917ff-f87a-4af6-bd4f-dc8661c3e9b5",
      "name": "data anuncio"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH anuncio_no_visto AS (\n  SELECT a.*\n  FROM anuncios a\n  LEFT JOIN anuncios_usuarios au \n    ON a.id = au.id_anuncio AND au.id_usuario = $1\n  WHERE au.id IS NULL\n    AND (a.fecha_fin IS NULL OR a.fecha_fin > NOW())\n    AND a.fecha_inicio <= NOW()\n  ORDER BY a.id ASC\n  LIMIT 1\n), usuario_actual AS (\n  SELECT id, numero_whatsapp FROM usuarios WHERE id = $1\n)\nSELECT \n  u.id AS usuario_id,\n  u.numero_whatsapp,\n  an.id AS anuncio_id,\n  an.titulo,\n  an.imagen_url,\n  an.enlace,\n  an.texto,\n  an.frecuencia,\n  an.fecha_inicio,\n  an.fecha_fin,\n  CASE WHEN an.id IS NULL THEN TRUE ELSE FALSE END AS reset_logs_flag\nFROM usuario_actual u\nLEFT JOIN anuncio_no_visto an ON TRUE;\n",
        "options": {
          "queryReplacement": "={{ $json.id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        976,
        5424
      ],
      "id": "e69e4b87-1964-4250-a7ff-313f6d70449d",
      "name": "anuncios por usuario",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO anuncios (titulo, imagen_url, enlace, texto, frecuencia, fecha_inicio)\nVALUES\n('Mony Video', 'https://minios3.whitelabel.lat/mony/mony.mp4', 'https://minios3.whitelabel.lat/mony/mony.mp4', 'Publicidad Mony', '1_por_sesion', NOW()),\n('Whitelabel Video', 'https://minios3.whitelabel.lat/mony/whitelabel.mp4', 'https://minios3.whitelabel.lat/mony/whitelabel.mp4', 'Publicidad Whitelabel', '1_por_sesion', NOW());\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        560,
        5616
      ],
      "id": "f9e3aed0-5ea0-4c82-8dda-26e88760d81a",
      "name": "add anuncio",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH borrado AS (\n  DELETE FROM anuncios_usuarios\n  WHERE id_usuario = $1\n  RETURNING id_usuario\n)\nSELECT id, numero_whatsapp\nFROM usuarios\nWHERE id = $1;\n",
        "options": {
          "queryReplacement": "={{ $json.usuario_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1824,
        5584
      ],
      "id": "719b9f5a-ec1c-4745-88b0-3b8ae19320cf",
      "name": "reset anuncios",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "content": "# SEND advertisement\n\n",
        "height": 496,
        "width": 1680
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        304,
        5328
      ],
      "id": "9ff4f21f-2055-4466-be81-bf1957f0c837",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO anuncios_usuarios (id_anuncio, id_usuario, fecha_visto)\nVALUES ($1, $2, NOW());\n",
        "options": {
          "queryReplacement": "={{ $json.anuncio_id }},{{ $json.usuario_id }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1648,
        5408
      ],
      "id": "8c78fb39-ecfc-44ff-bb9a-2037ea4f51ae",
      "name": "log de vista",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "96f5727d-d3fc-408a-8eb2-9cc197175017",
              "name": "enlace",
              "value": "={{ $json.enlace }}",
              "type": "string"
            },
            {
              "id": "8df86a1b-33b8-48a9-8dac-1b825140c92b",
              "name": "metadata.phone_number_id",
              "value": "565888133266017",
              "type": "string"
            },
            {
              "id": "3d9983b5-e5a8-4af1-a348-dc218466f2c2",
              "name": "from",
              "value": "={{ $json.numero_whatsapp.replace('+','') }}",
              "type": "string"
            },
            {
              "id": "3efebc00-427b-48c3-ac74-e9ecc4814e2a",
              "name": "texto",
              "value": "={{ $json.texto }}",
              "type": "string"
            },
            {
              "id": "9490d1d8-6657-4a7f-b4ad-aa39e2954422",
              "name": "usuario_id",
              "value": "={{ $json.usuario_id }}",
              "type": "string"
            },
            {
              "id": "edc45042-9725-40fd-ae01-edfcba57ab4e",
              "name": "anuncio_id",
              "value": "={{ $json.anuncio_id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1488,
        5584
      ],
      "id": "3a90d926-f2b7-423e-82c4-2a61862847dd",
      "name": "message anuncio"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "={{ $json.from }}",
        "textBody": "=👋  Me alegra que estés viendo estas recomendaciones que pueden ayudarte a *crecer financieramente*.\nSolo un *recordatorio amigable*: si prefieres una experiencia *sin anuncios*, considera pasarte a nuestro plan *Premium*. Así tendrás contenido personalizado y *cero interrupciones*.\n¿Quieres que te cuente cómo hacerlo? 😊",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        1664,
        5584
      ],
      "id": "68359f5c-5688-42d1-aa7a-5edb35242533",
      "name": "send pay",
      "webhookId": "0c3a1105-a247-4873-97ed-9ddde5be8084",
      "credentials": {
        "whatsAppApi": {
          "id": "IzfsUgwJnA4EF09z",
          "name": "whatsap Valeia"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        336,
        5616
      ],
      "id": "4d9d82d4-66dc-4b34-b1dc-6dff0be7ee11",
      "name": "anuncio_disponible1",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# SEND advertisement AIRTABLE\n\n\n",
        "height": 496,
        "width": 1680
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        5872
      ],
      "id": "55bd93a5-dcb9-45c8-abc9-43fca7d15faf",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        6144
      ],
      "id": "9fab0d4a-721c-4052-9bba-fddb17c45d06",
      "name": "anuncio_disponible2",
      "disabled": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "authentication": "airtableTokenApi",
        "baseId": {
          "__rl": true,
          "value": "appeEyMJXtknc4KrR",
          "mode": "id"
        },
        "tableId": {
          "__rl": true,
          "value": "tbl02BF19QlKxvXmN",
          "mode": "id"
        },
        "triggerField": "fecha_creacion",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.airtableTrigger",
      "typeVersion": 1,
      "position": [
        432,
        6800
      ],
      "id": "4445e5b4-2bf3-4f90-86e4-f5a764986164",
      "name": "Airtable Trigger",
      "credentials": {
        "airtableTokenApi": {
          "id": "u7Y2oDaiCkrDAgjV",
          "name": "Gestión de Publicidad Mony"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "75741923-fe06-4384-ba82-2747db1cefbd",
              "leftValue": "={{ $json.enviarAhora }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        768,
        6224
      ],
      "id": "289eff46-8849-47ac-b246-dd3998ca6fd2",
      "name": "enviar?"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "TEXTO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "ea6c8c20-20b2-48d9-bc44-c3c11a6aac86"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEXTO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c9ea4125-e72c-4479-93cf-1bc52442f010",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "IMAGEN",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "IMAGEN"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a7e4d476-639a-4cce-a0b9-da994a318e13",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "VIDEO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "VIDEO"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "71deeb84-bf4b-40a3-a871-c686e7f11091",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "TEXTO_E_IMAGEN",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEXTO_E_IMAGEN"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d9d458b1-ea3e-4695-976d-61c41de07e83",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "TEXTO_E_VIDEO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "TEXTO_E_VIDEO"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1616,
        5920
      ],
      "id": "af54e4e5-a613-445f-af90-a6ddfc6598f4",
      "name": "tipo"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "anunciantes",
          "mode": "list",
          "cachedResultName": "anunciantes"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "nombre_empresa": "={{ $json.fields.nombre_empresa }}",
            "nombre_contacto": "={{ $json.fields.nombre_contacto }}",
            "email_contacto": "={{ $json.fields.email_contacto }}",
            "whatsapp_contacto": "={{ $json.fields.whatsapp_contacto }}",
            "fecha_creacion": "={{ $json.fields.fecha_creacion }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "nombre_empresa",
              "displayName": "nombre_empresa",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "nombre_contacto",
              "displayName": "nombre_contacto",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email_contacto",
              "displayName": "email_contacto",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "whatsapp_contacto",
              "displayName": "whatsapp_contacto",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "fecha_creacion",
              "displayName": "fecha_creacion",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        608,
        6800
      ],
      "id": "72a8781f-0e4c-4a01-916c-cc5ff4a640a4",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appeEyMJXtknc4KrR",
          "mode": "list",
          "cachedResultName": "Gestión de Publicidad Mony",
          "cachedResultUrl": "https://airtable.com/appeEyMJXtknc4KrR"
        },
        "table": {
          "__rl": true,
          "value": "tblSqtqdtt0BucZAM",
          "mode": "list",
          "cachedResultName": "Anuncios",
          "cachedResultUrl": "https://airtable.com/appeEyMJXtknc4KrR/tblSqtqdtt0BucZAM"
        },
        "filterByFormula": "({estado} = 'ACTIVO')",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        448,
        6224
      ],
      "id": "d8dc2f53-18a4-4690-a771-14fca2575c9f",
      "name": "Obtener Anuncios Activos",
      "credentials": {
        "airtableTokenApi": {
          "id": "u7Y2oDaiCkrDAgjV",
          "name": "Gestión de Publicidad Mony"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appeEyMJXtknc4KrR",
          "mode": "list",
          "cachedResultName": "Gestión de Publicidad Mony",
          "cachedResultUrl": "https://airtable.com/appeEyMJXtknc4KrR"
        },
        "table": {
          "__rl": true,
          "value": "tblkKidBWt1wChOqr",
          "mode": "list",
          "cachedResultName": "Log de Envíos",
          "cachedResultUrl": "https://airtable.com/appeEyMJXtknc4KrR/tblkKidBWt1wChOqr"
        },
        "filterByFormula": "IS_AFTER({fecha_envio}, DATEADD(TODAY(), -30, 'days'))",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        448,
        6400
      ],
      "id": "dad94311-3b3d-4b5f-a0f5-53144cfa9ed1",
      "name": "Obtener Logs Recientes",
      "credentials": {
        "airtableTokenApi": {
          "id": "u7Y2oDaiCkrDAgjV",
          "name": "Gestión de Publicidad Mony"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  id,\n  nombre_completo,\n  email,\n  numero_whatsapp,\n  moneda,\n  estado_suscripcion,\n  fecha_registro\nFROM usuarios\nWHERE estado_suscripcion = 'free';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        448,
        6064
      ],
      "id": "a0204aab-a3ed-4533-932b-c29f70c56e3b",
      "name": "get user free",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\nitems.forEach(item => {\n    const data = item.json;\n\n    // Lista de días en español\n    const diasSemana = [\n        \"Domingo\", \"Lunes\", \"Martes\", \"Miércoles\", \n        \"Jueves\", \"Viernes\", \"Sábado\"\n    ];\n\n    // Fecha y hora actual en Bogotá\n    const ahoraBogota = new Date(\n        new Date().toLocaleString(\"en-US\", { timeZone: \"America/Bogota\" })\n    );\n\n    const diaActual = diasSemana[ahoraBogota.getDay()];\n    const minutosActuales = ahoraBogota.getHours() * 60 + ahoraBogota.getMinutes();\n\n    let enviarHoy = false;\n\n    // Validar frecuencia\n    if (data.tipo_frecuencia === \"DIARIO\") {\n        enviarHoy = true;\n    } else if (data.tipo_frecuencia === \"DIAS_ESPECIFICOS\" && Array.isArray(data.dias_semana)) {\n        enviarHoy = data.dias_semana.includes(diaActual);\n    }\n\n    // Validar hora con tolerancia de ±20 minutos\n    let enviarAhora = false;\n    if (enviarHoy && Array.isArray(data.horas_envio)) {\n        enviarAhora = data.horas_envio.some(hora => {\n            const [h, m] = hora.split(\":\").map(Number);\n            const minutosProgramados = h * 60 + m;\n            return Math.abs(minutosActuales - minutosProgramados) <= 30;\n        });\n    }\n\n    results.push({\n        json: {\n            ...data,\n            hoy_es: diaActual,\n            hora_actual: ahoraBogota.toTimeString().slice(0, 5),\n            enviarHoy,\n            enviarAhora\n        }\n    });\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        6224
      ],
      "id": "74d26989-cf19-4f56-8d66-272a691cc91b",
      "name": "enviar ahora"
    },
    {
      "parameters": {
        "jsCode": "const usuarios = $json; // Usuario actual del loop\nconst anuncios = $items(\"enviar?\", 0).map(item => item.json);\nconst logs = $items(\"Obtener Logs Recientes\", 0).map(item => item.json);\n\n// Aseguramos que sean arrays\nconst arrUsuarios = Array.isArray(usuarios) ? usuarios : [usuarios];\nconst arrAnuncios = Array.isArray(anuncios) ? anuncios : [anuncios];\nconst arrLogs = Array.isArray(logs) ? logs : [logs];\n\nconst result = arrUsuarios.map(usuario => {\n  // Filtramos logs que correspondan a este usuario\n  const logsUsuario = arrLogs.filter(\n    log => log.id_usuario_db === usuario.id\n  );\n\n  // Anexamos todos los anuncios disponibles\n  return {\n    ...usuario,\n    anuncios_disponibles: arrAnuncios,\n    logs: logsUsuario\n  };\n});\n\nreturn result.map(r => ({ json: r }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        6176
      ],
      "id": "eaa438b6-4beb-4e83-af9c-181f27ea526f",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SHOW timezone;\nSELECT now(), current_date;\n\nALTER DATABASE mony SET timezone TO 'America/Bogota';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        128,
        4096
      ],
      "id": "4cd3ef79-803b-4cc9-87d5-20aba5c3e5be",
      "name": "zona horaria db edit",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      },
      "disabled": true
    }
  ],
  "pinData": {
    "Start": [
      {
        "json": {
          "metadata": {
            "display_phone_number": "573143400476",
            "phone_number_id": "565888133266017"
          },
          "contacts": [
            {
              "profile": {
                "name": "Pedro Rodriguez"
              },
              "wa_id": "573228854498"
            }
          ],
          "messages": "puedes ver mis hábitos para que me aconsejes?",
          "field": "messages",
          "usuario_data": {
            "id": "46ed80f9-8ef4-4faf-91fe-30a2ec76d0e0",
            "email": "pro.pedro0413@gmail.com",
            "moneda": "COP",
            "password": "$2a$12$T.GVMfVNgql1Xqqn7wwukO1l/aI0dnzSIIGMg63Z3C/7J6H3EKTSm",
            "fecha_registro": "2025-08-11T22:52:19.508",
            "nombre_completo": "Pedro Rodriguez",
            "numero_whatsapp": "+573228854498",
            "estado_suscripcion": "free"
          }
        }
      }
    ],
    "resumen-financiero-hoy": [
      {
        "json": {
          "timestamp": "2025-08-15T20:00:21.007-05:00",
          "Readable date": "August 15th 2025, 8:00:21 pm",
          "Readable time": "8:00:21 pm",
          "Day of week": "Friday",
          "Year": "2025",
          "Month": "August",
          "Day of month": "15",
          "Hour": "20",
          "Minute": "00",
          "Second": "21",
          "Timezone": "America/Bogota (UTC-05:00)"
        }
      }
    ]
  },
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "7CI8d1lC1EC1eqnL"
  },
  "staticData": {
    "node:resumen-financiero-hoy": {
      "recurrenceRules": []
    },
    "node:anuncio_disponible": {
      "recurrenceRules": []
    },
    "node:resumen_semanal": {
      "recurrenceRules": []
    },
    "node:resumen_mensual": {
      "recurrenceRules": []
    },
    "node:resumen_trimestral": {
      "recurrenceRules": []
    },
    "node:alerta_presupuesto": {
      "recurrenceRules": []
    },
    "node:meta_en_riesgo": {
      "recurrenceRules": []
    },
    "node:recordatorio_suscripcion": {
      "recurrenceRules": []
    },
    "node:anuncio_disponible1": {
      "recurrenceRules": []
    },
    "node:anuncio_disponible2": {
      "recurrenceRules": []
    },
    "node:Airtable Trigger": {
      "lastTimeChecked": "2025-08-23T14:00:44Z"
    }
  },
  "tags": [],
  "triggerCount": 8,
  "updatedAt": "2025-08-21T02:59:31.286Z",
  "versionId": "f3d53f27-12c1-4694-a6ae-1dbbeeff27d2"
}