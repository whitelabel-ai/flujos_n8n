{
  "active": true,
  "connections": {
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Wait14": {
      "main": [
        [
          {
            "node": "If16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait15": {
      "main": [
        [
          {
            "node": "If15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If15": {
      "main": [
        [
          {
            "node": "Send message6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If16": {
      "main": [
        [
          {
            "node": "Send message5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait16": {
      "main": [
        [
          {
            "node": "If17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If17": {
      "main": [
        [
          {
            "node": "Send message7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Send message3": {
      "main": [
        [
          {
            "node": "Redis6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model3": {
      "main": [
        [
          {
            "node": "Wait14",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait15",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait16",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "user_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Message a model3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "anuncio_disponible": {
      "main": [
        [
          {
            "node": "Execute a SQL query1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_semanal": {
      "main": [
        [
          {
            "node": "Execute a SQL query2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_mensual": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_trimestral": {
      "main": [
        [
          {
            "node": "resumen_trimestral1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen-financiero-hoy": {
      "main": [
        [
          {
            "node": "Execute a SQL query7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "alerta_presupuesto": {
      "main": [
        [
          {
            "node": "Execute a SQL query3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "meta_en_riesgo": {
      "main": [
        [
          {
            "node": "Execute a SQL query6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "recordatorio_suscripcion": {
      "main": [
        [
          {
            "node": "Execute a SQL query4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze_spending_habits": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "query_transactions": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_category_budgets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "add_user_subscription": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "get_saving_goals": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query7": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query2": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "resumen_trimestral1": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query3": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query6": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query4": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Edit Fields7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields7": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields8": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "user_data": {
      "main": [
        [
          {
            "node": "Edit Fields8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-01T22:35:15.126Z",
  "id": "0pIe1cDaBuDC9dT1",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Agente Coach",
  "nodes": [
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2912,
        5456
      ],
      "id": "8aa0afa9-6b31-463b-9065-dd9a249b4ea7",
      "name": "Wait16",
      "webhookId": "87aeebf1-a0c6-4899-b4d0-a0a8e4b02a2c"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b98c759-b4b7-4353-a5e4-d2ff1c030744",
              "leftValue": "={{ $json.message.content.parte4}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3136,
        5456
      ],
      "id": "cedb24f7-2e4d-4864-ab5f-d52c07ce65e5",
      "name": "If17"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3552,
        5456
      ],
      "id": "96261774-144a-4e08-bdd6-715d2fcc8782",
      "name": "No Operation, do nothing16"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "=+{{ $('Data').item.json.numero_whatsapp }}",
        "textBody": "={{ $json.message.content.parte4 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3344,
        5424
      ],
      "id": "23707549-f579-4c9c-9322-53cb7e2c333b",
      "name": "Send message7",
      "webhookId": "01402dc2-26fb-438a-b7e7-71025cb3f5dc",
      "credentials": {
        "whatsAppApi": {
          "id": "YohohlgP3bBq85IL",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3552,
        5264
      ],
      "id": "15b7c806-2cab-46ab-9052-cf020f371492",
      "name": "No Operation, do nothing14"
    },
    {
      "parameters": {
        "amount": 4
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2912,
        5232
      ],
      "id": "ac88bbd5-a549-4b87-8728-a8b1da7cf06e",
      "name": "Wait15",
      "webhookId": "1e9449c3-7591-405c-bd2c-db7f9bb36030"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5b98c759-b4b7-4353-a5e4-d2ff1c030744",
              "leftValue": "={{ $json.message.content.parte3}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3136,
        5232
      ],
      "id": "44e2566c-efab-4bed-ba71-dbc519ee2223",
      "name": "If15"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "=+{{ $('Data').item.json.numero_whatsapp }}",
        "textBody": "={{ $json.message.content.parte3 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3344,
        5232
      ],
      "id": "9daba94e-9047-47ab-879f-b30ed28a9437",
      "name": "Send message6",
      "webhookId": "ca927ce1-b094-4d96-812d-06b5b8c0e32f",
      "credentials": {
        "whatsAppApi": {
          "id": "YohohlgP3bBq85IL",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        3968,
        5072
      ],
      "id": "458d68de-50b3-48c0-9908-11db9700e1bc",
      "name": "No Operation, do nothing15"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "=chat_id_{{ $('Data').item.json.numero_whatsapp }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3136,
        5056
      ],
      "id": "a5e30e48-0d4d-4973-9223-61f39db64930",
      "name": "Redis6",
      "credentials": {
        "redis": {
          "id": "yzvE00xFtVHtaoZ1",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3360,
        5056
      ],
      "id": "4a29142f-0826-425d-8a7a-43b6f14f5cd1",
      "name": "Wait14",
      "webhookId": "4e5be309-0849-48ae-abcb-a5ed2b602c32"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "709f4717-003f-4f9f-b841-18d2f2f4ddb4",
              "leftValue": "={{ $json.message.content.parte2}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3536,
        5056
      ],
      "id": "740b6d95-d013-4098-af83-abf768e0b056",
      "name": "If16"
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "=+{{ $('Data').item.json.numero_whatsapp }}",
        "textBody": "={{ $json.message.content.parte1 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        2960,
        5056
      ],
      "id": "ad683364-7b2f-418d-bd08-aafe9a045803",
      "name": "Send message3",
      "webhookId": "f1605586-43d3-4829-b709-42d67a659c58",
      "credentials": {
        "whatsAppApi": {
          "id": "YohohlgP3bBq85IL",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Divide el siguiente mensaje en hasta **4 partes más pequeñas** solo si es necesario, asegurándote de que cada parte tenga sentido completo.  \n\n### **Reglas:**  \n- Si el mensaje es *corto* (hasta *160 caracteres*), devuélvelo en **una sola parte**.  \n- Si es *mediano* (hasta *400 caracteres*), divídelo en **2 partes**.  \n- Si es *largo* (hasta *600 caracteres*), divídelo en **3 partes**. \n- Si es *muy largo* (más de *600 caracteres*), agrégale una **parte4**.  \n\n- **Evita dividir el mensaje innecesariamente**. Usa la **menor cantidad de partes posible**.  \n- **No cortes oraciones en puntos, comas o conectores** para mantener la coherencia.  \n- **si hay una lista con varios items, no se debe dividir**, toda la lista debe ir en un mismo mensaje\n\n- **No incluyas datos sensibles del usuario** en la respuesta, como:  \n  - `user_id: <número>`  \n  - `subscriber_id: <número>`  \n  - `first_name: <nombre>`  \n  - **Elimina estos datos sin dejar rastros.**  \n\n---\n\n### **Formato de Salida:**  \n- Devuelve la respuesta en **formato JSON** con **solo las partes necesarias**.  \n- Usa `\\n\\n` para agregar saltos de línea cuando sea necesario o para mejorar la legibilidad en listas.  \n- **Nunca uses comillas `\"` para resaltar palabras**. En su lugar, usa un solo asterisco: *palabra*.  \n\n#### **Ejemplo de salida:**  \n\n{\n  \"parte1\": \"Texto de la primera parte.\",\n  \"parte2\": \"Texto de la segunda parte.\"\n}\n\n\n---\n\n### **Mensaje:**  \n{{ $json.output }}  \n\n"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        2144,
        5056
      ],
      "id": "dc478cf3-2dfd-44f0-8c5b-279982ae3b36",
      "name": "Message a model3",
      "credentials": {
        "openAiApi": {
          "id": "UYsXoFpwT6Oh1GeF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "send",
        "phoneNumberId": "={{ $('Data').item.json.metadata.phone_number_id }}",
        "recipientPhoneNumber": "=+{{ $('Data').item.json.numero_whatsapp }}",
        "textBody": "={{ $json.message.content.parte2 }}",
        "additionalFields": {
          "previewUrl": true
        }
      },
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [
        3744,
        5040
      ],
      "id": "9c26e2a8-5b3b-45f4-b4be-9e3424524d0c",
      "name": "Send message5",
      "webhookId": "e6e117eb-45fc-426f-aea8-9777d88a3a1a",
      "credentials": {
        "whatsAppApi": {
          "id": "YohohlgP3bBq85IL",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "content": "## RESPONS AGENT",
        "height": 760,
        "width": 2264,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2064,
        4928
      ],
      "id": "7f639a3c-5572-4799-85ae-d36b53c45b03",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2688,
        4400
      ],
      "id": "7b5ea3ef-fb7f-40a9-b6f2-702ef68b36db",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "automation.whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=MONY_chat_id_{{ $('Data').item.json.numero_whatsapp }}",
        "sessionTTL": 500000,
        "contextWindowLength": 25
      },
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.5,
      "position": [
        2816,
        4400
      ],
      "id": "6c2a22c6-560a-43b7-b6b8-4046793258f5",
      "name": "Redis Chat Memory1",
      "credentials": {
        "redis": {
          "id": "yzvE00xFtVHtaoZ1",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "content": "## AGENT MAIN",
        "height": 600,
        "width": 2240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2032,
        4096
      ],
      "id": "047fefbe-7590-4c41-9e6c-fd12bdcc3021",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "metadata",
              "type": "any"
            },
            {
              "name": "contacts",
              "type": "any"
            },
            {
              "name": "messages",
              "type": "any"
            },
            {
              "name": "field",
              "type": "any"
            },
            {
              "name": "usuario_data",
              "type": "any"
            }
          ]
        }
      },
      "id": "5c4b3dc3-9b38-4a88-96ab-fbaf86edb7b1",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        3648,
        3808
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=nombre: {{ $json.user_data.first_name }},\nmensaje del usuario: {{ $json.user_data.message }},\ntrigger_data: {{ JSON.stringify($json.trigger_data) }}\nuser_data: {{ JSON.stringify($json.user_data) }}",
        "options": {
          "systemMessage": "=### 1. ROL Y PERSONA ###\n- Eres *Mony Coach*, el analista y estratega financiero personal de *[nombre]*.\n- Tu personalidad es una mezcla de *analista de datos experto* y *coach motivacional*. Eres perspicaz, basado en datos, pero siempre comunicas tus hallazgos de forma sencilla, positiva y accionable.\n- Tu misión es ayudar al usuario a entender sus hábitos financieros, identificar oportunidades de mejora, alcanzar sus metas y mantenerlo informado sobre su salud financiera.\n\n### 2. CONTEXTO DE ENTRADA Y MODOS DE OPERACIÓN ###\nOperas en dos modos, dependiendo del contexto de entrada:\n\n- *Modo Proactivo (Trigger-Based):*\n  - *Contexto:* Recibes un `trigger_data` con un `trigger_type` específico (`resumen_semanal`, `alerta_presupuesto`, etc.).\n  - *Tu Acción:* Tu única tarea es construir y enviar un mensaje de WhatsApp claro, conciso y útil basado en los datos del trigger. No esperas una respuesta.\n\n- *Modo Reactivo (Conversacional):*\n  - *Contexto:* `trigger_data` está vacío. Recibes un `mensaje del usuario` directo.\n  - *Tu Acción:* Tu objetivo es entender la pregunta o solicitud del usuario, usar tus herramientas analíticas para obtener los datos necesarios y responder de forma conversacional, ofreciendo insights y consejos.\n\n### 3. LÓGICA DE PROCESAMIENTO ###\n\n#### *CASO A: Modo Proactivo (Trigger Detectado)*\n1.  Identifica el `trigger_type` del `trigger_data`.\n2.  Usa la plantilla de mensaje correspondiente al trigger (ver ejemplos abajo).\n3.  Personaliza el mensaje con los datos recibidos.\n4.  Envía el mensaje y finaliza.\n\n    - *`resumen_semanal, mesual, trimestral...`*: \"¡Hola, [nombre]! ☀️ Tu resumen de la semana: Gastaste $X, un 15% menos que la semana pasada. Tu mayor gasto fue en 'Comida' 🍔. ¡Sigue así! 💪\"\n    - *`alerta_presupuesto`*: \"¡Ojo, [nombre]! 🧐 Has alcanzado el 90% de tu presupuesto en 'Entretenimiento'. Te quedan $X para el resto del mes. ¡A gestionar con cuidado!\"\n    - *`meta_en_riesgo`*: \"¡Hola, [nombre]! Revisando tu meta 'Viaje a la playa' 🏖️. Para esta fecha, tu ahorro debería ir en 60% y va en 40%. ¡No te preocupes! ¿Quieres que analicemos tus gastos para encontrar dónde podemos optimizar?\"\n    - *`recordatorio_suscripcion`*: \"¡Recordatorio rápido, [nombre]! 🗓️ Mañana se cobra tu suscripción de 'Netflix' por $X.\"\n\n#### *CASO B: Modo Reactivo (Conversación con Usuario)*\n1.  *Saluda y Acusa Recibo:* \"¡Hola, [nombre]! Claro, analicemos eso.\"\n2.  *Analiza la Intención:* ¿El usuario quiere un reporte, un consejo, un análisis comparativo, o una proyección?\n3.  *Planifica y Ejecuta Herramientas:* Determina qué herramientas necesitas para responder. A menudo necesitarás *combinar varias herramientas*. Por ejemplo, para dar un consejo sobre \"gastos hormiga\", primero necesitas `analyze_spending_habits` y luego `query_transactions` para obtener los ejemplos específicos.\n4.  *Sintetiza y Responde:* No presentes los datos en crudo. Traduce los resultados de las herramientas en un consejo claro y accionable.\n    - *Ejemplo de solicitud:* \"¿Cómo puedo ahorrar más?\"\n    - *Tu proceso mental:*\n        1. Llamar a `get_financial_health_snapshot` para ver el panorama general (ingresos vs gastos).\n        2. Llamar a `analyze_spending_habits` para ver la categoría con más gastos y los \"gastos hormiga\".\n        3. Llamar a `get_user_subscriptions` para ver si hay suscripciones innecesarias.\n    - *Tu respuesta sintetizada:* \"Analizando tus finanzas, veo dos grandes oportunidades para ahorrar: 1) Tu gasto más fuerte este mes es en 'Restaurantes'. Reducir las salidas a cenar podría tener un gran impacto. 2) Detecto varios gastos pequeños y frecuentes en 'Cafeterías' (gastos hormiga) que suman casi $80.000 al mes. Preparar el café en casa podría ayudarte a alcanzar tu meta más rápido. ¿Quieres que detallemos los gastos de alguna de estas categorías?\"\n\n### 4. HERRAMIENTAS ANALÍTICAS DISPONIBLES ###\n- *Consultas Generales:* `query_transactions`, `get_saving_goals`, `get_user_subscriptions`, `get_category_budgets`.\n- *Análisis Avanzado:* `get_financial_health_snapshot`, `analyze_spending_habits`, `compare_spending_periods`.\n- *Acciones Externas:* `generate_and_send_report`.\n\n### 5. REGLAS DE ORO ###\n- *Siempre basa tus consejos en DATOS.* Usa tus herramientas para fundamentar cada recomendación.\n- *Traduce números en narrativas.* No digas solo \"gastaste $500.000\". Di \"Tu gasto en 'Ocio' este mes fue de $500.000, principalmente en salidas al cine los fines de semana.\"\n- *Sé proactivo en la conversación.* Si un usuario pide un dato, ofrécele el siguiente paso lógico. Si pide sus gastos, pregúntale si quiere compararlos con el mes anterior.\n- *Mantén la privacidad.* Nunca compartas información sin una solicitud explícita, como al usar `generate_and_send_report`."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        3008,
        4176
      ],
      "id": "77546394-7f5d-4e82-bd1d-e7bfd22e7989",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 20
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2112,
        3328
      ],
      "id": "ae172954-ca99-4183-9398-d669929d4403",
      "name": "resumen-financiero-hoy"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH transacciones_mes AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    t.descripcion,\n    t.fecha_transaccion,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    date_part('month', t.fecha_transaccion) = date_part('month', CURRENT_DATE)\n    AND date_part('year', t.fecha_transaccion) = date_part('year', CURRENT_DATE)\n),\ningresos_gastos AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS total_ingresos,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS total_gastos\n  FROM transacciones_mes\n  GROUP BY id_usuario\n),\ncategorias_top_gasto AS (\n  SELECT \n    id_usuario,\n    categoria,\n    SUM(monto) AS total_categoria\n  FROM transacciones_mes\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario, categoria\n),\ndetalle_metas_activas AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'nombre', nombre,\n        'monto_objetivo', monto_objetivo,\n        'monto_actual', monto_actual,\n        'fecha_objetivo', fecha_objetivo\n      ) ORDER BY fecha_objetivo\n    ) AS metas_ahorro_activas\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ntop_categorias_detalle AS (\n  SELECT id_usuario, categoria, total_categoria\n  FROM (\n    SELECT \n      id_usuario, \n      categoria, \n      total_categoria,\n      ROW_NUMBER() OVER (PARTITION BY id_usuario ORDER BY total_categoria DESC) AS rn\n    FROM categorias_top_gasto\n  ) sub\n  WHERE rn <= 3\n),\ntop_suscripciones_detalle AS (\n  SELECT \n    id_usuario,\n    json_agg(json_build_object(\n      'nombre', nombre,\n      'monto', monto,\n      'frecuencia', frecuencia,\n      'fecha_proximo_pago', fecha_proximo_pago\n    ) ORDER BY monto DESC) AS detalle_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\ntotal_suscripciones AS (\n  SELECT \n    id_usuario,\n    SUM(monto) AS total_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\nahorros_mes AS (\n  SELECT \n    id_usuario,\n    SUM(monto_actual) AS total_ahorrado\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ndetalle_transacciones AS (\n  SELECT \n    id_usuario,\n    json_build_object(\n      'ingresos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_mes\n        WHERE tipo = 'Ingreso' AND transacciones_mes.id_usuario = t.id_usuario\n      ),\n      'gastos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_mes\n        WHERE tipo = 'Gasto' AND transacciones_mes.id_usuario = t.id_usuario\n      )\n    ) AS transacciones\n  FROM transacciones_mes t\n  GROUP BY id_usuario\n),\ndetalle_top_categorias AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total_categoria\n      ) ORDER BY total_categoria DESC\n    ) AS categorias_top\n  FROM top_categorias_detalle\n  GROUP BY id_usuario\n),\n-- MES PASADO\ntransacciones_mes_pasado AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    date_part('month', t.fecha_transaccion) = date_part('month', CURRENT_DATE - INTERVAL '1 month')\n    AND date_part('year', t.fecha_transaccion) = date_part('year', CURRENT_DATE - INTERVAL '1 month')\n),\nresumen_mes_pasado AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS ingresos_mes_pasado,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS gastos_mes_pasado\n  FROM transacciones_mes_pasado\n  GROUP BY id_usuario\n),\ncategorias_mes_pasado AS (\n  SELECT \n    id_usuario,\n    tipo,\n    categoria,\n    SUM(monto) AS total\n  FROM transacciones_mes_pasado\n  GROUP BY id_usuario, tipo, categoria\n),\ndetalle_categorias_mes_pasado_ingreso AS (\n  SELECT \n    id_usuario,\n    'Ingreso'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_mes_pasado\n  WHERE tipo = 'Ingreso'\n  GROUP BY id_usuario\n),\ndetalle_categorias_mes_pasado_gasto AS (\n  SELECT \n    id_usuario,\n    'Gasto'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_mes_pasado\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario\n),\ndetalle_categorias_mes_pasado AS (\n  SELECT \n    id_usuario,\n    json_object_agg(tipo, detalle) AS categorias_mes_pasado\n  FROM (\n    SELECT * FROM detalle_categorias_mes_pasado_ingreso\n    UNION ALL\n    SELECT * FROM detalle_categorias_mes_pasado_gasto\n  ) sub\n  GROUP BY id_usuario\n)\n\n-- FINAL\nSELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda_defecto,\n  \n  -- Totales\n  COALESCE(ig.total_ingresos, 0) AS total_ingresos,\n  COALESCE(ig.total_gastos, 0) AS total_gastos,\n  COALESCE(ig.total_ingresos, 0) - COALESCE(ig.total_gastos, 0) AS saldo_actual,\n  COALESCE(ts.total_suscripciones, 0) AS total_suscripciones_activas,\n  COALESCE(am.total_ahorrado, 0) AS total_ahorrado_en_metas_activas,\n  \n  -- Detalles enriquecidos\n  COALESCE(tc.categorias_top, '[]') AS top_categorias_gasto,\n  COALESCE(sd.detalle_suscripciones, '[]') AS top_suscripciones_activas,\n  COALESCE(dt.transacciones, '[]') AS detalle_transacciones,\n  COALESCE(ma.metas_ahorro_activas, '[]') AS detalle_metas_ahorro_activas,\n\n  -- Totales del mes anterior\n  COALESCE(rmp.ingresos_mes_pasado, 0) AS ingresos_mes_pasado,\n  COALESCE(rmp.gastos_mes_pasado, 0) AS gastos_mes_pasado,\n\n  -- Detalles por categoría del mes anterior\n  COALESCE(dcmp.categorias_mes_pasado, '{}') AS categorias_mes_pasado\n\nFROM usuarios u\nLEFT JOIN ingresos_gastos ig ON u.id = ig.id_usuario\nLEFT JOIN total_suscripciones ts ON u.id = ts.id_usuario\nLEFT JOIN ahorros_mes am ON u.id = am.id_usuario\nLEFT JOIN detalle_top_categorias tc ON u.id = tc.id_usuario\nLEFT JOIN top_suscripciones_detalle sd ON u.id = sd.id_usuario\nLEFT JOIN detalle_transacciones dt ON u.id = dt.id_usuario\nLEFT JOIN detalle_metas_activas ma ON u.id = ma.id_usuario\nLEFT JOIN resumen_mes_pasado rmp ON u.id = rmp.id_usuario\nLEFT JOIN detalle_categorias_mes_pasado dcmp ON u.id = dcmp.id_usuario\n\nORDER BY saldo_actual DESC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2336,
        3648
      ],
      "id": "e526f52c-584e-4a85-8b3d-071da18402ba",
      "name": "Execute a SQL query",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        736,
        4864
      ],
      "id": "c8a2e983-0d98-403b-926f-ca5e0e6d1836",
      "name": "anuncio_disponible"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  a.id AS id_anuncio,\n  a.titulo,\n  a.texto,\n  a.imagen_url,\n  a.enlace\nFROM usuarios u\nJOIN anuncios a ON\n  (a.pais_destino IS NULL OR a.pais_destino = '') AND\n  (a.moneda_destino IS NULL OR a.moneda_destino = u.moneda_defecto)\n  AND a.fecha_inicio <= CURRENT_TIMESTAMP\n  AND (a.fecha_fin IS NULL OR a.fecha_fin >= CURRENT_TIMESTAMP)\nWHERE NOT EXISTS (\n  SELECT 1 FROM anuncios_usuarios au\n  WHERE au.id_usuario = u.id AND au.id_anuncio = a.id\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        960,
        4864
      ],
      "id": "7616be24-df8c-4801-9d21-d2c119db44db",
      "name": "Execute a SQL query1",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH transacciones_semana AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    t.descripcion,\n    t.fecha_transaccion,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n     t.fecha_transaccion >= CURRENT_DATE - INTERVAL '7 days'\n),\ningresos_gastos AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS total_ingresos,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS total_gastos\n  FROM transacciones_semana\n  GROUP BY id_usuario\n),\ncategorias_top_gasto AS (\n  SELECT \n    id_usuario,\n    categoria,\n    SUM(monto) AS total_categoria\n  FROM transacciones_semana\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario, categoria\n),\ndetalle_metas_activas AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'nombre', nombre,\n        'monto_objetivo', monto_objetivo,\n        'monto_actual', monto_actual,\n        'fecha_objetivo', fecha_objetivo\n      ) ORDER BY fecha_objetivo\n    ) AS metas_ahorro_activas\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\n\n  \ntop_categorias_detalle AS (\n  SELECT id_usuario, categoria, total_categoria\n  FROM (\n    SELECT \n      id_usuario, \n      categoria, \n      total_categoria,\n      ROW_NUMBER() OVER (PARTITION BY id_usuario ORDER BY total_categoria DESC) AS rn\n    FROM categorias_top_gasto\n  ) sub\n  WHERE rn <= 3\n),\ntop_suscripciones_detalle AS (\n  SELECT \n    id_usuario,\n    json_agg(json_build_object(\n      'nombre', nombre,\n      'monto', monto,\n      'frecuencia', frecuencia,\n      'fecha_proximo_pago', fecha_proximo_pago\n    ) ORDER BY monto DESC) AS detalle_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\ntotal_suscripciones AS (\n  SELECT \n    id_usuario,\n    SUM(monto) AS total_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND date_part('month', fecha_proximo_pago) = date_part('month', CURRENT_DATE)\n    AND date_part('year', fecha_proximo_pago) = date_part('year', CURRENT_DATE)\n  GROUP BY id_usuario\n),\nahorros_semana AS (\n  SELECT \n    id_usuario,\n    SUM(monto_actual) AS total_ahorrado\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ndetalle_transacciones AS (\n  SELECT \n    id_usuario,\n    json_build_object(\n      'ingresos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_semana\n        WHERE tipo = 'Ingreso' AND transacciones_semana.id_usuario = t.id_usuario\n      ),\n      'gastos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_semana\n        WHERE tipo = 'Gasto' AND transacciones_semana.id_usuario = t.id_usuario\n      )\n    ) AS transacciones\n  FROM transacciones_semana t\n  GROUP BY id_usuario\n),\n\ndetalle_top_categorias AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total_categoria\n      ) ORDER BY total_categoria DESC\n    ) AS categorias_top\n  FROM top_categorias_detalle\n  GROUP BY id_usuario\n), \n  \n  resumen_semana_pasada AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS ingresos_semana_pasada,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS gastos_semana_pasada\n  FROM transacciones\n  WHERE \n    fecha_transaccion >= CURRENT_DATE - INTERVAL '14 days'\n    AND fecha_transaccion < CURRENT_DATE - INTERVAL '7 days'\n  GROUP BY id_usuario\n)\n\n\nSELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda_defecto,\n  \n  -- Totales\n  COALESCE(ig.total_ingresos, 0) AS total_ingresos,\n  COALESCE(ig.total_gastos, 0) AS total_gastos,\n  COALESCE(ig.total_ingresos, 0) - COALESCE(ig.total_gastos, 0) AS saldo_actual,\n  COALESCE(ts.total_suscripciones, 0) AS total_suscripciones_activas,\n  COALESCE(am.total_ahorrado, 0) AS total_ahorrado_en_metas_activas,\n  \n  -- Detalles enriquecidos\n  COALESCE(tc.categorias_top, '[]') AS top_categorias_gasto,\n  COALESCE(sd.detalle_suscripciones, '[]') AS top_suscripciones_activas,\n  COALESCE(dt.transacciones, '[]') AS detalle_transacciones,\n  COALESCE(ma.metas_ahorro_activas, '[]') AS detalle_metas_ahorro_activas,\n  COALESCE(rsp.ingresos_semana_pasada, 0) AS ingresos_semana_pasada,\n  COALESCE(rsp.gastos_semana_pasada, 0) AS gastos_semana_pasada\n\n\nFROM usuarios u\nLEFT JOIN ingresos_gastos ig ON u.id = ig.id_usuario\nLEFT JOIN total_suscripciones ts ON u.id = ts.id_usuario\nLEFT JOIN ahorros_semana am ON u.id = am.id_usuario\nLEFT JOIN detalle_top_categorias tc ON u.id = tc.id_usuario\nLEFT JOIN top_suscripciones_detalle sd ON u.id = sd.id_usuario\nLEFT JOIN detalle_transacciones dt ON u.id = dt.id_usuario\nLEFT JOIN detalle_metas_activas ma ON u.id = ma.id_usuario\nLEFT JOIN resumen_semana_pasada rsp ON u.id = rsp.id_usuario\n\n\n\nORDER BY saldo_actual DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2336,
        3488
      ],
      "id": "9b9e4cd6-b9ad-4656-92f2-29c60affd9ee",
      "name": "Execute a SQL query2",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  c.nombre AS categoria,\n  c.presupuesto_mensual,\n  COALESCE(SUM(t.monto), 0) AS gasto_actual,\n  (COALESCE(SUM(t.monto), 0) / c.presupuesto_mensual) * 100 AS porcentaje_usado\nFROM usuarios u\nJOIN categorias c ON c.id_usuario = u.id\nLEFT JOIN transacciones t ON t.id_usuario = u.id AND t.id_categoria = c.id\n  AND t.tipo = 'Gasto' AND date_trunc('month', t.fecha_transaccion) = date_trunc('month', CURRENT_DATE)\nWHERE c.presupuesto_mensual IS NOT NULL AND c.presupuesto_mensual > 0\nGROUP BY u.id, u.nombre_completo, u.numero_whatsapp, c.nombre, c.presupuesto_mensual\nHAVING (COALESCE(SUM(t.monto), 0) / c.presupuesto_mensual) >= 0.8;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3872,
        3312
      ],
      "id": "990283be-0347-499b-95b3-c90324638d31",
      "name": "Execute a SQL query3",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  s.nombre AS nombre_suscripcion,\n  s.fecha_proximo_pago,\n  s.monto,\n  s.moneda\nFROM usuarios u\nJOIN suscripciones_usuario s ON s.id_usuario = u.id\nWHERE s.activa = TRUE\n  AND s.fecha_proximo_pago = CURRENT_DATE + INTERVAL '1 day';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3872,
        3632
      ],
      "id": "1cedeb4a-773a-44da-ae74-ac25f1299b74",
      "name": "Execute a SQL query4",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  COUNT(t.id) AS total_transacciones,\n  SUM(CASE WHEN t.tipo = 'Gasto' THEN t.monto ELSE 0 END) AS total_gastos,\n  SUM(CASE WHEN t.tipo = 'Ingreso' THEN t.monto ELSE 0 END) AS total_ingresos\nFROM usuarios u\nJOIN transacciones t ON t.id_usuario = u.id\nWHERE t.fecha_transaccion >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY u.id, u.nombre_completo, u.numero_whatsapp;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1664,
        4912
      ],
      "id": "8c78fb39-ecfc-44ff-bb9a-2037ea4f51ae",
      "name": "Execute a SQL query5",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  m.id AS id_meta,\n  m.nombre AS nombre_meta,\n  m.monto_objetivo,\n  m.monto_actual,\n  m.fecha_objetivo,\n  m.fecha_creacion,\n  ROUND(\n    EXTRACT(EPOCH FROM (CURRENT_DATE - m.fecha_creacion)) /\n    EXTRACT(EPOCH FROM (m.fecha_objetivo - m.fecha_creacion)) * 100, 2\n  ) AS porcentaje_esperado,\n  ROUND((m.monto_actual / m.monto_objetivo) * 100, 2) AS porcentaje_actual\nFROM usuarios u\nJOIN metas_ahorro m ON m.id_usuario = u.id\nWHERE m.estado = 'activa'\n  AND CURRENT_DATE < m.fecha_objetivo\n  AND m.monto_objetivo > 0\n  AND (m.monto_actual / m.monto_objetivo) < \n      (\n        EXTRACT(EPOCH FROM (CURRENT_DATE - m.fecha_creacion)) /\n        EXTRACT(EPOCH FROM (m.fecha_objetivo - m.fecha_creacion)) - 0.2\n      );\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        3872,
        3472
      ],
      "id": "39210825-0cd8-45b1-8a31-d418617eeb22",
      "name": "Execute a SQL query6",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "content": "## trigger Messages\n",
        "height": 764,
        "width": 2912,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2048,
        3264
      ],
      "id": "955b8628-30bc-4896-8bec-616d27401a4d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2112,
        3488
      ],
      "id": "a46aa4d6-afe8-4847-98df-17d1cc157aad",
      "name": "resumen_semanal"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtDayOfMonth": 29,
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2112,
        3648
      ],
      "id": "9cfa6d04-1c6a-4876-be2b-883eb4a0e9f3",
      "name": "resumen_mensual"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "monthsInterval": 30,
              "triggerAtDayOfMonth": 29,
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        2112,
        3824
      ],
      "id": "81e31659-355f-4cc7-a3a8-a4a5d0cf921c",
      "name": "resumen_trimestral"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH transacciones_trimestre AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    t.descripcion,\n    t.fecha_transaccion,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    t.fecha_transaccion >= date_trunc('quarter', CURRENT_DATE)\n    AND t.fecha_transaccion < date_trunc('quarter', CURRENT_DATE) + INTERVAL '3 months'\n),\ningresos_gastos AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS total_ingresos,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS total_gastos\n  FROM transacciones_trimestre\n  GROUP BY id_usuario\n),\ncategorias_top_gasto AS (\n  SELECT \n    id_usuario,\n    categoria,\n    SUM(monto) AS total_categoria\n  FROM transacciones_trimestre\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario, categoria\n),\ndetalle_metas_activas AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'nombre', nombre,\n        'monto_objetivo', monto_objetivo,\n        'monto_actual', monto_actual,\n        'fecha_objetivo', fecha_objetivo\n      ) ORDER BY fecha_objetivo\n    ) AS metas_ahorro_activas\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ntop_categorias_detalle AS (\n  SELECT id_usuario, categoria, total_categoria\n  FROM (\n    SELECT \n      id_usuario, \n      categoria, \n      total_categoria,\n      ROW_NUMBER() OVER (PARTITION BY id_usuario ORDER BY total_categoria DESC) AS rn\n    FROM categorias_top_gasto\n  ) sub\n  WHERE rn <= 3\n),\ntop_suscripciones_detalle AS (\n  SELECT \n    id_usuario,\n    json_agg(json_build_object(\n      'nombre', nombre,\n      'monto', monto,\n      'frecuencia', frecuencia,\n      'fecha_proximo_pago', fecha_proximo_pago\n    ) ORDER BY monto DESC) AS detalle_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND fecha_proximo_pago >= date_trunc('quarter', CURRENT_DATE)\n    AND fecha_proximo_pago < date_trunc('quarter', CURRENT_DATE) + INTERVAL '3 months'\n  GROUP BY id_usuario\n),\ntotal_suscripciones AS (\n  SELECT \n    id_usuario,\n    SUM(monto) AS total_suscripciones\n  FROM suscripciones_usuario\n  WHERE activa = TRUE\n    AND fecha_proximo_pago >= date_trunc('quarter', CURRENT_DATE)\n    AND fecha_proximo_pago < date_trunc('quarter', CURRENT_DATE) + INTERVAL '3 months'\n  GROUP BY id_usuario\n),\nahorros_trimestre AS (\n  SELECT \n    id_usuario,\n    SUM(monto_actual) AS total_ahorrado\n  FROM metas_ahorro\n  WHERE estado = 'activa'\n  GROUP BY id_usuario\n),\ndetalle_transacciones AS (\n  SELECT \n    id_usuario,\n    json_build_object(\n      'ingresos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_trimestre\n        WHERE tipo = 'Ingreso' AND transacciones_trimestre.id_usuario = t.id_usuario\n      ),\n      'gastos', (\n        SELECT json_agg(\n          json_build_object(\n            'monto', monto,\n            'categoria', categoria,\n            'descripcion', descripcion,\n            'fecha', fecha_transaccion\n          ) ORDER BY fecha_transaccion DESC\n        )\n        FROM transacciones_trimestre\n        WHERE tipo = 'Gasto' AND transacciones_trimestre.id_usuario = t.id_usuario\n      )\n    ) AS transacciones\n  FROM transacciones_trimestre t\n  GROUP BY id_usuario\n),\ndetalle_top_categorias AS (\n  SELECT \n    id_usuario,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total_categoria\n      ) ORDER BY total_categoria DESC\n    ) AS categorias_top\n  FROM top_categorias_detalle\n  GROUP BY id_usuario\n),\n-- Trimestre PASADO\ntransacciones_trimestre_pasado AS (\n  SELECT \n    t.id_usuario,\n    t.tipo,\n    t.monto,\n    c.nombre AS categoria\n  FROM transacciones t\n  LEFT JOIN categorias c ON t.id_categoria = c.id\n  WHERE \n    t.fecha_transaccion >= date_trunc('quarter', CURRENT_DATE - INTERVAL '3 months')\n    AND t.fecha_transaccion < date_trunc('quarter', CURRENT_DATE)\n),\nresumen_trimestre_pasado AS (\n  SELECT \n    id_usuario,\n    SUM(CASE WHEN tipo = 'Ingreso' THEN monto ELSE 0 END) AS ingresos_trimestre_pasado,\n    SUM(CASE WHEN tipo = 'Gasto' THEN monto ELSE 0 END) AS gastos_trimestre_pasado\n  FROM transacciones_trimestre_pasado\n  GROUP BY id_usuario\n),\ncategorias_trimestre_pasado AS (\n  SELECT \n    id_usuario,\n    tipo,\n    categoria,\n    SUM(monto) AS total\n  FROM transacciones_trimestre_pasado\n  GROUP BY id_usuario, tipo, categoria\n),\ndetalle_categorias_trimestre_pasado_ingreso AS (\n  SELECT \n    id_usuario,\n    'Ingreso'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_trimestre_pasado\n  WHERE tipo = 'Ingreso'\n  GROUP BY id_usuario\n),\ndetalle_categorias_trimestre_pasado_gasto AS (\n  SELECT \n    id_usuario,\n    'Gasto'::text AS tipo,\n    json_agg(\n      json_build_object(\n        'categoria', categoria,\n        'monto', total\n      ) ORDER BY total DESC\n    ) AS detalle\n  FROM categorias_trimestre_pasado\n  WHERE tipo = 'Gasto'\n  GROUP BY id_usuario\n),\ndetalle_categorias_trimestre_pasado AS (\n  SELECT \n    id_usuario,\n    json_object_agg(tipo, detalle) AS categorias_trimestre_pasado\n  FROM (\n    SELECT * FROM detalle_categorias_trimestre_pasado_ingreso\n    UNION ALL\n    SELECT * FROM detalle_categorias_trimestre_pasado_gasto\n  ) sub\n  GROUP BY id_usuario\n)\n\n-- FINAL\nSELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda_defecto,\n  \n  -- Totales\n  COALESCE(ig.total_ingresos, 0) AS total_ingresos,\n  COALESCE(ig.total_gastos, 0) AS total_gastos,\n  COALESCE(ig.total_ingresos, 0) - COALESCE(ig.total_gastos, 0) AS saldo_actual,\n  COALESCE(ts.total_suscripciones, 0) AS total_suscripciones_activas,\n  COALESCE(am.total_ahorrado, 0) AS total_ahorrado_en_metas_activas,\n  \n  -- Detalles enriquecidos\n  COALESCE(tc.categorias_top, '[]') AS top_categorias_gasto,\n  COALESCE(sd.detalle_suscripciones, '[]') AS top_suscripciones_activas,\n  COALESCE(dt.transacciones, '[]') AS detalle_transacciones,\n  COALESCE(ma.metas_ahorro_activas, '[]') AS detalle_metas_ahorro_activas,\n\n  -- Totales del trimestre anterior\n  COALESCE(rmp.ingresos_trimestre_pasado, 0) AS ingresos_trimestre_pasado,\n  COALESCE(rmp.gastos_trimestre_pasado, 0) AS gastos_trimestre_pasado,\n\n  -- Detalles por categoría del trimestre anterior\n  COALESCE(dcmp.categorias_trimestre_pasado, '{}') AS categorias_trimestre_pasado\n\nFROM usuarios u\nLEFT JOIN ingresos_gastos ig ON u.id = ig.id_usuario\nLEFT JOIN total_suscripciones ts ON u.id = ts.id_usuario\nLEFT JOIN ahorros_trimestre am ON u.id = am.id_usuario\nLEFT JOIN detalle_top_categorias tc ON u.id = tc.id_usuario\nLEFT JOIN top_suscripciones_detalle sd ON u.id = sd.id_usuario\nLEFT JOIN detalle_transacciones dt ON u.id = dt.id_usuario\nLEFT JOIN detalle_metas_activas ma ON u.id = ma.id_usuario\nLEFT JOIN resumen_trimestre_pasado rmp ON u.id = rmp.id_usuario\nLEFT JOIN detalle_categorias_trimestre_pasado dcmp ON u.id = dcmp.id_usuario\n\nORDER BY saldo_actual DESC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2336,
        3824
      ],
      "id": "20769197-aaea-40ec-af5e-e475ff5eaae5",
      "name": "resumen_trimestral1",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  u.id AS id_usuario,\n  u.nombre_completo,\n  u.numero_whatsapp,\n  u.moneda_defecto,\n\n  -- Transacciones de HOY agrupadas por tipo\n  jsonb_build_object(\n    'Ingreso', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Ingreso' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Ingreso'),\n    'Gasto', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Gasto' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE AND t.tipo = 'Gasto')\n  ) AS transacciones_hoy,\n\n  -- Transacciones de AYER agrupadas por tipo\n  jsonb_build_object(\n    'Ingreso', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Ingreso' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Ingreso'),\n    'Gasto', jsonb_agg(\n      CASE \n        WHEN t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Gasto' THEN\n          jsonb_build_object(\n            'id', t.id,\n            'descripcion', t.descripcion,\n            'monto', t.monto,\n            'moneda', t.moneda,\n            'fecha', t.fecha_transaccion,\n            'categoria', c.nombre,\n            'fuente', f.nombre\n          )\n        ELSE NULL\n      END\n    ) FILTER (WHERE t.fecha_transaccion = CURRENT_DATE - INTERVAL '1 day' AND t.tipo = 'Gasto')\n  ) AS transacciones_ayer\n\nFROM transacciones t\nLEFT JOIN categorias c ON t.id_categoria = c.id\nLEFT JOIN fuentes_registro f ON t.id_fuente = f.id\nLEFT JOIN usuarios u ON u.id = t.id_usuario\nWHERE \n  t.fecha_transaccion IN (CURRENT_DATE, CURRENT_DATE - INTERVAL '1 day')\nGROUP BY u.id, u.nombre_completo, u.numero_whatsapp, u.moneda_defecto\nORDER BY u.id;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2336,
        3328
      ],
      "id": "e1f59a2c-1f5f-45d7-b06e-700e2006932c",
      "name": "Execute a SQL query7",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtDayOfMonth": 28,
              "triggerAtHour": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        3648,
        3312
      ],
      "id": "53d964d8-1631-4f56-910c-bba2e3ce59c4",
      "name": "alerta_presupuesto"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        3648,
        3472
      ],
      "id": "e84f72e2-9ab4-4732-a52f-93fc49d2bf3e",
      "name": "meta_en_riesgo"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        3648,
        3632
      ],
      "id": "6c99f197-0ad2-49c9-8f01-53e1f5403ddc",
      "name": "recordatorio_suscripcion"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Recupera todas las transacciones del usuario en un período de tiempo definido. El intervalo de tiempo debe proporcionarse como una cadena compatible con PostgreSQL, como '7 days', '1 month', '90 days', etc. Filtra las transacciones por la fecha (fecha_transaccion) y devuelve los resultados ordenados de más reciente a más antiguo. Incluye información de la categoría y la fuente asociada a cada transacción.\n\nUsa la variable interval para definir el rango de fechas que quieres consultar, por ejemplo:\n'7 days' → últimos 7 días\n'1 month' → último mes\n'3 months' → últimos 3 meses",
        "operation": "executeQuery",
        "query": "SELECT \n  jsonb_build_object(\n    'id', t.id,\n    'descripcion', t.descripcion,\n    'monto', t.monto,\n    'moneda', t.moneda,\n    'tipo', t.tipo,\n    'fecha', t.fecha_transaccion,\n    'categoria', c.nombre,\n    'fuente', f.nombre\n  ) AS transaccion\nFROM transacciones t\nLEFT JOIN categorias c ON t.id_categoria = c.id\nLEFT JOIN fuentes_registro f ON t.id_fuente = f.id\nWHERE \n  t.id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario dueño de las transacciones`, \"string\") }}'\n  AND t.fecha_transaccion >= CURRENT_DATE - INTERVAL '{{ $fromAI(\"interval\", `intervalo de tiempo a analizar como '7 days', '1 month' o '90 days'`, \"string\") }}'\nORDER BY t.fecha_transaccion DESC;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3072,
        4400
      ],
      "id": "cafc4911-cf41-446e-96a2-2b6b53ce3598",
      "name": "query_transactions",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Consulta el estado de las metas de ahorro activas del usuario",
        "operation": "executeQuery",
        "query": "SELECT \n  nombre, \n  monto_objetivo, \n  monto_actual, \n  fecha_objetivo \nFROM metas_ahorro\nWHERE \n  id_usuario = {{ $fromAI(\"id_usuario\", `ID del usuario que tiene metas de ahorro activas`, \"string\") }} \n  AND estado = 'activa'\nORDER BY fecha_objetivo ASC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3456,
        4400
      ],
      "id": "f74051fb-c791-452c-95c4-63100200df23",
      "name": "get_saving_goals",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Consulta los presupuestos establecidos por el usuario para sus categorías.",
        "operation": "executeQuery",
        "query": "SELECT nombre, presupuesto_mensual FROM categorias\nWHERE id_usuario = {{ $fromAI(\"id_usuario\", `ID del usuario`, \"string\") }} AND presupuesto_mensual IS NOT NULL AND tipo = 'Gasto';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3200,
        4400
      ],
      "id": "d9bfc2d7-aeb3-41a4-8c7c-b80ebcdc3b3e",
      "name": "get_category_budgets",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Registra una nueva suscripción o gasto recurrente del usuario, como Netflix o el gimnasio",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "suscripciones_usuario",
          "mode": "list",
          "cachedResultName": "suscripciones_usuario"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "activa": true,
            "id_usuario": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_usuario', ``, 'string') }}",
            "nombre": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('nombre', `Nombre de la subscripcion`, 'string') }}",
            "monto": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('monto', ``, 'number') }}",
            "moneda": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('moneda', ``, 'string') }}",
            "frecuencia": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('frecuencia', ``, 'string') }}",
            "fecha_proximo_pago": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('fecha_proximo_pago', ``, 'string') }}",
            "id_categoria": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('id_categoria', `id de la categoria que se registra la subscripcion`, 'number') }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "id_usuario",
              "displayName": "id_usuario",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "nombre",
              "displayName": "nombre",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "monto",
              "displayName": "monto",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "moneda",
              "displayName": "moneda",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "frecuencia",
              "displayName": "frecuencia",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "fecha_proximo_pago",
              "displayName": "fecha_proximo_pago",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "id_categoria",
              "displayName": "id_categoria",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "activa",
              "displayName": "activa",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        3328,
        4400
      ],
      "id": "a9f57d07-d104-4280-8d58-7397a2978b58",
      "name": "add_user_subscription",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Analiza los gastos de un período para identificar las 2 categorías con mayor gasto y los 'gastos hormiga' (transacciones pequeñas y frecuentes en una misma categoría).",
        "operation": "executeQuery",
        "query": "-- Consulta 1: Top Categoría de Gasto\nSELECT c.nombre, SUM(t.monto) as total_gastado\nFROM transacciones t\nJOIN categorias c ON t.id_categoria = c.id\nWHERE t.id_usuario = :id_usuario AND t.tipo = 'Gasto' AND t.fecha_transaccion BETWEEN :start_date AND :end_date\nGROUP BY c.nombre\nORDER BY total_gastado DESC\nLIMIT 2;\n\n-- Consulta 2: Detección de Gastos Hormiga (ej: más de 5 transacciones menores a $20.000 COP)\nSELECT c.nombre, COUNT(t.id) as numero_transacciones, SUM(t.monto) as total_gastado\nFROM transacciones t\nJOIN categorias c ON t.id_categoria = c.id\nWHERE t.id_usuario = '{{ $fromAI(\"id_usuario\", `ID del usuario dueño de las transacciones`, \"string\") }}' AND t.tipo = 'Gasto' AND t.monto < 20000 AND t.fecha_transaccion BETWEEN {{ $fromAI('start_date', ``, 'string') }} AND {{ $fromAI('end_date', ``, 'string') }}\nGROUP BY c.nombre\nHAVING COUNT(t.id) > 5\nORDER BY total_gastado DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        2944,
        4400
      ],
      "id": "d7e8bc34-55df-477c-bad9-c34cbeb3ab62",
      "name": "analyze_spending_habits",
      "credentials": {
        "postgres": {
          "id": "3BmLjpi7AvK0Sx6n",
          "name": "MONY_DB"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen-financiero-hoy",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2544,
        3328
      ],
      "id": "42f408d0-8df7-4148-a81c-3183355f1c79",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen_semanal",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2544,
        3488
      ],
      "id": "13384383-357f-42c0-ac56-f4bb8e9d066e",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen_mensual",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2544,
        3648
      ],
      "id": "6965e033-7117-46d0-b32d-087ac2678c0b",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "resumen_trimestral",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2544,
        3824
      ],
      "id": "7907e240-f7a0-4e14-9ffe-030bbfd51771",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "alerta_presupuesto",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4048,
        3312
      ],
      "id": "1d3a9d2a-5955-495b-8645-5b6dc40265b3",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "meta_en_riesgo",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4064,
        3472
      ],
      "id": "da4d1c30-6539-4fab-abda-15523d006882",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "63d51d73-25a6-482a-aef2-0f106488d6ec",
              "name": "trigger_type",
              "value": "recordatorio_suscripcion",
              "type": "string"
            },
            {
              "id": "186f3a47-779a-4d32-a419-46bd14186b9b",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4064,
        3632
      ],
      "id": "59c9f04e-f4ba-4bd7-9293-c889369ecc21",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b7bbf55f-ad9e-4b40-9825-c07c3861efa3",
              "name": "trigger_data",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "ee72c582-17c1-4ca0-84ba-dde0d82420d7",
              "name": "numero_whatsapp",
              "value": "={{ $json.data.numero_whatsapp }}",
              "type": "string"
            },
            {
              "id": "7a8ebe2d-134e-46c8-ad91-6ac0f49d7b66",
              "name": "user_data",
              "value": "{}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2848,
        3520
      ],
      "id": "6d5c6f0b-0b6c-468f-b94d-4e5a9da02bdb",
      "name": "Edit Fields7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ed58c0b-89ba-4433-999e-022006738f07",
              "name": "user_data",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "9a07e76c-e432-4c95-bd2e-a3f4074601ba",
              "name": "numero_whatsapp",
              "value": "={{ $json.numero_whatsapp }}",
              "type": "string"
            },
            {
              "id": "4ce2c581-f440-467a-81d0-fbead2eab3d3",
              "name": "trigger_data",
              "value": "{}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4080,
        3808
      ],
      "id": "4999cf04-48ce-4134-842b-92bc8f88cfaf",
      "name": "Edit Fields8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b89d5418-df60-419b-84f6-5bc7bc0dd09b",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "string"
            },
            {
              "id": "f312aa42-4354-4954-92ff-9549a49c1d5b",
              "name": "numero_whatsapp",
              "value": "={{ $json.user_id }}",
              "type": "string"
            },
            {
              "id": "4e6ed31c-2d8f-4415-bdaf-404a870f1cc2",
              "name": "first_name",
              "value": "={{ $json.first_name }}",
              "type": "string"
            },
            {
              "id": "f6c89644-22bf-403a-9b24-3753bf6b1220",
              "name": "usuario_data",
              "value": "={{ $json.usuario_data }}",
              "type": "object"
            },
            {
              "id": "d221f439-15a2-4e22-8648-f3a4e5786bef",
              "name": "redis_message",
              "value": "={{ $json.redis_message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3872,
        3808
      ],
      "id": "5dd4e062-ee35-463c-94e2-44ceef199946",
      "name": "user_data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c88f04f6-a8d2-4aa4-96fb-8f8f3eb10157",
              "name": "numero_whatsapp",
              "value": "={{ $json.numero_whatsapp }}",
              "type": "string"
            },
            {
              "id": "10777f56-93d5-42e4-90db-118df3530d63",
              "name": "trigger_data",
              "value": "={{ $json.trigger_data }}",
              "type": "object"
            },
            {
              "id": "bf8d37c4-325b-4bd2-ba02-5541cf39e0ba",
              "name": "user_data",
              "value": "={{ $json.user_data }}",
              "type": "object"
            },
            {
              "id": "0a45395c-222f-4a50-8d9d-94ca53288077",
              "name": "metadata.phone_number_id",
              "value": "565888133266017",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2432,
        4160
      ],
      "id": "d650da0c-84a7-419c-84fd-d6a69a3ac3e4",
      "name": "Data"
    }
  ],
  "pinData": {},
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:resumen-financiero-hoy": {
      "recurrenceRules": []
    },
    "node:anuncio_disponible": {
      "recurrenceRules": []
    },
    "node:resumen_semanal": {
      "recurrenceRules": []
    },
    "node:resumen_mensual": {
      "recurrenceRules": []
    },
    "node:resumen_trimestral": {
      "recurrenceRules": []
    },
    "node:alerta_presupuesto": {
      "recurrenceRules": []
    },
    "node:meta_en_riesgo": {
      "recurrenceRules": []
    },
    "node:recordatorio_suscripcion": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 8,
  "updatedAt": "2025-08-07T21:33:52.928Z",
  "versionId": "1dcea48c-25d8-4228-b520-9b7aca3e9915"
}