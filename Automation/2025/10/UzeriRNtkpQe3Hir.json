{
  "active": false,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Expand Languages & Sanitize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Expand Languages & Sanitize": {
      "main": [
        []
      ]
    },
    "Get many products1": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "caucho4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items4": {
      "main": [
        [
          {
            "node": "Edit Fields13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "caucho4": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Edit Fields14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create product4": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update product4": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields9": {
      "main": [
        [
          {
            "node": "Wait14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Products4": {
      "main": [
        [
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields13": {
      "main": [
        [
          {
            "node": "Get Products5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields14": {
      "main": [
        [
          {
            "node": "Wait13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait12": {
      "main": [
        [
          {
            "node": "Get Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait13": {
      "main": [
        [
          {
            "node": "create product4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait14": {
      "main": [
        [
          {
            "node": "update product4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out5": {
      "main": [
        [
          {
            "node": "caucho5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "caucho5": {
      "main": [
        [
          {
            "node": "Wait15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request5": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Edit Fields17",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create product5": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update product5": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields15": {
      "main": [
        [
          {
            "node": "Wait17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Products5": {
      "main": [
        [
          {
            "node": "Split Out5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields16": {
      "main": [
        [
          {
            "node": "Get Products5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields17": {
      "main": [
        [
          {
            "node": "Wait16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait15": {
      "main": [
        [
          {
            "node": "Get Token2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait16": {
      "main": [
        [
          {
            "node": "create product5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait17": {
      "main": [
        [
          {
            "node": "update product5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get ML products": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Get row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s)": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Orders",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "refresh token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Orders": {
      "main": [
        [
          {
            "node": "Get list of contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get list of contacts": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Create new contacts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new contacts": {
      "main": [
        [
          {
            "node": "Create new leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new leads": {
      "main": [
        [
          {
            "node": "Set data order",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orden_items": {
      "main": [
        [
          {
            "node": "Create new notes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data order": {
      "main": [
        [
          {
            "node": "orden_items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "refresh token": {
      "main": [
        [
          {
            "node": "Update row(s)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new leads1": {
      "main": [
        [
          {
            "node": "Set data order1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orden_items1": {
      "main": [
        [
          {
            "node": "Create new notes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data order1": {
      "main": [
        [
          {
            "node": "orden_items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update contacts": {
      "main": [
        [
          {
            "node": "Get list of leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get list of leads": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Create new leads1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update leads",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orden_items2": {
      "main": [
        [
          {
            "node": "Create new notes2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data order2": {
      "main": [
        [
          {
            "node": "orden_items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update leads": {
      "main": [
        [
          {
            "node": "Set data order2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Orders1": {
      "main": [
        [
          {
            "node": "Get list of contacts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get list of contacts1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Create new contacts1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update contacts1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new contacts1": {
      "main": [
        [
          {
            "node": "Create new leads2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new leads2": {
      "main": [
        [
          {
            "node": "Set data order3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orden_items3": {
      "main": [
        [
          {
            "node": "Create new notes3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data order3": {
      "main": [
        [
          {
            "node": "orden_items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new leads3": {
      "main": [
        [
          {
            "node": "Set data order4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orden_items4": {
      "main": [
        [
          {
            "node": "Create new notes4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data order4": {
      "main": [
        [
          {
            "node": "orden_items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update contacts1": {
      "main": [
        [
          {
            "node": "Get list of leads1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get list of leads1": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Create new leads3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update leads1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "orden_items5": {
      "main": [
        [
          {
            "node": "Create new notes5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set data order5": {
      "main": [
        [
          {
            "node": "orden_items5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update leads1": {
      "main": [
        [
          {
            "node": "Set data order5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row(s)": {
      "main": [
        [
          {
            "node": "Get Orders1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Token": {
      "main": [
        [
          {
            "node": "get ML products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Token2": {
      "main": [
        [
          {
            "node": "HTTP Request5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Products": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Products6": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields18": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If8": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Edit Fields18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get Products6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Products1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-07T20:01:05.857Z",
  "id": "UzeriRNtkpQe3Hir",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Shopify AI Product Description Generation & Translation",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -3088,
        5584
      ],
      "id": "8c3c8402-afc3-4b42-8229-6b02cc82f5dd",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "models/gemini-2.5-flash-lite",
          "cachedResultName": "models/gemini-2.5-flash-lite"
        },
        "text": "=Analyze the provided image and return an objective, clear, and detailed description of the product shown.\n\nRequirements:\n\nFocus only on the main product (ignore background or decorations).\n\nDescribe only what is visible and verifiable in the image.\n\nInclude details about:\n\nProduct type (shoe, bag, cap, t-shirt).\n\nApparent materials (leather, fabric, canvas, knit, etc.).\n\nMain and secondary colors.\n\nVisible patterns or prints (plain, stripes, logos, embroidery).\n\nDistinctive elements (closure, laces, buckles, pockets, stitching, sole).\n\nUse a descriptive and neutral tone:\n\nExamples: “smooth finish”, “with top closure”, “with visible stitching”.\n\nDo not invent information that is not visible in the image (do not assume size, brand, comfort, or usage).\n\nWrite the answer in a short and concise paragraph (3–5 sentences).",
        "imageUrls": "={{ $json.images[0].src }}",
        "options": {}
      },
      "id": "62f38c2b-57a4-470d-a545-b7376668e08c",
      "name": "Analyze image",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        -3120,
        2320
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "kuAijbcGhZkbdIR2",
          "name": "whitelabel mony"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=AI Generated Vision Description of Product: Analyze the image at the URL: {{ $('Get many products1').item.json.images[0].src }}\n\nBrand: {{ $('Get many products1').item.json.vendor }}\nProduct Name: {{ $('Get many products1').item.json.title }}\nUser Provided Description: {{ $('Get many products1').item.json.body_html }}\nProduct Type: {{ $('Get many products1').item.json.product_type }}\n\nVision Description: {{ $json.content.parts[0].text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=<system_prompt>\nYOU ARE A PROFESSIONAL MULTILINGUAL E-COMMERCE COPYWRITING AI FOR FOOTWEAR. GENERATE PRODUCT COPY FOR **ES, DE, EN, FR, IT, PT**.\n\nSOURCES (priority):\n1) Product name → category/keywords/core attributes.  \n2) User draft → tone and context.  \n3) Vision description (analyzed) → visible traits (apparent materials, colors, finishes, sole, closure).  \n\nGENERAL RULES & ANTI-HALLUCINATION:  \n- Do not invent technologies, materials, sizes, or brand if not provided in the sources.  \n- Professional online shoe store tone; conversion-oriented, without exaggerations.  \n- HTML allowed ONLY in `shopify_description`: <div>, <h2>, <h3>, <p>, <ul>, <ol>, <li>, <strong>, <em>, <br>. No <script>, no inline styles, no tables.  \n- Intro paragraph + 3–6 bullets max; titles ≤ 80 characters.  \n- Do not include SKU, locator, or other internal metadata.  \n\nFOOTWEAR TERMINOLOGY (apply per language):  \n- **DE**: Sneaker / Turnschuh, Obermaterial (tige / upper), Sohle / Außensohle, Schnürung / Klettverschluss, Stiefel (boots), Sandalen, Slipper.  \n- **EN**: sneaker / shoe, upper, outsole, lace-up / closure, boots, sandals, espadrilles, dress shoes, casual shoes, slip-ons.  \n- **FR**: basket / chaussure, tige, semelle extérieure, lacets / fermeture, bottes, sandales, espadrilles, chaussures habillées, souliers, mules.  \n- **IT**: sneaker / scarpa, tomaia, suola / suola esterna, chiusura / lacci, stivali, sandali, espadrillas, scarpe eleganti, ballerine, sabot.  \n- **PT**: ténis / sapato, cabedal, sola / sola exterior, fecho / atacadores, botas, sandálias, alpargatas, sapatos de vestir, mocassins, chinelos.  \n\nHANDLES/SLUGS PER LANGUAGE:  \n- Lowercase; words separated with `-`; no symbols; normalize accents.  \n- DE: ä→ae, ö→oe, ü→ue, ß→ss; FR/IT/PT: remove diacritics; ES: á→a, é→e, í→i, ó→o, ú→u, ñ→n.  \n- Max. 80 characters. Avoid repeating the brand in the handle unless it is part of the product name.  \n\nSTRICT OUTPUT FORMAT (mandatory):  \n\nReturn **exclusively** a JSON object with no text before or after.  \nDo not wrap the response inside any other key (e.g. do not use \"output\" or similar).  \nThe root object must contain exactly 6 keys: es, de, en, fr, it, pt.  \nEach language must include exactly 3 keys: shopify_product_name, shopify_description, handle.  \nUse double quotes for JSON. Inside HTML strings, use single quotes for attributes.  \nReturn the JSON minified on a single line (no line breaks, no Markdown).  \nIt is forbidden to use different keys (e.g. not \"shop_description\").  \nIf some data is missing, return an empty string, but always keep the key.  \n\nGOAL: RETURN **EXCLUSIVELY** THIS MULTILINGUAL JSON:\n{\n  \"es\": {\"shopify_product_name\": \"...\", \"shopify_description\": \"...\", \"handle\": \"...\"},\n  \"de\": {\"shopify_product_name\": \"...\", \"shopify_description\": \"...\", \"handle\": \"...\"},\n  \"en\": {\"shopify_product_name\": \"...\", \"shopify_description\": \"...\", \"handle\": \"...\"},\n  \"fr\": {\"shopify_product_name\": \"...\", \"shopify_description\": \"...\", \"handle\": \"...\"},\n  \"it\": {\"shopify_product_name\": \"...\", \"shopify_description\": \"...\", \"handle\": \"...\"},\n  \"pt\": {\"shopify_product_name\": \"...\", \"shopify_description\": \"...\", \"handle\": \"...\"}\n}\n</system_prompt>\n"
        }
      },
      "id": "8f2ba91f-a069-4f47-bbb6-2074f50e54f5",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -2896,
        2320
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-09-2025",
        "options": {
          "maxOutputTokens": 4048,
          "temperature": 0.4
        }
      },
      "id": "0dcdfd6e-baef-4d87-a0ea-6824a6ec6415",
      "name": "Google Gemini Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        -2896,
        2544
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "kuAijbcGhZkbdIR2",
          "name": "whitelabel mony"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"es\": {\"shopify_product_name\": \"\", \"shopify_description\": \"\", \"handle\": \"\"},\n  \"de\": {\"shopify_product_name\": \"\", \"shopify_description\": \"\", \"handle\": \"\"},\n  \"en\": {\"shopify_product_name\": \"\", \"shopify_description\": \"\", \"handle\": \"\"},\n  \"fr\": {\"shopify_product_name\": \"\", \"shopify_description\": \"\", \"handle\": \"\"},\n  \"it\": {\"shopify_product_name\": \"\", \"shopify_description\": \"\", \"handle\": \"\"},\n  \"pt\": {\"shopify_product_name\": \"\", \"shopify_description\": \"\", \"handle\": \"\"}\n}"
      },
      "id": "4ecbe833-c66e-452c-b627-755fe286d46e",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        -2768,
        2544
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "jsCode": "// Entrada: $json.output con claves es,de,en,fr,it,pt\nconst langs = ['es','de','en','fr','it','pt'];\n\nconst productId = $('Get many products1').first().json.id;\nconst handleES = $('Get many products1').first().json.handle\nconst items = [];\n$input.first().json.output.es\n\nfor (const lang of langs) {\nconst node = $input.first().json.output[lang];\nif (!node) continue;\nitems.push({\njson: {\nproduct_id: Number(productId),\nlang,\nhandle: node.handle,\nshopify_product_name: node.shopify_product_name,\nshopify_description: node.shopify_description,\n// Para comodidad, también retornamos los campos ES por si quieres compararlos\nbase_handle_es: handleES\n}\n});\n}\n\n\nreturn items;"
      },
      "id": "00823cc9-767a-484e-a3f2-749d554ff508",
      "name": "Expand Languages & Sanitize",
      "type": "n8n-nodes-base.code",
      "position": [
        -2544,
        2320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "authentication": "accessToken",
        "resource": "product",
        "operation": "getAll",
        "limit": 2,
        "additionalFields": {}
      },
      "id": "b597fc44-2492-46f3-8c37-3799106d7e63",
      "name": "Get many products1",
      "type": "n8n-nodes-base.shopify",
      "position": [
        -3344,
        2320
      ],
      "typeVersion": 1,
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ml",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -3344,
        4416
      ],
      "id": "f27e2b59-6e6e-4dd8-b17c-12172106d231",
      "name": "Webhook",
      "webhookId": "b670c147-2dde-406a-a7bc-9fa692c7978b"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mercadolibre.com/oauth/token",
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "authorization_code"
            },
            {
              "name": "client_id",
              "value": "7334627525708690"
            },
            {
              "name": "client_secret",
              "value": "Ne3ghVZguF8tkwL5Je4WYuiY2pzb7oOS"
            },
            {
              "name": "redirect_uri",
              "value": "https://automation.whitelabel.lat"
            },
            {
              "name": "code",
              "value": "TG-6904dc86dc8daf0001ef47c6-1020861397"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3344,
        1760
      ],
      "id": "6d9e0daa-ff3b-4e62-94c5-82e2540120fe",
      "name": "Get token",
      "notes": "\"OBTENER EL CODE\"\nhttps://auth.mercadolibre.com/authorization?response_type=code&client_id=7334627525708690&redirect_uri=https://automation.whitelabel.lat"
    },
    {
      "parameters": {
        "url": "https://api.mercadolibre.com/users/me",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer APP_USR-7334627525708690-102810-35f67e3ab489d703ec44df92b95d87fb-46822039"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3344,
        1984
      ],
      "id": "ca216ec6-99be-4be8-a4d4-e77f47d0a2cc",
      "name": "verificar token"
    },
    {
      "parameters": {
        "url": "https://api.mercadolibre.com/sites/MLV/domain_discovery/search?q=amortiguador",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3344,
        2640
      ],
      "id": "20c90d2e-478b-4fa1-b11f-95eb2734bbac",
      "name": "get category"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.products",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -3120,
        3520
      ],
      "id": "086d2472-6e2b-4bb9-82d6-de8b593c539a",
      "name": "Split Out4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2672,
        3520
      ],
      "id": "9d70d693-864b-4325-97c7-759c1fb26e04",
      "name": "Loop Over Items4"
    },
    {
      "parameters": {
        "jsCode": "// === CONFIGURACIÓN GENERAL === //\nconst CONFIG = {\n  pais: \"VE\", // Cambia a \"VE\" cuando publiques en Venezuela - \"CO\" Colombia\n  tasaCambioUSD: 4000, // Solo se usa en Colombia para convertir precios en USD\n  sites: {\n    CO: {\n      site_id: \"MCO\",\n      currency_id: \"COP\",\n      categorias: {\n        default: \"MCO1747\",\n        caucho: \"MCO23030\",\n        amortiguador: \"MCO165996\",\n        otros: \"MCO447991\"\n      },\n      atributos: {\n        caucho: {\n          ancho: \"SECTION_WIDTH\",\n          perfil: \"AUTOMOTIVE_TIRE_ASPECT_RATIO\",\n          rin: \"RIM_DIAMETER\",\n          cantidad: \"TIRES_NUMBER\",\n          carga: \"LOAD_INDEX\"\n        },\n        amortiguador: {\n          numeroParte: \"PART_NUMBER\",\n          tipo: \"PART_TYPE\",\n          marcaVehiculo: \"VEHICLE_BRAND\"\n        }\n      }\n    },\n    VE: {\n      site_id: \"MLV\",\n      currency_id: \"USD\",\n      categorias: {\n        default: \"MLV1747\",\n        caucho: \"MLV403699\",\n        amortiguador: \"MLV122587\",\n        otros: \"MLV1953\"\n      },\n      atributos: {\n        caucho: {\n          ancho: \"SECTION_WIDTH\",\n          perfil: \"AUTOMOTIVE_TIRE_ASPECT_RATIO\",\n          rin: \"RIM_DIAMETER\",\n          cantidad: \"TIRES_NUMBER\",\n          carga: \"LOAD_INDEX\"\n        },\n        amortiguador: {\n          numeroParte: \"PART_NUMBER\",\n          tipo: \"PART_TYPE\",\n          marcaVehiculo: \"VEHICLE_BRAND\"\n        }\n      }\n    }\n  }\n};\n\n// === FUNCIONES AUXILIARES === //\nfunction cleanHTML(html) {\n  if (!html) return \"\";\n  return html.replace(/<[^>]*>?/gm, \"\").replace(/\\s+/g, \" \").trim();\n}\n\nfunction extraerMedidasCaucho(texto) {\n  const regex = /(\\d{3})[\\/\\-](\\d{2})[Rr]?(\\d{2})/;\n  const match = texto.match(regex);\n  if (!match) return null;\n  return {\n    ancho: `${match[1]} mm`,\n    perfil: match[2],\n    rin: `${match[3]} in`\n  };\n}\n\n// === FUNCIÓN PARA LIMITAR TÍTULOS A 60 CARACTERES === //\nfunction limitarTitulo(titulo, max = 60) {\n  if (titulo.length <= max) return titulo;\n  const truncado = titulo.substring(0, max);\n  const ultimoEspacio = truncado.lastIndexOf(\" \");\n  return (ultimoEspacio > 0 ? truncado.substring(0, ultimoEspacio) : truncado).trim();\n}\n\n// === PROCESO PRINCIPAL === //\nconst productos = items.map(item => item.json);\nconst publicaciones = [];\n\nfor (const producto of productos) {\n  const base = {\n    title: producto.title,\n    description: cleanHTML(producto.body_html),\n    vendor: producto.vendor,\n    images: (producto.images || []).map(img => ({ source: img.src })),\n  };\n\n  const tituloLower = base.title.toLowerCase();\n  const esCaucho = tituloLower.includes(\"caucho\") || tituloLower.includes(\"llanta\") || tituloLower.includes(\"neumático\");\n  const esAmortiguador = tituloLower.includes(\"amortiguador\");\n\n  const siteConfig = CONFIG.sites[CONFIG.pais];\n  let categoria = siteConfig.categorias.otros;\n\n  if (esCaucho) categoria = siteConfig.categorias.caucho;\n  else if (esAmortiguador) categoria = siteConfig.categorias.amortiguador;\n\n  let medidas = null;\n  if (esCaucho) {\n    medidas = extraerMedidasCaucho(base.title) || extraerMedidasCaucho(base.description);\n  }\n\n  for (const variante of producto.variants || []) {\n    // === Conversión de precio (AJUSTADA) === //\n    let precioBase = parseFloat(variante.price || 0);\n\n    if (CONFIG.pais === \"CO\") {\n      // Si hay tasa de cambio válida la aplicamos; si no, dejamos el precio tal cual (se entiende que ya viene en COP).\n      if (CONFIG.tasaCambioUSD && Number(CONFIG.tasaCambioUSD) > 0) {\n        precioBase = precioBase * Number(CONFIG.tasaCambioUSD);\n      } else {\n        // no hay tasa de cambio: se mantiene el valor recibido\n        precioBase = precioBase;\n      }\n    } else if (CONFIG.pais === \"VE\") {\n      // En Venezuela se usa exactamente el valor que llega (asumido en USD)\n      precioBase = precioBase;\n    } else {\n      // Otros países: por defecto mantén el valor original\n      precioBase = precioBase;\n    }\n\n    // Aplicar un mínimo razonable según la moneda del site para no alterar precios en USD\n    const moneda = siteConfig.currency_id;\n    const minimoPorMoneda = moneda === \"COP\" ? 3000 : 0.01; // si COP => 3000, si USD u otra => mínimo insignificante\n    const precioFinal = Math.max(precioBase, minimoPorMoneda);\n\n    // === Generar título con límite de 60 caracteres === //\n    const tituloBase = `${base.title} - ${variante.title !== \"Default Title\" ? variante.title : \"\"}`.trim();\n    const tituloFinal = limitarTitulo(tituloBase, 60);\n\n    const item = {\n      title: tituloFinal,\n      price: precioFinal,\n      currency_id: siteConfig.currency_id,\n      available_quantity: variante.inventory_quantity || 0,\n      buying_mode: \"buy_it_now\",\n      condition: \"new\",\n      listing_type_id: \"gold_special\",\n      category_id: categoria,\n      description: { plain_text: base.description },\n      pictures: base.images,\n      attributes: [\n        { id: \"BRAND\", value_name: base.vendor || \"Sin marca\" },\n        { id: \"MODEL\", value_name: base.title }\n      ]\n    };\n\n    // === ATRIBUTOS DE CAUCHO === //\n    if (esCaucho) {\n      const attr = siteConfig.atributos.caucho;\n      const ancho = medidas?.ancho || \"205 mm\";\n      const perfil = medidas?.perfil || \"55\";\n      const rin = medidas?.rin || \"16 in\";\n\n      item.attributes.push(\n        { id: attr.ancho, value_name: ancho },\n        { id: attr.perfil, value_name: perfil },\n        { id: attr.rin, value_name: rin },\n        { id: attr.carga, value_name: \"91\" },\n        { id: attr.cantidad, value_name: \"1\" }\n      );\n    }\n\n    // === ATRIBUTOS DE AMORTIGUADOR === //\n    if (esAmortiguador) {\n      const attr = siteConfig.atributos.amortiguador;\n      const partNumber =\n        variante.sku ||\n        producto.handle ||\n        `${base.vendor}-${variante.id}`.replace(/\\s+/g, \"-\");\n\n      item.attributes.push(\n        { id: attr.numeroParte, value_name: partNumber },\n        { id: attr.tipo, value_name: \"Amortiguador\" },\n        { id: attr.marcaVehiculo, value_name: \"Universal\" }\n      );\n    }\n\n    publicaciones.push({ json: item });\n  }\n}\n\nreturn publicaciones;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2896,
        3520
      ],
      "id": "f0e6c18b-25d6-4930-bdab-24c6e0cb8bcf",
      "name": "caucho4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "74da0a56-6733-4c1a-8971-4e2741048a77",
              "leftValue": "={{ $json.paging.total }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1776,
        3440
      ],
      "id": "36b7b1c4-714c-4a04-8ae9-edab52c475e2",
      "name": "If4"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mercadolibre.com/items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Token').item.json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.item }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1104,
        3520
      ],
      "id": "851ce54f-f356-4afa-b3d7-5eafecc260e0",
      "name": "create product4",
      "retryOnFail": true,
      "waitBetweenTries": 3000
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.mercadolibre.com/items/{{ $('get ML products').item.json.results[0] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Token').item.json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1104,
        3712
      ],
      "id": "261c9c31-940e-4968-b8c0-3ec8922fa491",
      "name": "update product4",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3c5d070c-d1b6-498f-9bd8-9342a0e3bc77",
              "name": "title",
              "value": "={{ $('Loop Over Items4').item.json.title }}",
              "type": "string"
            },
            {
              "id": "bb11ebbb-a03a-488f-9943-17a97ef43326",
              "name": "price",
              "value": "={{ $('Loop Over Items4').item.json.price }}",
              "type": "number"
            },
            {
              "id": "824c7b2e-765a-4fbb-bd8e-a95a7f00f12d",
              "name": "currency_id",
              "value": "={{ $('Loop Over Items4').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "366e2872-821c-4f2d-a776-69cf7ca2dce8",
              "name": "available_quantity",
              "value": "={{ $('Loop Over Items4').item.json.available_quantity }}",
              "type": "number"
            },
            {
              "id": "995e7518-f1fb-49cb-b27e-067bb6e0456a",
              "name": "condition",
              "value": "={{ $('Loop Over Items4').item.json.condition }}",
              "type": "string"
            },
            {
              "id": "22764566-a28e-4fb8-a9a4-fc0425449fe5",
              "name": "category_id",
              "value": "={{ $('Loop Over Items4').item.json.category_id }}",
              "type": "string"
            },
            {
              "id": "9256e42a-a124-422d-a369-3199dedeac09",
              "name": "pictures",
              "value": "={{ $('Loop Over Items4').item.json.pictures }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1552,
        3536
      ],
      "id": "f0080962-c263-477f-bde5-adab7da19662",
      "name": "Edit Fields9"
    },
    {
      "parameters": {
        "url": "https://tonowheels.myshopify.com/admin/api/2024-10/products.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "3"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3344,
        3520
      ],
      "id": "a91dc840-2e42-4311-9288-fbeb8679a9c8",
      "name": "Get Products4",
      "notesInFlow": false,
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b2c7cf4-b063-4aab-afe4-b74cb0684a2b",
              "name": "next",
              "value": "={{$('Get Products4').first().json.headers.link.match(/<([^>]+)>; rel=\"next\"/)[1]}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2448,
        3040
      ],
      "id": "10703adf-b8bf-4531-bdf9-df96266dea1d",
      "name": "Edit Fields13",
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54c25536-0a25-44a2-97e4-abcfcfb474f9",
              "name": "item",
              "value": "={{ $('Loop Over Items4').item.json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1552,
        3344
      ],
      "id": "52116ba1-8cc0-4e42-95e3-6a911b21f805",
      "name": "Edit Fields14"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2448,
        3440
      ],
      "id": "fd0149d7-64de-4a79-8656-7e6739e66afa",
      "name": "Wait12",
      "webhookId": "a9e9dc4c-0887-4a25-87ad-0fdc0a74dcf6"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1328,
        3344
      ],
      "id": "149f0ab8-16bb-4a42-81a1-a44ecbac22b9",
      "name": "Wait13",
      "webhookId": "d36d2f4c-8c59-4501-b046-7e988a16773f"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1328,
        3536
      ],
      "id": "59265a33-e794-4d74-ba43-e5c97d760d90",
      "name": "Wait14",
      "webhookId": "8d68a993-462f-4d3b-bde9-25dce75d1bd8"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.products",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2000,
        2960
      ],
      "id": "a728b04e-e409-4a01-94f2-96eea5cf65f9",
      "name": "Split Out5"
    },
    {
      "parameters": {
        "jsCode": "// === CONFIGURACIÓN GENERAL === //\nconst CONFIG = {\n  pais: \"VE\", // Cambia a \"VE\" cuando publiques en Venezuela - \"CO\" Colombia\n  tasaCambioUSD: 4000, // Solo se usa en Colombia para convertir precios en USD\n  sites: {\n    CO: {\n      site_id: \"MCO\",\n      currency_id: \"COP\",\n      categorias: {\n        default: \"MCO1747\",\n        caucho: \"MCO23030\",\n        amortiguador: \"MCO165996\",\n        otros: \"MCO447991\"\n      },\n      atributos: {\n        caucho: {\n          ancho: \"SECTION_WIDTH\",\n          perfil: \"AUTOMOTIVE_TIRE_ASPECT_RATIO\",\n          rin: \"RIM_DIAMETER\",\n          cantidad: \"TIRES_NUMBER\",\n          carga: \"LOAD_INDEX\"\n        },\n        amortiguador: {\n          numeroParte: \"PART_NUMBER\",\n          tipo: \"PART_TYPE\",\n          marcaVehiculo: \"VEHICLE_BRAND\"\n        }\n      }\n    },\n    VE: {\n      site_id: \"MLV\",\n      currency_id: \"USD\",\n      categorias: {\n        default: \"MLV1747\",\n        caucho: \"MLV403699\",\n        amortiguador: \"MLV122587\",\n        otros: \"MLV1953\"\n      },\n      atributos: {\n        caucho: {\n          ancho: \"SECTION_WIDTH\",\n          perfil: \"AUTOMOTIVE_TIRE_ASPECT_RATIO\",\n          rin: \"RIM_DIAMETER\",\n          cantidad: \"TIRES_NUMBER\",\n          carga: \"LOAD_INDEX\"\n        },\n        amortiguador: {\n          numeroParte: \"PART_NUMBER\",\n          tipo: \"PART_TYPE\",\n          marcaVehiculo: \"VEHICLE_BRAND\"\n        }\n      }\n    }\n  }\n};\n\n// === FUNCIONES AUXILIARES === //\nfunction cleanHTML(html) {\n  if (!html) return \"\";\n  return html.replace(/<[^>]*>?/gm, \"\").replace(/\\s+/g, \" \").trim();\n}\n\nfunction extraerMedidasCaucho(texto) {\n  const regex = /(\\d{3})[\\/\\-](\\d{2})[Rr]?(\\d{2})/;\n  const match = texto.match(regex);\n  if (!match) return null;\n  return {\n    ancho: `${match[1]} mm`,\n    perfil: match[2],\n    rin: `${match[3]} in`\n  };\n}\n\n// === FUNCIÓN PARA LIMITAR TÍTULOS A 60 CARACTERES === //\nfunction limitarTitulo(titulo, max = 60) {\n  if (titulo.length <= max) return titulo;\n  const truncado = titulo.substring(0, max);\n  const ultimoEspacio = truncado.lastIndexOf(\" \");\n  return (ultimoEspacio > 0 ? truncado.substring(0, ultimoEspacio) : truncado).trim();\n}\n\n// === PROCESO PRINCIPAL === //\nconst productos = items.map(item => item.json);\nconst publicaciones = [];\n\nfor (const producto of productos) {\n  const base = {\n    title: producto.title,\n    description: cleanHTML(producto.body_html),\n    vendor: producto.vendor,\n    images: (producto.images || []).map(img => ({ source: img.src })),\n  };\n\n  const tituloLower = base.title.toLowerCase();\n  const esCaucho = tituloLower.includes(\"caucho\") || tituloLower.includes(\"llanta\") || tituloLower.includes(\"neumático\");\n  const esAmortiguador = tituloLower.includes(\"amortiguador\");\n\n  const siteConfig = CONFIG.sites[CONFIG.pais];\n  let categoria = siteConfig.categorias.otros;\n\n  if (esCaucho) categoria = siteConfig.categorias.caucho;\n  else if (esAmortiguador) categoria = siteConfig.categorias.amortiguador;\n\n  let medidas = null;\n  if (esCaucho) {\n    medidas = extraerMedidasCaucho(base.title) || extraerMedidasCaucho(base.description);\n  }\n\n  for (const variante of producto.variants || []) {\n    // === Conversión de precio (AJUSTADA) === //\n    let precioBase = parseFloat(variante.price || 0);\n\n    if (CONFIG.pais === \"CO\") {\n      // Si hay tasa de cambio válida la aplicamos; si no, dejamos el precio tal cual (se entiende que ya viene en COP).\n      if (CONFIG.tasaCambioUSD && Number(CONFIG.tasaCambioUSD) > 0) {\n        precioBase = precioBase * Number(CONFIG.tasaCambioUSD);\n      } else {\n        // no hay tasa de cambio: se mantiene el valor recibido\n        precioBase = precioBase;\n      }\n    } else if (CONFIG.pais === \"VE\") {\n      // En Venezuela se usa exactamente el valor que llega (asumido en USD)\n      precioBase = precioBase;\n    } else {\n      // Otros países: por defecto mantén el valor original\n      precioBase = precioBase;\n    }\n\n    // Aplicar un mínimo razonable según la moneda del site para no alterar precios en USD\n    const moneda = siteConfig.currency_id;\n    const minimoPorMoneda = moneda === \"COP\" ? 3000 : 0.01; // si COP => 3000, si USD u otra => mínimo insignificante\n    const precioFinal = Math.max(precioBase, minimoPorMoneda);\n\n    // === Generar título con límite de 60 caracteres === //\n    const tituloBase = `${base.title} - ${variante.title !== \"Default Title\" ? variante.title : \"\"}`.trim();\n    const tituloFinal = limitarTitulo(tituloBase, 60);\n\n    const item = {\n      title: tituloFinal,\n      price: precioFinal,\n      currency_id: siteConfig.currency_id,\n      available_quantity: variante.inventory_quantity || 0,\n      buying_mode: \"buy_it_now\",\n      condition: \"new\",\n      listing_type_id: \"gold_special\",\n      category_id: categoria,\n      description: { plain_text: base.description },\n      pictures: base.images,\n      attributes: [\n        { id: \"BRAND\", value_name: base.vendor || \"Sin marca\" },\n        { id: \"MODEL\", value_name: base.title }\n      ]\n    };\n\n    // === ATRIBUTOS DE CAUCHO === //\n    if (esCaucho) {\n      const attr = siteConfig.atributos.caucho;\n      const ancho = medidas?.ancho || \"205 mm\";\n      const perfil = medidas?.perfil || \"55\";\n      const rin = medidas?.rin || \"16 in\";\n\n      item.attributes.push(\n        { id: attr.ancho, value_name: ancho },\n        { id: attr.perfil, value_name: perfil },\n        { id: attr.rin, value_name: rin },\n        { id: attr.carga, value_name: \"91\" },\n        { id: attr.cantidad, value_name: \"1\" }\n      );\n    }\n\n    // === ATRIBUTOS DE AMORTIGUADOR === //\n    if (esAmortiguador) {\n      const attr = siteConfig.atributos.amortiguador;\n      const partNumber =\n        variante.sku ||\n        producto.handle ||\n        `${base.vendor}-${variante.id}`.replace(/\\s+/g, \"-\");\n\n      item.attributes.push(\n        { id: attr.numeroParte, value_name: partNumber },\n        { id: attr.tipo, value_name: \"Amortiguador\" },\n        { id: attr.marcaVehiculo, value_name: \"Universal\" }\n      );\n    }\n\n    publicaciones.push({ json: item });\n  }\n}\n\nreturn publicaciones;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1776,
        2960
      ],
      "id": "03360730-0b41-4e1b-966f-cce1d325a673",
      "name": "caucho5"
    },
    {
      "parameters": {
        "url": "=https://api.mercadolibre.com/users/{{ $json.user_id }}/items/search?q={{ $('Wait15').item.json.title }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1104,
        2960
      ],
      "id": "78054b81-a0f9-4b6d-91f7-279a0736ddf3",
      "name": "HTTP Request5",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "74da0a56-6733-4c1a-8971-4e2741048a77",
              "leftValue": "={{ $json.paging.total }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -880,
        2960
      ],
      "id": "933a3e59-83c6-4c13-b075-193de4871907",
      "name": "If5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mercadolibre.com/items",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Token2').item.json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.item }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -208,
        2864
      ],
      "id": "8f1d18b1-9028-49da-a6aa-79d2c089c832",
      "name": "create product5",
      "retryOnFail": true,
      "waitBetweenTries": 3000
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://api.mercadolibre.com/items/{{ $('HTTP Request5').item.json.results[0] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $('Get Token2').item.json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -208,
        3056
      ],
      "id": "8e0cbc97-25a3-4146-9750-a756416db6fb",
      "name": "update product5",
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3c5d070c-d1b6-498f-9bd8-9342a0e3bc77",
              "name": "title",
              "value": "={{ $('caucho5').item.json.title }}",
              "type": "string"
            },
            {
              "id": "bb11ebbb-a03a-488f-9943-17a97ef43326",
              "name": "price",
              "value": "={{ $('caucho5').item.json.price }}",
              "type": "number"
            },
            {
              "id": "824c7b2e-765a-4fbb-bd8e-a95a7f00f12d",
              "name": "currency_id",
              "value": "={{ $('caucho5').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "366e2872-821c-4f2d-a776-69cf7ca2dce8",
              "name": "available_quantity",
              "value": "={{ $('caucho5').item.json.available_quantity }}",
              "type": "number"
            },
            {
              "id": "995e7518-f1fb-49cb-b27e-067bb6e0456a",
              "name": "condition",
              "value": "={{ $('caucho5').item.json.condition }}",
              "type": "string"
            },
            {
              "id": "22764566-a28e-4fb8-a9a4-fc0425449fe5",
              "name": "category_id",
              "value": "={{ $('caucho5').item.json.category_id }}",
              "type": "string"
            },
            {
              "id": "9256e42a-a124-422d-a369-3199dedeac09",
              "name": "pictures",
              "value": "={{ $('caucho5').item.json.pictures }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        3056
      ],
      "id": "84b4e30c-9c01-4c7e-9063-e8f89ada4478",
      "name": "Edit Fields15"
    },
    {
      "parameters": {
        "url": "={{ $json.next }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "3"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2224,
        3040
      ],
      "id": "7879e7ad-4a79-431e-96c9-082c0fb6ff40",
      "name": "Get Products5",
      "notesInFlow": false,
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b2c7cf4-b063-4aab-afe4-b74cb0684a2b",
              "name": "next",
              "value": "={{$('Get Products5').first().json.headers.link.match(/<([^>]+)>; rel=\"next\"/)[1]}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        240,
        3040
      ],
      "id": "5a353c98-b4d2-4edd-bfd6-0993ad88c36a",
      "name": "Edit Fields16",
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "54c25536-0a25-44a2-97e4-abcfcfb474f9",
              "name": "item",
              "value": "={{ $('caucho5').item.json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -656,
        2864
      ],
      "id": "3b77e6b8-4a4f-49c9-9bd7-8c14bf648ccf",
      "name": "Edit Fields17"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -1552,
        2960
      ],
      "id": "19bc65b3-0a3c-4bca-b911-01994120b81b",
      "name": "Wait15",
      "webhookId": "a9e9dc4c-0887-4a25-87ad-0fdc0a74dcf6"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -432,
        2864
      ],
      "id": "8597d0db-4b8f-4140-be19-7792dfe74326",
      "name": "Wait16",
      "webhookId": "d36d2f4c-8c59-4501-b046-7e988a16773f"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -432,
        3056
      ],
      "id": "9261dde9-3283-437b-b760-b8b574ded772",
      "name": "Wait17",
      "webhookId": "8d68a993-462f-4d3b-bde9-25dce75d1bd8"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        16,
        2960
      ],
      "id": "ad8e1f76-d79c-4816-afaf-49b40075f0b9",
      "name": "Merge"
    },
    {
      "parameters": {
        "url": "=https://api.mercadolibre.com/users/{{ $json.user_id }}/items/search?q={{ $('Wait12').item.json.title }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2000,
        3440
      ],
      "id": "38256195-c560-4ad0-8024-38dfe1ff3d87",
      "name": "get ML products",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "NTEgTLrknVeZALGa",
          "mode": "list",
          "cachedResultName": "Pedro test",
          "cachedResultUrl": "/projects/jOPTDk8NtR0eZIqG/datatables/NTEgTLrknVeZALGa"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.user_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -3120,
        4416
      ],
      "id": "ca49f8ee-35ac-481f-9c91-1279e01c2059",
      "name": "Get row(s)"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook').item.json.topic }}",
                    "rightValue": "orders_v2",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "52abe157-bfe0-4cc1-b0c5-68914e1c98d0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Orders"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "420180f4-07e9-497d-b96b-bba824545a9e",
                    "leftValue": "={{ $('Webhook').item.json.topic }}",
                    "rightValue": "question",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Questions"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -2896,
        4416
      ],
      "id": "dba01592-ce3a-4aa5-92f4-8eebcac42bea",
      "name": "Switch"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "66bf1239-d8a6-47c3-932b-c35d7becbe7a",
              "leftValue": "={{ Math.floor(new Date($now).getTime() / 1000).toString() }}",
              "rightValue": "={{ $json.expires_in }}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2672,
        4416
      ],
      "id": "fa2c4c0e-97cb-4fe2-9dc3-e8af69d470b9",
      "name": "If"
    },
    {
      "parameters": {
        "url": "=https://api.mercadolibre.com{{ $('Webhook').item.json.resource }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.3,
      "position": [
        -2448,
        4128
      ],
      "id": "e8b9a50a-a8f8-4d5a-832a-a5553897aeb6",
      "name": "Get Orders"
    },
    {
      "parameters": {
        "resource": "contacts",
        "filter": {
          "name": "={{ $json.buyer.nickname }} - ID: {{ $json.buyer.id }}"
        },
        "options": {},
        "limit": 1
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -2224,
        4128
      ],
      "id": "33243751-932f-4eed-9b0e-565691fe9f1d",
      "name": "Get list of contacts",
      "alwaysOutputData": true,
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c6d9b2f7-6a26-417a-9641-2301c5cf3f6b",
              "leftValue": "={{ $json._embedded.contacts[0].id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2000,
        4128
      ],
      "id": "8f693e5d-b9ee-4b12-bc4c-75445decc6b8",
      "name": "If1"
    },
    {
      "parameters": {
        "resource": "contacts",
        "operation": "createContacts",
        "collection": {
          "contact": [
            {
              "name": "={{ $('Get Orders').item.json.buyer.nickname }} - ID: {{ $('Get Orders').item.json.buyer.id }}",
              "responsible_user_id": 13681940,
              "created_by": 13681940,
              "updated_by": 13681940
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1776,
        3936
      ],
      "id": "82c9cb0c-26df-4819-ae8f-ff814af0fa9b",
      "name": "Create new contacts",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "leads",
        "operation": "createLeads",
        "collection": {
          "lead": [
            {
              "name": "=Orden ML #{{ $('Get Orders').item.json.id }}",
              "price": "={{ $('Get Orders').item.json.total_amount.round() }}",
              "pipeline_id": 11782332,
              "status_id": 90669439,
              "created_by": 13681940,
              "updated_by": 13681940,
              "loss_reason_id": "=",
              "_embedded": {
                "contacts": [
                  {
                    "id": {
                      "contact": [
                        {
                          "id": "={{ $json._embedded.contacts[0].id }}"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1552,
        3936
      ],
      "id": "746cd5af-2fbd-4926-88ca-7fae66632351",
      "name": "Create new leads",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Recolecta todos los order_items de todos los items de entrada\nconst allOrderItems = [];\nfor (const inputItem of items) {\n  const orderItems = inputItem.json.order_items || [];\n  if (Array.isArray(orderItems)) {\n    allOrderItems.push(...orderItems);\n  }\n}\n\n// Formatea cada order_item\nconst lines = allOrderItems.map((oi, index) => {\n  const title = oi.item?.title ?? '';\n  const sku = oi.item?.seller_sku ?? oi.item?.seller_custom_field ?? '';\n  const qty = oi.requested_quantity?.value ?? oi.quantity ?? '';\n  // formatea precio con 2 decimales si existe\n  const price = (oi.unit_price !== undefined && oi.unit_price !== null)\n    ? Number(oi.unit_price).toFixed(2)\n    : '';\n  const currency = oi.currency_id ?? oi.full_unit_price_currency_id ?? '';\n\n  return `- Producto: ${title}\n- SKU: ${sku}\n- Cantidad: ${qty}\n- Precio: ${price} ${currency}`;\n});\n\n// Resultado final: un solo string con doble salto entre items\nreturn [\n  {\n    json: {\n      resumen: lines.join('\\n\\n'),\n      items_count: lines.length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1104,
        3936
      ],
      "id": "6cafc042-747d-434d-b346-ba3ebe287e0d",
      "name": "orden_items"
    },
    {
      "parameters": {
        "resource": "notes",
        "operation": "createNotes",
        "notes": {
          "common": [
            {
              "entity_id": "={{ $('Create new leads').item.json._embedded.leads[0].id }}",
              "created_by": 13681940,
              "text": "=🛒 *Nueva orden desde Mercado Libre*  \n📦 **ID del Pedido:** {{ $('Set data order').item.json.order_id }} \n👤 **Comprador:** {{ $('Set data order').item.json.buyer }} \n\n⚙️ **Estado:** {{ $('Set data order').item.json.status }}  \n💲 **Total:** {{ $('Set data order').item.json.total }} \n💲 **Monto Pagado:** {{ $('Set data order').item.json['Monto Pagado'] }} \n\n🧾 *Detalle del producto:* {{ $json.resumen }}  \n🏷️ **Tags:** {{ $('Set data order').item.json.tags }}  — \n📅 **Fecha de creación:** {{ $('Set data order').item.json.date_created }}  \n🕓 Última actualización: {{ $('Set data order').item.json.last_updated }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -880,
        3936
      ],
      "id": "395a39d8-88d9-4030-9adb-c1fa27264c1b",
      "name": "Create new notes",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01fd01a7-8fab-4a5d-919b-f8563e40a536",
              "name": "order_id",
              "value": "={{ $('Get Orders').item.json.id }}",
              "type": "number"
            },
            {
              "id": "68fdbd79-5e3b-40a3-ae0f-5515bde6345a",
              "name": "buyer",
              "value": "={{ $('Get Orders').item.json.buyer.nickname }} - {{ $('Get Orders').item.json.buyer.first_name }}",
              "type": "string"
            },
            {
              "id": "4045b1e3-46d8-4ecb-9631-48ab6859ef1f",
              "name": "status",
              "value": "={{ $('Get Orders').item.json.status }}",
              "type": "string"
            },
            {
              "id": "b8b25d10-0fe1-42c8-90b1-641b0eae6304",
              "name": "total",
              "value": "={{ $('Get Orders').item.json.total_amount }} {{ $('Get Orders').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "6bfb7cd1-b92b-4767-bdce-638ed3c6e96b",
              "name": "Monto Pagado",
              "value": "={{ $('Get Orders').item.json.paid_amount }}",
              "type": "string"
            },
            {
              "id": "8eeee6cf-53e2-4390-be8c-b66252b27017",
              "name": "date_created",
              "value": "={{ new Date($('Get Orders').item.json.date_created).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "a6935edd-d099-4b82-89c3-d4f59b84ebee",
              "name": "last_updated",
              "value": "={{ new Date($('Get Orders').item.json.last_updated).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "692f3412-e12d-48b8-a816-bd0a13ba9f64",
              "name": "tags",
              "value": "={{ $('Get Orders').item.json.tags.join( \", \") }}",
              "type": "string"
            },
            {
              "id": "f2f423e7-703b-4465-82bc-2abd02f7aca2",
              "name": "order_items",
              "value": "={{ $('Get Orders').item.json.order_items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1328,
        3936
      ],
      "id": "39f02d98-a50c-4202-88a1-1b6a46508aa1",
      "name": "Set data order"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mercadolibre.com/oauth/token",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "refresh_token"
            },
            {
              "name": "client_id",
              "value": "={{ $json.client_id }}"
            },
            {
              "name": "client_secret",
              "value": "={{ $json.client_secret }}"
            },
            {
              "name": "refresh_token",
              "value": "={{ $json.refresh_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.3,
      "position": [
        -2448,
        4704
      ],
      "id": "b880f7b8-3e6b-45da-ae2d-063b08abc11d",
      "name": "refresh token"
    },
    {
      "parameters": {
        "operation": "update",
        "dataTableId": {
          "__rl": true,
          "value": "NTEgTLrknVeZALGa",
          "mode": "list",
          "cachedResultName": "Pedro test",
          "cachedResultUrl": "/projects/jOPTDk8NtR0eZIqG/datatables/NTEgTLrknVeZALGa"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $json.user_id }}"
            }
          ]
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $json.user_id }}",
            "access_token": "={{ $json.access_token }}",
            "expires_in": "={{ (Math.floor(new Date($now).getTime() / 1000) + Number($json[\"expires_in\"])).toString() }}",
            "refresh_token": "={{ $json.refresh_token }}",
            "client_secret": "={{ $json.client_secret }}",
            "client_id": "={{ $json.client_id }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "access_token",
              "displayName": "access_token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "expires_in",
              "displayName": "expires_in",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "client_id",
              "displayName": "client_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "client_secret",
              "displayName": "client_secret",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "refresh_token",
              "displayName": "refresh_token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2224,
        4704
      ],
      "id": "2900cc59-7146-4269-9c8e-461961224e2d",
      "name": "Update row(s)"
    },
    {
      "parameters": {
        "resource": "leads",
        "operation": "createLeads",
        "collection": {
          "lead": [
            {
              "name": "=Orden ML #{{ $('Get Orders').item.json.id }}",
              "price": "={{ $('Get Orders').item.json.total_amount.round() }}",
              "pipeline_id": 11782332,
              "status_id": 90669439,
              "created_by": 13681940,
              "updated_by": 13681940,
              "loss_reason_id": "=",
              "_embedded": {
                "contacts": [
                  {
                    "id": {
                      "contact": [
                        {
                          "id": "={{ $('Update contacts').item.json._embedded.contacts[0].id }}"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1104,
        4128
      ],
      "id": "e2ed1406-18f9-4299-b8ab-afa81f7b13f0",
      "name": "Create new leads1",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Recolecta todos los order_items de todos los items de entrada\nconst allOrderItems = [];\nfor (const inputItem of items) {\n  const orderItems = inputItem.json.order_items || [];\n  if (Array.isArray(orderItems)) {\n    allOrderItems.push(...orderItems);\n  }\n}\n\n// Formatea cada order_item\nconst lines = allOrderItems.map((oi, index) => {\n  const title = oi.item?.title ?? '';\n  const sku = oi.item?.seller_sku ?? oi.item?.seller_custom_field ?? '';\n  const qty = oi.requested_quantity?.value ?? oi.quantity ?? '';\n  // formatea precio con 2 decimales si existe\n  const price = (oi.unit_price !== undefined && oi.unit_price !== null)\n    ? Number(oi.unit_price).toFixed(2)\n    : '';\n  const currency = oi.currency_id ?? oi.full_unit_price_currency_id ?? '';\n\n  return `- Producto: ${title}\n- SKU: ${sku}\n- Cantidad: ${qty}\n- Precio: ${price} ${currency}`;\n});\n\n// Resultado final: un solo string con doble salto entre items\nreturn [\n  {\n    json: {\n      resumen: lines.join('\\n\\n'),\n      items_count: lines.length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        4128
      ],
      "id": "e1c5d2ea-6831-4e9a-97ef-48026f2d1b07",
      "name": "orden_items1"
    },
    {
      "parameters": {
        "resource": "notes",
        "operation": "createNotes",
        "notes": {
          "common": [
            {
              "entity_id": "={{ $('Create new leads1').item.json._embedded.leads[0].id }}",
              "created_by": 13681940,
              "text": "=🛒 *Nueva orden desde Mercado Libre*  \n📦 **ID del Pedido:** {{ $('Set data order1').item.json.order_id }} \n👤 **Comprador:** {{ $('Set data order1').item.json.buyer }} \n\n⚙️ **Estado:** {{ $('Set data order1').item.json.status }}  \n💲 **Total:** {{ $('Set data order1').item.json.total }} \n💲 **Monto Pagado:** {{ $('Set data order1').item.json['Monto Pagado'] }} \n\n🧾 *Detalle del producto:* {{ $json.resumen }}  \n🏷️ **Tags:** {{ $('Set data order1').item.json.tags }}  — \n📅 **Fecha de creación:** {{ $('Set data order1').item.json.date_created }}  \n🕓 Última actualización: {{ $('Set data order1').item.json.last_updated }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -432,
        4128
      ],
      "id": "f0544376-5693-4816-bee7-3872f786fa6b",
      "name": "Create new notes1",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01fd01a7-8fab-4a5d-919b-f8563e40a536",
              "name": "order_id",
              "value": "={{ $('Get Orders').item.json.id }}",
              "type": "number"
            },
            {
              "id": "68fdbd79-5e3b-40a3-ae0f-5515bde6345a",
              "name": "buyer",
              "value": "={{ $('Get Orders').item.json.buyer.nickname }} - {{ $('Get Orders').item.json.buyer.first_name }}",
              "type": "string"
            },
            {
              "id": "4045b1e3-46d8-4ecb-9631-48ab6859ef1f",
              "name": "status",
              "value": "={{ $('Get Orders').item.json.status }}",
              "type": "string"
            },
            {
              "id": "b8b25d10-0fe1-42c8-90b1-641b0eae6304",
              "name": "total",
              "value": "={{ $('Get Orders').item.json.total_amount }} {{ $('Get Orders').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "6bfb7cd1-b92b-4767-bdce-638ed3c6e96b",
              "name": "Monto Pagado",
              "value": "={{ $('Get Orders').item.json.paid_amount }}",
              "type": "string"
            },
            {
              "id": "8eeee6cf-53e2-4390-be8c-b66252b27017",
              "name": "date_created",
              "value": "={{ new Date($('Get Orders').item.json.date_created).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "a6935edd-d099-4b82-89c3-d4f59b84ebee",
              "name": "last_updated",
              "value": "={{ new Date($('Get Orders').item.json.last_updated).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "692f3412-e12d-48b8-a816-bd0a13ba9f64",
              "name": "tags",
              "value": "={{ $('Get Orders').item.json.tags.join( \", \") }}",
              "type": "string"
            },
            {
              "id": "f2f423e7-703b-4465-82bc-2abd02f7aca2",
              "name": "order_items",
              "value": "={{ $('Get Orders').item.json.order_items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        4128
      ],
      "id": "da1414d0-6b5b-4c1b-823f-6a05a9f5c7c8",
      "name": "Set data order1"
    },
    {
      "parameters": {
        "resource": "contacts",
        "operation": "updateContacts",
        "collection": {
          "contact": [
            {
              "id": "={{ $('Get list of contacts').item.json._embedded.contacts[0].id }}",
              "name": "={{ $('Get Orders').item.json.buyer.nickname }} - ID: {{ $('Get Orders').item.json.buyer.id }}",
              "responsible_user_id": 13681940,
              "created_by": 13681940,
              "updated_by": 13681940
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1776,
        4224
      ],
      "id": "87c06684-53d2-447c-b2b9-d245c8ae4cf5",
      "name": "Update contacts",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "leads",
        "filter": {
          "name": "=Orden ML #{{ $('Get Orders').item.json.id }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1552,
        4224
      ],
      "id": "7e07ed9c-744e-4a86-bb21-6384e9371fb8",
      "name": "Get list of leads",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b10f4bc9-feb2-4824-95dc-55a2c25ddb3d",
              "leftValue": "={{ $json._embedded.leads[0].id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1328,
        4224
      ],
      "id": "7061a00a-a944-4597-8aa0-2854bc3efa2e",
      "name": "If2"
    },
    {
      "parameters": {
        "jsCode": "// Recolecta todos los order_items de todos los items de entrada\nconst allOrderItems = [];\nfor (const inputItem of items) {\n  const orderItems = inputItem.json.order_items || [];\n  if (Array.isArray(orderItems)) {\n    allOrderItems.push(...orderItems);\n  }\n}\n\n// Formatea cada order_item\nconst lines = allOrderItems.map((oi, index) => {\n  const title = oi.item?.title ?? '';\n  const sku = oi.item?.seller_sku ?? oi.item?.seller_custom_field ?? '';\n  const qty = oi.requested_quantity?.value ?? oi.quantity ?? '';\n  // formatea precio con 2 decimales si existe\n  const price = (oi.unit_price !== undefined && oi.unit_price !== null)\n    ? Number(oi.unit_price).toFixed(2)\n    : '';\n  const currency = oi.currency_id ?? oi.full_unit_price_currency_id ?? '';\n\n  return `- Producto: ${title}\n- SKU: ${sku}\n- Cantidad: ${qty}\n- Precio: ${price} ${currency}`;\n});\n\n// Resultado final: un solo string con doble salto entre items\nreturn [\n  {\n    json: {\n      resumen: lines.join('\\n\\n'),\n      items_count: lines.length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        4320
      ],
      "id": "63f12098-b5ad-4543-b1e2-b18fc891b73f",
      "name": "orden_items2"
    },
    {
      "parameters": {
        "resource": "notes",
        "operation": "createNotes",
        "notes": {
          "common": [
            {
              "entity_id": "={{ $('Update leads').item.json._embedded.leads[0].id }}",
              "created_by": 13681940,
              "text": "=🛒 *Nueva orden desde Mercado Libre*  \n📦 **ID del Pedido:** {{ $('Set data order2').item.json.order_id }} \n👤 **Comprador:** {{ $('Set data order2').item.json.buyer }} \n\n⚙️ **Estado:** {{ $('Set data order2').item.json.status }}  \n💲 **Total:** {{ $('Set data order2').item.json.total }} \n💲 **Monto Pagado:** {{ $('Set data order2').item.json['Monto Pagado'] }} \n\n🧾 *Detalle del producto:* {{ $json.resumen }}  \n🏷️ **Tags:** {{ $('Set data order2').item.json.tags }}  — \n📅 **Fecha de creación:** {{ $('Set data order2').item.json.date_created }}  \n🕓 Última actualización: {{ $('Set data order2').item.json.last_updated }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -432,
        4320
      ],
      "id": "1536f65f-cdc2-429c-a9a3-b20ce13397b5",
      "name": "Create new notes2",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01fd01a7-8fab-4a5d-919b-f8563e40a536",
              "name": "order_id",
              "value": "={{ $('Get Orders').item.json.id }}",
              "type": "number"
            },
            {
              "id": "68fdbd79-5e3b-40a3-ae0f-5515bde6345a",
              "name": "buyer",
              "value": "={{ $('Get Orders').item.json.buyer.nickname }} - {{ $('Get Orders').item.json.buyer.first_name }}",
              "type": "string"
            },
            {
              "id": "4045b1e3-46d8-4ecb-9631-48ab6859ef1f",
              "name": "status",
              "value": "={{ $('Get Orders').item.json.status }}",
              "type": "string"
            },
            {
              "id": "b8b25d10-0fe1-42c8-90b1-641b0eae6304",
              "name": "total",
              "value": "={{ $('Get Orders').item.json.total_amount }} {{ $('Get Orders').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "6bfb7cd1-b92b-4767-bdce-638ed3c6e96b",
              "name": "Monto Pagado",
              "value": "={{ $('Get Orders').item.json.paid_amount }}",
              "type": "string"
            },
            {
              "id": "8eeee6cf-53e2-4390-be8c-b66252b27017",
              "name": "date_created",
              "value": "={{ new Date($('Get Orders').item.json.date_created).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "a6935edd-d099-4b82-89c3-d4f59b84ebee",
              "name": "last_updated",
              "value": "={{ new Date($('Get Orders').item.json.last_updated).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "692f3412-e12d-48b8-a816-bd0a13ba9f64",
              "name": "tags",
              "value": "={{ $('Get Orders').item.json.tags.join( \", \") }}",
              "type": "string"
            },
            {
              "id": "f2f423e7-703b-4465-82bc-2abd02f7aca2",
              "name": "order_items",
              "value": "={{ $('Get Orders').item.json.order_items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        4320
      ],
      "id": "a054a7dd-023a-430e-b4df-4834afbcffa4",
      "name": "Set data order2"
    },
    {
      "parameters": {
        "resource": "leads",
        "operation": "updateLeads",
        "collection": {
          "lead": [
            {
              "id": "={{ $json._embedded.leads[0].id }}",
              "name": "=Orden ML #{{ $('Get Orders').item.json.id }}",
              "price": "={{ $('Get Orders').item.json.total_amount.round() }}",
              "pipeline_id": 11782332,
              "status_id": 90669439,
              "created_by": 13681940,
              "updated_by": 13681940
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1104,
        4320
      ],
      "id": "18bbdc81-bdc5-4f62-8201-42835f513556",
      "name": "Update leads",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.mercadolibre.com{{ $('Webhook').item.json.resource }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $json.access_token }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.3,
      "position": [
        -2000,
        4704
      ],
      "id": "84ea8f0b-d4bd-4a5e-a2b5-fa9df56966fc",
      "name": "Get Orders1"
    },
    {
      "parameters": {
        "resource": "contacts",
        "filter": {
          "name": "={{ $json.buyer.nickname }} - ID: {{ $json.buyer.id }}"
        },
        "options": {},
        "limit": 1
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1776,
        4704
      ],
      "id": "b3cb6b76-5a46-4272-8ef9-310a6d56c3cb",
      "name": "Get list of contacts1",
      "alwaysOutputData": true,
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c6d9b2f7-6a26-417a-9641-2301c5cf3f6b",
              "leftValue": "={{ $json._embedded.contacts[0].id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1552,
        4704
      ],
      "id": "0f3cb531-648a-4342-ab77-1759ab1c273c",
      "name": "If3"
    },
    {
      "parameters": {
        "resource": "contacts",
        "operation": "createContacts",
        "collection": {
          "contact": [
            {
              "name": "={{ $('Get Orders1').item.json.buyer.nickname }} - ID: {{ $('Get Orders1').item.json.buyer.id }}",
              "responsible_user_id": 13681940,
              "created_by": 13681940,
              "updated_by": 13681940
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1328,
        4512
      ],
      "id": "6059e84c-5d0e-4362-a100-b584221fd5ae",
      "name": "Create new contacts1",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "leads",
        "operation": "createLeads",
        "collection": {
          "lead": [
            {
              "name": "=Orden ML #{{ $('Get Orders1').item.json.id }}",
              "price": "={{ $('Get Orders1').item.json.total_amount.round() }}",
              "pipeline_id": 11782332,
              "status_id": 90669439,
              "created_by": 13681940,
              "updated_by": 13681940,
              "loss_reason_id": "=",
              "_embedded": {
                "contacts": [
                  {
                    "id": {
                      "contact": [
                        {
                          "id": "={{ $json._embedded.contacts[0].id }}"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1104,
        4512
      ],
      "id": "0f871e7d-3122-46c7-84a0-ac71426d5e51",
      "name": "Create new leads2",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Recolecta todos los order_items de todos los items de entrada\nconst allOrderItems = [];\nfor (const inputItem of items) {\n  const orderItems = inputItem.json.order_items || [];\n  if (Array.isArray(orderItems)) {\n    allOrderItems.push(...orderItems);\n  }\n}\n\n// Formatea cada order_item\nconst lines = allOrderItems.map((oi, index) => {\n  const title = oi.item?.title ?? '';\n  const sku = oi.item?.seller_sku ?? oi.item?.seller_custom_field ?? '';\n  const qty = oi.requested_quantity?.value ?? oi.quantity ?? '';\n  // formatea precio con 2 decimales si existe\n  const price = (oi.unit_price !== undefined && oi.unit_price !== null)\n    ? Number(oi.unit_price).toFixed(2)\n    : '';\n  const currency = oi.currency_id ?? oi.full_unit_price_currency_id ?? '';\n\n  return `- Producto: ${title}\n- SKU: ${sku}\n- Cantidad: ${qty}\n- Precio: ${price} ${currency}`;\n});\n\n// Resultado final: un solo string con doble salto entre items\nreturn [\n  {\n    json: {\n      resumen: lines.join('\\n\\n'),\n      items_count: lines.length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        4512
      ],
      "id": "5ca3a39b-84d6-496c-b08a-562e86e48d2f",
      "name": "orden_items3"
    },
    {
      "parameters": {
        "resource": "notes",
        "operation": "createNotes",
        "notes": {
          "common": [
            {
              "entity_id": "={{ $('Create new leads2').item.json._embedded.leads[0].id }}",
              "created_by": 13681940,
              "text": "=🛒 *Nueva orden desde Mercado Libre*  \n📦 **ID del Pedido:** {{ $('Set data order3').item.json.order_id }} \n👤 **Comprador:** {{ $('Set data order3').item.json.buyer }} \n\n⚙️ **Estado:** {{ $('Set data order3').item.json.status }}  \n💲 **Total:** {{ $('Set data order3').item.json.total }} \n💲 **Monto Pagado:** {{ $('Set data order3').item.json['Monto Pagado'] }} \n\n🧾 *Detalle del producto:* {{ $json.resumen }}  \n🏷️ **Tags:** {{ $('Set data order3').item.json.tags }}  — \n📅 **Fecha de creación:** {{ $('Set data order3').item.json.date_created }}  \n🕓 Última actualización: {{ $('Set data order3').item.json.last_updated }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -432,
        4512
      ],
      "id": "6b6e1c58-14a9-44d1-9216-aef4e6f0d0ab",
      "name": "Create new notes3",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01fd01a7-8fab-4a5d-919b-f8563e40a536",
              "name": "order_id",
              "value": "={{ $('Get Orders1').item.json.id }}",
              "type": "number"
            },
            {
              "id": "68fdbd79-5e3b-40a3-ae0f-5515bde6345a",
              "name": "buyer",
              "value": "={{ $('Get Orders1').item.json.buyer.nickname }} - {{ $('Get Orders1').item.json.buyer.first_name }}",
              "type": "string"
            },
            {
              "id": "4045b1e3-46d8-4ecb-9631-48ab6859ef1f",
              "name": "status",
              "value": "={{ $('Get Orders1').item.json.status }}",
              "type": "string"
            },
            {
              "id": "b8b25d10-0fe1-42c8-90b1-641b0eae6304",
              "name": "total",
              "value": "={{ $('Get Orders1').item.json.total_amount }} {{ $('Get Orders1').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "6bfb7cd1-b92b-4767-bdce-638ed3c6e96b",
              "name": "Monto Pagado",
              "value": "={{ $('Get Orders1').item.json.paid_amount }}",
              "type": "string"
            },
            {
              "id": "8eeee6cf-53e2-4390-be8c-b66252b27017",
              "name": "date_created",
              "value": "={{ new Date($('Get Orders1').item.json.date_created).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "a6935edd-d099-4b82-89c3-d4f59b84ebee",
              "name": "last_updated",
              "value": "={{ new Date($('Get Orders1').item.json.last_updated).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "692f3412-e12d-48b8-a816-bd0a13ba9f64",
              "name": "tags",
              "value": "={{ $('Get Orders1').item.json.tags.join( \", \") }}",
              "type": "string"
            },
            {
              "id": "f2f423e7-703b-4465-82bc-2abd02f7aca2",
              "name": "order_items",
              "value": "={{ $('Get Orders1').item.json.order_items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        4512
      ],
      "id": "bbd8dc9c-2589-4b5b-bad2-80a194beb09f",
      "name": "Set data order3"
    },
    {
      "parameters": {
        "resource": "leads",
        "operation": "createLeads",
        "collection": {
          "lead": [
            {
              "name": "=Orden ML #{{ $('Get Orders1').item.json.id }}",
              "price": "={{ $('Get Orders1').item.json.total_amount.round() }}",
              "pipeline_id": 11782332,
              "status_id": 90669439,
              "created_by": 13681940,
              "updated_by": 13681940,
              "loss_reason_id": "=",
              "_embedded": {
                "contacts": [
                  {
                    "id": {
                      "contact": [
                        {
                          "id": "={{ $('Update contacts1').item.json._embedded.contacts[0].id }}"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -656,
        4704
      ],
      "id": "b9b9b1c9-6555-48d5-84bc-6b0ab5122015",
      "name": "Create new leads3",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Recolecta todos los order_items de todos los items de entrada\nconst allOrderItems = [];\nfor (const inputItem of items) {\n  const orderItems = inputItem.json.order_items || [];\n  if (Array.isArray(orderItems)) {\n    allOrderItems.push(...orderItems);\n  }\n}\n\n// Formatea cada order_item\nconst lines = allOrderItems.map((oi, index) => {\n  const title = oi.item?.title ?? '';\n  const sku = oi.item?.seller_sku ?? oi.item?.seller_custom_field ?? '';\n  const qty = oi.requested_quantity?.value ?? oi.quantity ?? '';\n  // formatea precio con 2 decimales si existe\n  const price = (oi.unit_price !== undefined && oi.unit_price !== null)\n    ? Number(oi.unit_price).toFixed(2)\n    : '';\n  const currency = oi.currency_id ?? oi.full_unit_price_currency_id ?? '';\n\n  return `- Producto: ${title}\n- SKU: ${sku}\n- Cantidad: ${qty}\n- Precio: ${price} ${currency}`;\n});\n\n// Resultado final: un solo string con doble salto entre items\nreturn [\n  {\n    json: {\n      resumen: lines.join('\\n\\n'),\n      items_count: lines.length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        4704
      ],
      "id": "b1b6cb37-9a36-4ca5-a183-55069d5e3ef0",
      "name": "orden_items4"
    },
    {
      "parameters": {
        "resource": "notes",
        "operation": "createNotes",
        "notes": {
          "common": [
            {
              "entity_id": "={{ $('Create new leads3').item.json._embedded.leads[0].id }}",
              "created_by": 13681940,
              "text": "=🛒 *Nueva orden desde Mercado Libre*  \n📦 **ID del Pedido:** {{ $('Set data order4').item.json.order_id }} \n👤 **Comprador:** {{ $('Set data order4').item.json.buyer }} \n\n⚙️ **Estado:** {{ $('Set data order4').item.json.status }}  \n💲 **Total:** {{ $('Set data order4').item.json.total }} \n💲 **Monto Pagado:** {{ $('Set data order4').item.json['Monto Pagado'] }} \n\n🧾 *Detalle del producto:* {{ $json.resumen }}  \n🏷️ **Tags:** {{ $('Set data order4').item.json.tags }}  — \n📅 **Fecha de creación:** {{ $('Set data order4').item.json.date_created }}  \n🕓 Última actualización: {{ $('Set data order4').item.json.last_updated }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        16,
        4704
      ],
      "id": "72faf2b5-780d-4d0b-aee0-d3cd23e6b33f",
      "name": "Create new notes4",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01fd01a7-8fab-4a5d-919b-f8563e40a536",
              "name": "order_id",
              "value": "={{ $('Get Orders1').item.json.id }}",
              "type": "number"
            },
            {
              "id": "68fdbd79-5e3b-40a3-ae0f-5515bde6345a",
              "name": "buyer",
              "value": "={{ $('Get Orders1').item.json.buyer.nickname }} - {{ $('Get Orders1').item.json.buyer.first_name }}",
              "type": "string"
            },
            {
              "id": "4045b1e3-46d8-4ecb-9631-48ab6859ef1f",
              "name": "status",
              "value": "={{ $('Get Orders1').item.json.status }}",
              "type": "string"
            },
            {
              "id": "b8b25d10-0fe1-42c8-90b1-641b0eae6304",
              "name": "total",
              "value": "={{ $('Get Orders1').item.json.total_amount }} {{ $('Get Orders1').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "6bfb7cd1-b92b-4767-bdce-638ed3c6e96b",
              "name": "Monto Pagado",
              "value": "={{ $('Get Orders1').item.json.paid_amount }}",
              "type": "string"
            },
            {
              "id": "8eeee6cf-53e2-4390-be8c-b66252b27017",
              "name": "date_created",
              "value": "={{ new Date($('Get Orders1').item.json.date_created).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "a6935edd-d099-4b82-89c3-d4f59b84ebee",
              "name": "last_updated",
              "value": "={{ new Date($('Get Orders1').item.json.last_updated).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "692f3412-e12d-48b8-a816-bd0a13ba9f64",
              "name": "tags",
              "value": "={{ $('Get Orders1').item.json.tags.join( \", \") }}",
              "type": "string"
            },
            {
              "id": "f2f423e7-703b-4465-82bc-2abd02f7aca2",
              "name": "order_items",
              "value": "={{ $('Get Orders1').item.json.order_items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -432,
        4704
      ],
      "id": "96fa8caf-06b4-48f0-a5f1-1ef04efdb595",
      "name": "Set data order4"
    },
    {
      "parameters": {
        "resource": "contacts",
        "operation": "updateContacts",
        "collection": {
          "contact": [
            {
              "id": "={{ $('Get list of contacts1').item.json._embedded.contacts[0].id }}",
              "name": "={{ $('Get Orders1').item.json.buyer.nickname }} - ID: {{ $('Get Orders1').item.json.buyer.id }}",
              "responsible_user_id": 13681940,
              "created_by": 13681940,
              "updated_by": 13681940
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1328,
        4800
      ],
      "id": "b0f8a33d-5d50-4495-b5c2-fa58e1447139",
      "name": "Update contacts1",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "leads",
        "filter": {
          "name": "=Orden ML #{{ $('Get Orders1').item.json.id }}"
        },
        "options": {}
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -1104,
        4800
      ],
      "id": "8c9d37b6-1398-4a5e-aa98-c4b070ade962",
      "name": "Get list of leads1",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b10f4bc9-feb2-4824-95dc-55a2c25ddb3d",
              "leftValue": "={{ $json._embedded.leads[0].id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -880,
        4800
      ],
      "id": "ccbf7d48-158f-49d5-be65-f66ae984c491",
      "name": "If6"
    },
    {
      "parameters": {
        "jsCode": "// Recolecta todos los order_items de todos los items de entrada\nconst allOrderItems = [];\nfor (const inputItem of items) {\n  const orderItems = inputItem.json.order_items || [];\n  if (Array.isArray(orderItems)) {\n    allOrderItems.push(...orderItems);\n  }\n}\n\n// Formatea cada order_item\nconst lines = allOrderItems.map((oi, index) => {\n  const title = oi.item?.title ?? '';\n  const sku = oi.item?.seller_sku ?? oi.item?.seller_custom_field ?? '';\n  const qty = oi.requested_quantity?.value ?? oi.quantity ?? '';\n  // formatea precio con 2 decimales si existe\n  const price = (oi.unit_price !== undefined && oi.unit_price !== null)\n    ? Number(oi.unit_price).toFixed(2)\n    : '';\n  const currency = oi.currency_id ?? oi.full_unit_price_currency_id ?? '';\n\n  return `- Producto: ${title}\n- SKU: ${sku}\n- Cantidad: ${qty}\n- Precio: ${price} ${currency}`;\n});\n\n// Resultado final: un solo string con doble salto entre items\nreturn [\n  {\n    json: {\n      resumen: lines.join('\\n\\n'),\n      items_count: lines.length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        4896
      ],
      "id": "c941ab4f-dc99-4b03-862f-17f56a043794",
      "name": "orden_items5"
    },
    {
      "parameters": {
        "resource": "notes",
        "operation": "createNotes",
        "notes": {
          "common": [
            {
              "entity_id": "={{ $('Update leads1').item.json._embedded.leads[0].id }}",
              "created_by": 13681940,
              "text": "=🛒 *Nueva orden desde Mercado Libre*  \n📦 **ID del Pedido:** {{ $('Set data order5').item.json.order_id }} \n👤 **Comprador:** {{ $('Set data order5').item.json.buyer }} \n\n⚙️ **Estado:** {{ $('Set data order5').item.json.status }}  \n💲 **Total:** {{ $('Set data order5').item.json.total }} \n💲 **Monto Pagado:** {{ $('Set data order5').item.json['Monto Pagado'] }} \n\n🧾 *Detalle del producto:* {{ $json.resumen }}  \n🏷️ **Tags:** {{ $('Set data order5').item.json.tags }}  — \n📅 **Fecha de creación:** {{ $('Set data order5').item.json.date_created }}  \n🕓 Última actualización: {{ $('Set data order5').item.json.last_updated }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        16,
        4896
      ],
      "id": "97ddb57d-2de7-4e78-af70-5528cb327c01",
      "name": "Create new notes5",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "01fd01a7-8fab-4a5d-919b-f8563e40a536",
              "name": "order_id",
              "value": "={{ $('Get Orders1').item.json.id }}",
              "type": "number"
            },
            {
              "id": "68fdbd79-5e3b-40a3-ae0f-5515bde6345a",
              "name": "buyer",
              "value": "={{ $('Get Orders1').item.json.buyer.nickname }} - {{ $('Get Orders1').item.json.buyer.first_name }}",
              "type": "string"
            },
            {
              "id": "4045b1e3-46d8-4ecb-9631-48ab6859ef1f",
              "name": "status",
              "value": "={{ $('Get Orders1').item.json.status }}",
              "type": "string"
            },
            {
              "id": "b8b25d10-0fe1-42c8-90b1-641b0eae6304",
              "name": "total",
              "value": "={{ $('Get Orders1').item.json.total_amount }} {{ $('Get Orders1').item.json.currency_id }}",
              "type": "string"
            },
            {
              "id": "6bfb7cd1-b92b-4767-bdce-638ed3c6e96b",
              "name": "Monto Pagado",
              "value": "={{ $('Get Orders1').item.json.paid_amount }}",
              "type": "string"
            },
            {
              "id": "8eeee6cf-53e2-4390-be8c-b66252b27017",
              "name": "date_created",
              "value": "={{ new Date($('Get Orders1').item.json.date_created).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "a6935edd-d099-4b82-89c3-d4f59b84ebee",
              "name": "last_updated",
              "value": "={{ new Date($('Get Orders1').item.json.last_updated).toISOString().slice(0, 16).replace('T', ' ') }}",
              "type": "string"
            },
            {
              "id": "692f3412-e12d-48b8-a816-bd0a13ba9f64",
              "name": "tags",
              "value": "={{ $('Get Orders1').item.json.tags.join( \", \") }}",
              "type": "string"
            },
            {
              "id": "f2f423e7-703b-4465-82bc-2abd02f7aca2",
              "name": "order_items",
              "value": "={{ $('Get Orders1').item.json.order_items }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -432,
        4896
      ],
      "id": "58f331e7-fd69-469d-946b-4e03083858fe",
      "name": "Set data order5"
    },
    {
      "parameters": {
        "resource": "leads",
        "operation": "updateLeads",
        "collection": {
          "lead": [
            {
              "id": "={{ $json._embedded.leads[0].id }}",
              "name": "=Orden ML #{{ $('Get Orders1').item.json.id }}",
              "price": "={{ $('Get Orders1').item.json.total_amount.round() }}",
              "pipeline_id": 11782332,
              "status_id": 90669439,
              "created_by": 13681940,
              "updated_by": 13681940
            }
          ]
        }
      },
      "type": "n8n-nodes-kommo.kommo",
      "typeVersion": 1,
      "position": [
        -656,
        4896
      ],
      "id": "dd7188b6-8bbe-4ec5-a6df-7b339665a96c",
      "name": "Update leads1",
      "credentials": {
        "kommoOAuth2Api": {
          "id": "Br1gBXbgNRoUEYvU",
          "name": "Kommo Long Lived Token account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "NTEgTLrknVeZALGa",
          "mode": "list",
          "cachedResultName": "Pedro test",
          "cachedResultUrl": "/projects/jOPTDk8NtR0eZIqG/datatables/NTEgTLrknVeZALGa"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "46822039"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -2224,
        3440
      ],
      "id": "578b07b5-34d4-4569-a64d-400466dfedbc",
      "name": "Get Token"
    },
    {
      "parameters": {
        "operation": "get",
        "dataTableId": {
          "__rl": true,
          "value": "NTEgTLrknVeZALGa",
          "mode": "list",
          "cachedResultName": "Pedro test",
          "cachedResultUrl": "/projects/jOPTDk8NtR0eZIqG/datatables/NTEgTLrknVeZALGa"
        },
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "46822039"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [
        -1328,
        2960
      ],
      "id": "13e5d914-0e2f-4445-a0e3-a043a898da91",
      "name": "Get Token2"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.products",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -3344,
        6224
      ],
      "id": "bdb5dfa8-1f9e-4de5-b6ae-1d815e2e8443",
      "name": "Split Out"
    },
    {
      "parameters": {
        "url": "https://tonowheels.myshopify.com/admin/api/2024-10/products.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "1"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2864,
        5584
      ],
      "id": "a06075f9-0231-4dcd-bf65-b315cfb44ec9",
      "name": "Get Products",
      "notesInFlow": false,
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c02aa58-4b2e-460a-9e3c-18d4ff670ab0",
              "leftValue": "={{ $json.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3120,
        6224
      ],
      "id": "6003e409-8c6e-4611-a866-c415c288dedc",
      "name": "If7"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -2896,
        6288
      ],
      "id": "902026aa-03b4-4a7b-b5f7-87614c0a69c9",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Producto\nproduct_id: {{ $json.id }}\nTitle: {{ $json.title }}\nbody_html: {{ $json.body_html }}",
        "options": {
          "systemMessage": "=Eres un redactor técnico-experto y consultor de productos automotrices para e-commerce. Tu trabajo es mejorar y expandir la ficha HTML de un caucho (llanta) para que sea muy completa, clara y útil para un comprador real.\n\nRecibirás:\n- id: el id del producto.\n- Title: el título del producto.\n- body_html: el HTML actual con especificaciones.\n\nObjetivos (haz esto siempre):\n1. Conserva toda la información técnica existente (medidas, rin, índice de carga, speed rating si existe, tipos, tablas, etc.).\n2. Reescribe y mejora la redacción para que sea fluida, persuasiva y profesional.\n3. Reestructura el HTML si es necesario: usa <h2>, <h3>, párrafos, listas <ul>/<li> y tablas <table>.\n4. Analiza el título y las especificaciones para deducir compatibilidad. A partir de la medida, denominaciones (ej. 'LT', 'AT', 'All Terrain', 'Mud', '4x4') y rines, produce:\n   - Una sección <h3>Compatibilidad de vehículos</h3> con ejemplos concretos de modelos de vehículo que comúnmente usan esa medida.\n   - Cuando la compatibilidad sea altamente probable, indícalo como 'Compatible con...'.\n   - Cuando la compatibilidad no pueda confirmarse al 100%, escríbelo como 'Probable compatibilidad con...' y especifica qué datos confirmar (medida, índice de carga, offset, manual).\n5. Si ya existe una sección de compatibilidad en el body_html, actualízala—no la dupliques. Si es insuficiente, complétala.\n6. Si falta información útil para el usuario, añádela (índice de carga mínimo recomendado, speed rating, tipo de dibujo, presión aproximada, capacidad de carga, usos recomendados, consejos de montaje/mantenimiento, garantía, notas de seguridad).\n7. Incluye una lista 'Consejos para el comprador' con 3–5 puntos prácticos.\n8. Finaliza con una nota en <small> recomendando verificar la medida real y consultar el manual o un taller antes de comprar.\n9. deben haber la debida separacion entre secciones, y mostrar una UI impecable para el usuario.\n\nReglas obligatorias de formato (muy importantes):\nA. Devuelve **solamente** un objeto JSON válido (sin texto adicional) con exactamente esta estructura:\n\n{\n  \"product\": {\n    \"id\": NUMERICO,\n    \"body_html\": \"HTML_COMPLETO_USANDO_COMILLAS_SIMPLES_PARA_ATRIBUTOS\"\n  }\n}\n\nB. EN EL HTML usa siempre comillas simples para atributos y en cualquier lugar donde normalmente usarías comillas dobles, por ejemplo: <div class='product-description'>, <p class='note'>, etc.\n\nC. El JSON debe tener **comillas dobles** para las claves y el valor string de body_html (JSON válido). Dentro del string body_html no uses comillas dobles `\"`; usa `'` para atributos y comillas simples donde corresponda.\n\nD. No incluyas triple backticks, explicaciones, ni texto fuera del JSON. El resultado debe ser parseable por JSON.parse() sin errores.\n\nE. Evita caracteres problemáticos sin escape dentro del body_html (por ejemplo, no incluyas bytes nulos). Si necesitas saltos de línea, están permitidos; devuelve un JSON válido.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 3,
      "position": [
        -2672,
        6128
      ],
      "id": "2c21cc65-28c1-49d2-bee9-92920285f3cf",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://tonowheels.myshopify.com/admin/api/2024-10/products/{{ $json.product.id }}.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ product: { id: $json.product.id, body_html: $json.product.body_html } }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.3,
      "position": [
        -1872,
        6144
      ],
      "id": "fe33ee72-7757-443a-841e-23a5de78a262",
      "name": "HTTP Request",
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-09-2025",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2608,
        6352
      ],
      "id": "06bfa26b-a0a2-4c7f-b97a-a2e11a669c1f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "automation.whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ✅ Function Node (fallback con id del nodo \"Loop Over Items\")\n// Limpia y normaliza salida del LLM para asegurar que siempre devuelva { product: { id, body_html } }\n// Si falla, envía el mismo JSON de entrada (o lo que hay) pero con el id obtenido desde:\n// $node['Loop Over Items'].json.id  (primaria) o items[0].json.id (fallback).\n\nconst results = [];\n\nfunction safeParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch {\n    return null;\n  }\n}\n\nfunction extractJsonFromText(text) {\n  if (typeof text !== 'string') return null;\n\n  // Quitar fences tipo ```json o ```html\n  text = text.replace(/```(json|html)?/gi, '').trim();\n\n  // Buscar bloque con \"product\"\n  const match = text.match(/{[\\s\\S]*?\"product\"[\\s\\S]*?}/);\n  if (!match) return null;\n\n  let jsonPart = match[0];\n\n  // Si faltan llaves de cierre, intentar balancearlas\n  const openCount = (jsonPart.match(/{/g) || []).length;\n  const closeCount = (jsonPart.match(/}/g) || []).length;\n  if (closeCount < openCount) {\n    jsonPart += '}'.repeat(openCount - closeCount);\n  }\n\n  const parsed = safeParse(jsonPart);\n  return parsed;\n}\n\n// Intentar leer id del nodo \"Loop Over Items\" (como pediste).\n// En n8n el acceso es $node['Loop Over Items'].json (si existe).\n// Hacemos esto una vez fuera del loop para performance.\nlet fallbackIdFromNode = null;\ntry {\n  if (typeof $node !== 'undefined' && $node['Loop Over Items'] && $node['Loop Over Items'].json) {\n    const nid = $node['Loop Over Items'].json.id ?? $node['Loop Over Items'].json['id'];\n    if (nid !== undefined && nid !== null) fallbackIdFromNode = Number(nid);\n  }\n} catch (e) {\n  // Silenciar si no existe el nodo\n  fallbackIdFromNode = null;\n}\n\nfor (const item of items) {\n  let parsed = null;\n  const inputStr =\n    item.json.output ||\n    item.json.text ||\n    item.json.llm_text ||\n    JSON.stringify(item.json || {});\n\n  parsed = extractJsonFromText(inputStr);\n\n  // Preparar una función que construya el fallback product a enviar si algo falla\n  function buildFallbackProduct() {\n    // intentamos usar: 1) id desde $node['Loop Over Items'], 2) id desde el mismo item, 3) null\n    let fallbackId = null;\n    if (Number.isFinite(fallbackIdFromNode)) {\n      fallbackId = fallbackIdFromNode;\n    } else if (item.json && (item.json.id !== undefined || item.json.product && item.json.product.id !== undefined)) {\n      fallbackId = Number(item.json.id ?? item.json.product?.id);\n      if (!Number.isFinite(fallbackId)) fallbackId = null;\n    }\n\n    // intentar obtener body_html del item original o usar el inputStr crudo\n    let fallbackHtml = '';\n    if (item.json) {\n      if (item.json.product && item.json.product.body_html) fallbackHtml = String(item.json.product.body_html);\n      else if (item.json.body_html) fallbackHtml = String(item.json.body_html);\n      else fallbackHtml = String(inputStr).slice(0, 20000); // limitado\n    } else {\n      fallbackHtml = String(inputStr).slice(0, 20000);\n    }\n\n    // limpieza básica similar a la normalización principal\n    fallbackHtml = fallbackHtml\n      .replace(/```html|```/gi, '')\n      .replace(/\\\\n/g, '\\n')\n      .replace(/\\u0000/g, '')\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/<\\/script>/gi, '<\\\\/script>')\n      .trim();\n\n    return {\n      id: Number.isFinite(fallbackId) ? fallbackId : null,\n      body_html: fallbackHtml,\n    };\n  }\n\n  if (!parsed || !parsed.product) {\n    // En vez de fallar, enviamos el mismo json (o lo que se pudo) con el id forzado\n    const fallbackProduct = buildFallbackProduct();\n    results.push({\n      json: {\n        product: fallbackProduct,\n        _note: 'fallback_used_no_product_found'\n      },\n    });\n    continue;\n  }\n\n  const product = parsed.product;\n  // Validar ID\n  const id = Number(product.id);\n  if (!Number.isFinite(id)) {\n    // ID inválido: devolver contenido original pero forzando id desde el nodo solicitado\n    const fallbackProduct = buildFallbackProduct();\n\n    // Si el producto tenía body_html lo limpiamos, sino usamos fallbackHtml\n    let html = String(product.body_html || fallbackProduct.body_html || '')\n      .replace(/```html|```/gi, '')\n      .replace(/\\\\n/g, '\\n')\n      .replace(/\\u0000/g, '')\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/<\\/script>/gi, '<\\\\/script>')\n      .trim();\n\n    results.push({\n      json: {\n        product: {\n          id: Number.isFinite(fallbackProduct.id) ? fallbackProduct.id : null,\n          body_html: html,\n        },\n        _note: 'fallback_used_invalid_id',\n        original_product: product\n      },\n    });\n    continue;\n  }\n\n  // Limpiar HTML\n  let html = String(product.body_html || '')\n    .replace(/```html|```/gi, '')\n    .replace(/\\\\n/g, '\\n')\n    .replace(/\\u0000/g, '')\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/<\\/script>/gi, '<\\\\/script>')\n    .trim();\n\n  // Resultado final válido\n  results.push({\n    json: {\n      product: {\n        id,\n        body_html: html,\n      },\n    },\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2320,
        6128
      ],
      "id": "af44fae7-1a2d-4a66-bfb4-0b474f355c93",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2896,
        6096
      ],
      "id": "9ff2fbad-2348-4e00-8fee-801dbd2c1576",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b2c7cf4-b063-4aab-afe4-b74cb0684a2b",
              "name": "next",
              "value": "={{$('Get Products').first().json.headers.link.match(/<([^>]+)>; rel=\"next\"/)[1]}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2608,
        5584
      ],
      "id": "5361ab0b-ebcf-4e6c-8815-355f39806698",
      "name": "Edit Fields",
      "executeOnce": true
    },
    {
      "parameters": {
        "url": "={{ $json.next }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "100"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1872,
        5520
      ],
      "id": "191f2987-3330-4c69-b1ae-0cfaac2f6f64",
      "name": "Get Products6",
      "notesInFlow": false,
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9b2c7cf4-b063-4aab-afe4-b74cb0684a2b",
              "name": "next",
              "value": "={{$('Get Products6').first().json.headers.link.match(/<([^>]+)>; rel=\"next\"/)[1]}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -624,
        5520
      ],
      "id": "8c793569-49ef-43c1-a598-74c2824571f9",
      "name": "Edit Fields18",
      "executeOnce": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Producto\nproduct_id: {{ $json.id }}\nTitle: {{ $json.title }}\nbody_html: {{ $json.body_html }}",
        "options": {
          "systemMessage": "=Eres un redactor técnico-experto y consultor de productos automotrices para e-commerce. Tu trabajo es mejorar y expandir la ficha HTML de un caucho (llanta) para que sea muy completa, clara y útil para un comprador real.\n\nRecibirás:\n- id: el id del producto.\n- Title: el título del producto.\n- body_html: el HTML actual con especificaciones.\n\nObjetivos (haz esto siempre):\n1. Conserva toda la información técnica existente (medidas, rin, índice de carga, speed rating si existe, tipos, tablas, etc.).\n2. Reescribe y mejora la redacción para que sea fluida, persuasiva y profesional.\n3. Reestructura el HTML si es necesario: usa <h2>, <h3>, párrafos, listas <ul>/<li> y tablas <table>.\n4. Analiza el título y las especificaciones para deducir compatibilidad. A partir de la medida, denominaciones (ej. 'LT', 'AT', 'All Terrain', 'Mud', '4x4') y rines, produce:\n   - Una sección <h3>Compatibilidad de vehículos</h3> con ejemplos concretos de modelos de vehículo que comúnmente usan esa medida.\n   - Cuando la compatibilidad sea altamente probable, indícalo como 'Compatible con...'.\n   - Cuando la compatibilidad no pueda confirmarse al 100%, escríbelo como 'Probable compatibilidad con...' y especifica qué datos confirmar (medida, índice de carga, offset, manual).\n5. Si ya existe una sección de compatibilidad en el body_html, actualízala—no la dupliques. Si es insuficiente, complétala.\n6. Si falta información útil para el usuario, añádela (índice de carga mínimo recomendado, speed rating, tipo de dibujo, presión aproximada, capacidad de carga, usos recomendados, consejos de montaje/mantenimiento, garantía, notas de seguridad).\n7. Incluye una lista 'Consejos para el comprador' con 3–5 puntos prácticos.\n8. Finaliza con una nota en <small> recomendando verificar la medida real y consultar el manual o un taller antes de comprar.\n9. deben haber la debida separacion entre secciones, y mostrar una UI impecable para el usuario.\n\nReglas obligatorias de formato (muy importantes):\nA. Devuelve **solamente** un objeto JSON válido (sin texto adicional) con exactamente esta estructura:\n\n{\n  \"product\": {\n    \"id\": NUMERICO,\n    \"body_html\": \"HTML_COMPLETO_USANDO_COMILLAS_SIMPLES_PARA_ATRIBUTOS\"\n  }\n}\n\nB. EN EL HTML usa siempre comillas simples para atributos y en cualquier lugar donde normalmente usarías comillas dobles, por ejemplo: <div class='product-description'>, <p class='note'>, etc.\n\nC. El JSON debe tener **comillas dobles** para las claves y el valor string de body_html (JSON válido). Dentro del string body_html no uses comillas dobles `\"`; usa `'` para atributos y comillas simples donde corresponda.\n\nD. No incluyas triple backticks, explicaciones, ni texto fuera del JSON. El resultado debe ser parseable por JSON.parse() sin errores.\n\nE. Evita caracteres problemáticos sin escape dentro del body_html (por ejemplo, no incluyas bytes nulos). Si necesitas saltos de línea, están permitidos; devuelve un JSON válido.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 3,
      "position": [
        -944,
        5216
      ],
      "id": "86f11b61-5bd5-42e0-b125-59bdac950b74",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://tonowheels.myshopify.com/admin/api/2024-10/products/{{ $json.product.id }}.json",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ product: { id: $json.product.id, body_html: $json.product.body_html } }) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.3,
      "position": [
        -176,
        5312
      ],
      "id": "359a1a9b-2092-4fb7-99cc-e8a6d8386992",
      "name": "HTTP Request1",
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-09-2025",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -912,
        5376
      ],
      "id": "11aa2200-c12e-4748-9f5e-8f2100376746",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "automation.whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// ✅ Function Node (fallback con id del nodo \"Loop Over Items\")\n// Limpia y normaliza salida del LLM para asegurar que siempre devuelva { product: { id, body_html } }\n// Si falla, envía el mismo JSON de entrada (o lo que hay) pero con el id obtenido desde:\n// $node['Loop Over Items'].json.id  (primaria) o items[0].json.id (fallback).\n\nconst results = [];\n\nfunction safeParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch {\n    return null;\n  }\n}\n\nfunction extractJsonFromText(text) {\n  if (typeof text !== 'string') return null;\n\n  // Quitar fences tipo ```json o ```html\n  text = text.replace(/```(json|html)?/gi, '').trim();\n\n  // Buscar bloque con \"product\"\n  const match = text.match(/{[\\s\\S]*?\"product\"[\\s\\S]*?}/);\n  if (!match) return null;\n\n  let jsonPart = match[0];\n\n  // Si faltan llaves de cierre, intentar balancearlas\n  const openCount = (jsonPart.match(/{/g) || []).length;\n  const closeCount = (jsonPart.match(/}/g) || []).length;\n  if (closeCount < openCount) {\n    jsonPart += '}'.repeat(openCount - closeCount);\n  }\n\n  const parsed = safeParse(jsonPart);\n  return parsed;\n}\n\n// Intentar leer id del nodo \"Loop Over Items\" (como pediste).\n// En n8n el acceso es $node['Loop Over Items2'].json (si existe).\n// Hacemos esto una vez fuera del loop para performance.\nlet fallbackIdFromNode = null;\ntry {\n  if (typeof $node !== 'undefined' && $node['Loop Over Items2'] && $node['Loop Over Items'].json) {\n    const nid = $node['Loop Over Items2'].json.id ?? $node['Loop Over Items'].json['id'];\n    if (nid !== undefined && nid !== null) fallbackIdFromNode = Number(nid);\n  }\n} catch (e) {\n  // Silenciar si no existe el nodo\n  fallbackIdFromNode = null;\n}\n\nfor (const item of items) {\n  let parsed = null;\n  const inputStr =\n    item.json.output ||\n    item.json.text ||\n    item.json.llm_text ||\n    JSON.stringify(item.json || {});\n\n  parsed = extractJsonFromText(inputStr);\n\n  // Preparar una función que construya el fallback product a enviar si algo falla\n  function buildFallbackProduct() {\n    // intentamos usar: 1) id desde $node['Loop Over Items'], 2) id desde el mismo item, 3) null\n    let fallbackId = null;\n    if (Number.isFinite(fallbackIdFromNode)) {\n      fallbackId = fallbackIdFromNode;\n    } else if (item.json && (item.json.id !== undefined || item.json.product && item.json.product.id !== undefined)) {\n      fallbackId = Number(item.json.id ?? item.json.product?.id);\n      if (!Number.isFinite(fallbackId)) fallbackId = null;\n    }\n\n    // intentar obtener body_html del item original o usar el inputStr crudo\n    let fallbackHtml = '';\n    if (item.json) {\n      if (item.json.product && item.json.product.body_html) fallbackHtml = String(item.json.product.body_html);\n      else if (item.json.body_html) fallbackHtml = String(item.json.body_html);\n      else fallbackHtml = String(inputStr).slice(0, 20000); // limitado\n    } else {\n      fallbackHtml = String(inputStr).slice(0, 20000);\n    }\n\n    // limpieza básica similar a la normalización principal\n    fallbackHtml = fallbackHtml\n      .replace(/```html|```/gi, '')\n      .replace(/\\\\n/g, '\\n')\n      .replace(/\\u0000/g, '')\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/<\\/script>/gi, '<\\\\/script>')\n      .trim();\n\n    return {\n      id: Number.isFinite(fallbackId) ? fallbackId : null,\n      body_html: fallbackHtml,\n    };\n  }\n\n  if (!parsed || !parsed.product) {\n    // En vez de fallar, enviamos el mismo json (o lo que se pudo) con el id forzado\n    const fallbackProduct = buildFallbackProduct();\n    results.push({\n      json: {\n        product: fallbackProduct,\n        _note: 'fallback_used_no_product_found'\n      },\n    });\n    continue;\n  }\n\n  const product = parsed.product;\n  // Validar ID\n  const id = Number(product.id);\n  if (!Number.isFinite(id)) {\n    // ID inválido: devolver contenido original pero forzando id desde el nodo solicitado\n    const fallbackProduct = buildFallbackProduct();\n\n    // Si el producto tenía body_html lo limpiamos, sino usamos fallbackHtml\n    let html = String(product.body_html || fallbackProduct.body_html || '')\n      .replace(/```html|```/gi, '')\n      .replace(/\\\\n/g, '\\n')\n      .replace(/\\u0000/g, '')\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/<\\/script>/gi, '<\\\\/script>')\n      .trim();\n\n    results.push({\n      json: {\n        product: {\n          id: Number.isFinite(fallbackProduct.id) ? fallbackProduct.id : null,\n          body_html: html,\n        },\n        _note: 'fallback_used_invalid_id',\n        original_product: product\n      },\n    });\n    continue;\n  }\n\n  // Limpiar HTML\n  let html = String(product.body_html || '')\n    .replace(/```html|```/gi, '')\n    .replace(/\\\\n/g, '\\n')\n    .replace(/\\u0000/g, '')\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/<\\/script>/gi, '<\\\\/script>')\n    .trim();\n\n  // Resultado final válido\n  results.push({\n    json: {\n      product: {\n        id,\n        body_html: html,\n      },\n    },\n  });\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        5216
      ],
      "id": "00ea5cbd-e463-4623-93ca-c2e74982b529",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.products",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -1648,
        5520
      ],
      "id": "2c114249-b88a-46d8-9e06-b1dc5ba4cc67",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7c02aa58-4b2e-460a-9e3c-18d4ff670ab0",
              "leftValue": "={{ $json.title.toLowerCase().includes('caucho') }}",
              "rightValue": "caucho",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1424,
        5520
      ],
      "id": "fb7997e4-bf32-417f-bb1e-82a4f80a60cf",
      "name": "If8"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -1184,
        5520
      ],
      "id": "e2187c25-3a95-4de0-b15c-559a63afbda5",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -912,
        5520
      ],
      "id": "cf484be6-b21a-4dc4-a9a5-d7297738b065",
      "name": "Merge1"
    },
    {
      "parameters": {
        "options": {
          "reset": true
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -2320,
        5488
      ],
      "id": "a012a577-af12-4125-86fd-53d10fa5ac7c",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2096,
        5520
      ],
      "id": "3e3daa56-ae40-4b06-94cd-395901a7e6c3",
      "name": "Wait",
      "webhookId": "cf3cd8da-78ce-4121-bf5c-f8258cfb66fb"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2096,
        6128
      ],
      "id": "87e7c122-7b96-4af5-a1d6-72edac1cfcf3",
      "name": "Wait1",
      "webhookId": "1fde2551-4072-400b-b389-3bbae8fc36e4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1200,
        5376
      ],
      "id": "86b883d9-889c-41b7-9d06-9714f7b7a04b",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -400,
        5216
      ],
      "id": "7bc3ef90-be6b-4b34-a177-edaf8639cd6e",
      "name": "Wait2",
      "webhookId": "8985a9c6-6e33-40be-a0fe-7b5fe8424f51"
    },
    {
      "parameters": {
        "url": "https://tonowheels.myshopify.com/admin/api/2024-10/products.json?limit=100&page_info=eyJkaXJlY3Rpb24iOiJuZXh0IiwibGFzdF9pZCI6ODE0NDk4MzQ1Nzk4NiwibGFzdF92YWx1ZSI6IkNhdWNobyAyOTVcLzgwUjIyLjUgQWVvbHVzIDE1NFwvMTQ5TSAxOFByIE5lbyBBbGxyb2FkcyBTIn0",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "shopifyAccessTokenApi",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "100"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3568,
        6224
      ],
      "id": "28fcca9d-5757-4fdd-8fb9-35bb2c934227",
      "name": "Get Products1",
      "notesInFlow": false,
      "credentials": {
        "shopifyAccessTokenApi": {
          "id": "9RO1LDkPgTRAthd9",
          "name": "Test Pedro"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "resource": "/orders/2000009714447492",
          "user_id": 46822039,
          "topic": "orders_v2",
          "application_id": 5503910054141466,
          "attempts": 1,
          "sent": "2019-10-30T16:19:20.129Z",
          "received": "2019-10-30T16:19:20.106Z"
        }
      }
    ]
  },
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "updatedAt": "2025-10-07T20:01:05.857Z",
      "createdAt": "2025-10-07T20:01:05.857Z",
      "role": "workflow:owner",
      "workflowId": "UzeriRNtkpQe3Hir",
      "projectId": "jOPTDk8NtR0eZIqG"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-31T21:08:13.068Z",
  "versionId": "09422733-381c-445e-acd2-5d2192379609"
}