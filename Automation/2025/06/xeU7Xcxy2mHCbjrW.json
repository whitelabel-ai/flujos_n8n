{
  "active": false,
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Clean Json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Json": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Search Client",
            "type": "main",
            "index": 0
          }
        ],
        [],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Client": {
      "main": [
        [
          {
            "node": "If Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Projet": {
      "main": [
        [
          {
            "node": "If Projet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Client": {
      "main": [
        [
          {
            "node": "Search Projet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Projet": {
      "main": [
        [
          {
            "node": "create ask",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Projet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client": {
      "main": [
        [
          {
            "node": "If Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Projet": {
      "main": [
        [
          {
            "node": "create Requirements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Data Projets": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    },
    "create ask": {
      "main": [
        [
          {
            "node": "Data Projets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create a database page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Mark a message as read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create Requirements": {
      "main": [
        [
          {
            "node": "create ask",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [],
        []
      ]
    }
  },
  "createdAt": "2025-06-24T15:18:35.192Z",
  "id": "xeU7Xcxy2mHCbjrW",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Cotizador Projets",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "to:(pedro@whitelabel.lat)",
          "readStatus": "unread"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -300,
        -110
      ],
      "id": "ad94b2eb-3864-4e1f-8cad-2ea9ebdddf01",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "No30HHponDPtNWfb",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "431d805b-af0f-42be-8edb-274d5451b727",
              "leftValue": "={{ $json.To || $json.to.value[0].address}}",
              "rightValue": "pedro@whitelabel.lat",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        -110
      ],
      "id": "2242749b-2bc6-42e0-ad69-49124f49712d",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        140,
        -60
      ],
      "id": "4493d239-4f85-4eee-801b-a27ea30a69d0",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4d3ca1fe-99b0-44c6-988e-9337de9866f1",
              "name": "threadId",
              "value": "={{ $json.threadId }}",
              "type": "string"
            },
            {
              "id": "cdd17f63-27b2-4320-83c1-36a3972edb65",
              "name": "remitente",
              "value": "={{ $json.from.value[0].name }}",
              "type": "string"
            },
            {
              "id": "734f7938-1d6e-4a60-9cef-cc6dc492b9b2",
              "name": "email",
              "value": "={{ $json.from.value[0].address }}",
              "type": "string"
            },
            {
              "id": "690ccbb1-9ad2-4e99-87b9-04104f3a09a5",
              "name": "asunto",
              "value": "={{ $json.subject }}",
              "type": "string"
            },
            {
              "id": "0d16be62-ac5d-479f-832d-6a43adeeb2a0",
              "name": "mensaje",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "128a062c-e372-4126-82a9-ea2a2850c7b4",
              "name": "date",
              "value": "={{ $json.date }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        140,
        -260
      ],
      "id": "12075fdb-d216-418c-a42b-ca930efefbc1",
      "name": "Data"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Nuevo requerimiento recibido:\n\nFrom: {{ $json.remitente }}\nSubject: {{ $json.asunto }}\n\nTexto del requerimiento:\n{{ $json.mensaje }}\nResumen del requerimiento:\n{{ $json.resumen }}\n\nPor favor, genera las preguntas necesarias clasificadas por categoría y relevancia.",
        "options": {
          "systemMessage": "=Actúas como un analista senior de producto digital con experiencia en discovery técnico, definición de requerimientos y cotización de soluciones tecnológicas a medida.\n\nTu tarea es analizar requerimientos enviados por clientes y generar un conjunto de preguntas clave que eliminen ambigüedades (gaps), supuestos erróneos (sesgos) y permitan comprender con claridad el alcance funcional y técnico del proyecto.\n\nEstas preguntas tienen como propósito ayudar al equipo a:\n- Aclarar el objetivo real del requerimiento.\n- Identificar riesgos ocultos o dependencias no mencionadas.\n- Estimar tiempo y costos de forma precisa.\n- Construir una solución viable, escalable y cotizable.\n\n### Reglas:\n1. Clasifica las preguntas en las siguientes categorías:\n   - `Funcional`: lógica del negocio, comportamiento esperado, flujos.\n   - `Técnica`: arquitectura, almacenamiento, infraestructura, APIs.\n   - `Volumen de datos`: frecuencia, escalabilidad, cantidad de usuarios o registros.\n   - `Canales`: medios de interacción, características por canal.\n   - `Integraciones`: sistemas externos, CRMs, bases de datos, servicios terceros.\n   - `Soporte`: mantenimiento, monitoreo, continuidad operativa.\n   - `Otros`: cualquier aspecto no cubierto por las anteriores.\n   \n2. Para cada pregunta, asigna un campo `relevancia`, con uno de estos valores:\n   - `alta`: imprescindible para cotizar correctamente.\n   - `media`: útil, pero no crítica.\n   - `baja`: complementaria o exploratoria.\n\n3. Sé específico, claro y breve en las preguntas. Evita ambigüedades.\n\n4. No repitas ni expliques. Tu salida debe ser directamente un JSON estructurado así:\n\n```json\n[\n  {\n    \"categoria\": \"Funcional\",\n    \"pregunta\": \"¿Cuál es el comportamiento esperado del agente si el cliente no responde en 24 horas?\",\n    \"relevancia\": \"alta\"\n  },\n  {\n    \"categoria\": \"Canales\",\n    \"pregunta\": \"¿Los mensajes de WhatsApp serán automatizados o escritos por un operador humano?\",\n    \"relevancia\": \"alta\"\n  },\n  ...\n]\n````\n\nNo incluyas encabezados, contexto, ni explicaciones. Solo entrega el JSON con las preguntas, listo para ser usado en una herramienta de documentación como Notion."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        2716,
        -560
      ],
      "id": "aa962bfa-1cdf-48d4-9dfd-5e7b286f3e7b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        448,
        -40
      ],
      "id": "024700fa-1c62-49ff-83dc-925c62eb5de0",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto plano del agente\nconst raw = items[0].json.output;\n\n// Intentar extraer el JSON entre los delimitadores ```json y ```\nconst match = raw.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n\n// Si no encuentra un bloque válido, intentar parsear como JSON directo\nconst cleanJsonString = match ? match[1] : raw;\n\n// Intentar parsear el contenido\nlet parsed;\ntry {\n  parsed = JSON.parse(cleanJsonString);\n} catch (error) {\n  throw new Error(\"No se pudo parsear el JSON: \" + error.message);\n}\n\n// Verificamos que sea un array\nif (!Array.isArray(parsed)) {\n  throw new Error(\"El JSON parseado no es un array.\");\n}\n\n// Devolvemos cada objeto como item independiente\nreturn parsed.map(obj => ({ json: obj }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -300,
        -920
      ],
      "id": "cb9eeb66-fc68-4eeb-b260-f7b8c53e99af",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analiza el siguiente correo y responde en formato JSON:\n\n- tipo: \"nuevo_requerimiento\", \"respuesta\", \"no_relevante\"\n- cliente: nombre del remitente si se puede identificar\n- proyecto: nombre del proyecto si se puede inferir en el mensaje o asunto\n- necesita_aclaracion: true o false\n- mensaje: el mensaje completo recibido limpio\n- resumen: breve resumen en una frase (máximo 20 palabras)\n\nCorreo recibido:\nRemitente: {{ $json[\"remitente\"] }}  \nEmail: {{ $json[\"email\"] }}  \nAsunto: {{ $json[\"asunto\"] }}  \nMensaje: {{ $json[\"mensaje\"] }}\n",
        "options": {
          "systemMessage": "=Eres un analista experto en pre-venta. Vas a clasificar correos recibidos para identificar si contienen un requerimiento de proyecto, una respuesta a un requerimiento anterior, o si no son relevantes para cotización. \nTu salida debe ser un JSON válido. \nNo hagas suposiciones si no tienes suficiente información."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        360,
        -260
      ],
      "id": "a8fa0d4c-8425-456e-a8b8-17e456a96791",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "jsCode": "// Suponiendo que estás trabajando con una entrada tipo JSON del nodo anterior:\nconst raw = items[0].json.output;\n\n// Extraemos el bloque que está entre las etiquetas ```json y ```\nconst match = raw.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n\nif (!match) {\n  throw new Error(\"No se encontró un bloque JSON válido.\");\n}\n\nconst cleanJsonString = match[1];\nconst parsed = JSON.parse(cleanJsonString);\n\n// Devolver como nuevo item\nreturn [{ json: parsed }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        -260
      ],
      "id": "764499bf-1ef3-4f78-9e51-f68ecae7f99d",
      "name": "Clean Json"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "nuevo_requerimiento",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "576af6df-1ab4-4dbb-a5b3-364e5a029e41"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "nuevo requerimiento"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c57ccc1f-ec6d-44b6-b192-f844674e5390",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "respuesta",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "respuesta"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0bc6e44a-e62e-499b-ade2-33ffda489c00",
                    "leftValue": "={{ $json.tipo }}",
                    "rightValue": "no_relevante",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "no relevante"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        956,
        -260
      ],
      "id": "cbe321ec-147e-4d3f-9e6e-20aeea6a2db2",
      "name": "Switch"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1176,
        -210
      ],
      "id": "2ba57301-da90-48cb-853c-4c623e5f149a",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "operation": "search",
        "text": "={{ $json.cliente }}",
        "returnAll": true,
        "simple": false,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1176,
        -410
      ],
      "id": "5b554d39-8b02-4814-8432-57fb444285ee",
      "name": "Search Client",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "https://www.notion.so/Clientes-Proyectos-21c3741c09ed80d889b0e52241fab462",
          "mode": "url"
        },
        "title": "={{ $('Switch').item.json.cliente }}",
        "simple": false,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1616,
        -260
      ],
      "id": "15960830-dff4-4ccb-9e76-afd01c8609af",
      "name": "Create Client",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "text": "={{ $('Switch').item.json.proyecto }}",
        "limit": 1,
        "simple": false,
        "options": {
          "filter": {
            "filters": {
              "value": "page"
            }
          }
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1616,
        -460
      ],
      "id": "c860b0db-1a7e-4966-a53e-75fc2a7d5c15",
      "name": "Search Projet",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "={{ $('If Client').item.json.url }}",
          "mode": "url"
        },
        "title": "={{ $('Switch').item.json.proyecto }}",
        "simple": false,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2020,
        -680
      ],
      "id": "f3da975e-1227-4ecf-ba21-df92b2b887dc",
      "name": "Create Projet",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cda0a524-7fdd-4501-aa8a-68376d87684c",
              "leftValue": "={{ $json.properties.title.title[0].text.content }}",
              "rightValue": "={{ $('Switch').item.json.cliente }}",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1396,
        -410
      ],
      "id": "aca443c7-3d20-409c-bb65-66381097677e",
      "name": "If Client"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cda0a524-7fdd-4501-aa8a-68376d87684c",
              "leftValue": "={{ $json.properties.title.title[0].text.content }}",
              "rightValue": "={{ $('Switch').item.json.proyecto }}",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1836,
        -460
      ],
      "id": "371286aa-4339-4c0b-b77a-67d3918c443d",
      "name": "If Projet"
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "={{ $('Create Projet').item.json.url }}",
          "mode": "url"
        },
        "title": "=📩 Requerimientos",
        "simple": false,
        "blockUi": {
          "blockValues": [
            {
              "type": "heading_2",
              "textContent": "={{ $('Switch').item.json.proyecto }}"
            },
            {
              "textContent": "={{ $('Clean Json').item.json.mensaje }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2260,
        -740
      ],
      "id": "7b90daf0-1dc3-44a5-8623-ac9913d82c16",
      "name": "create Requirements",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2804,
        -340
      ],
      "id": "a001975e-b7e4-47d1-ac2b-5c1d48daeccf",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "jQiccHfpS9BFKE4C",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5288a14e-f54e-46a3-bd7a-5a79e4731681",
              "name": "page_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "095ab03c-23e7-488c-88ee-1e34515fdab8",
              "name": "cliente",
              "value": "={{ $('Clean Json').item.json.cliente }}",
              "type": "string"
            },
            {
              "id": "2ff4b779-987d-4112-8324-92aa45bc1065",
              "name": "proyecto",
              "value": "={{ $('Clean Json').item.json.proyecto }}",
              "type": "string"
            },
            {
              "id": "3653fc58-70b8-41c8-8d8b-2e333dd0fd9e",
              "name": "remitente",
              "value": "={{ $('Data').item.json.remitente }}",
              "type": "string"
            },
            {
              "id": "d1b76be4-97a7-467c-b367-519c9ae511a5",
              "name": "email",
              "value": "={{ $('Data').item.json.email }}",
              "type": "string"
            },
            {
              "id": "0342f252-874a-4cf1-a18c-2dc333a0b130",
              "name": "asunto",
              "value": "={{ $('Data').item.json.asunto }}",
              "type": "string"
            },
            {
              "id": "136ac074-8b70-4e2d-9155-e6fd5c042464",
              "name": "mensaje",
              "value": "={{ $('Clean Json').item.json.mensaje }}",
              "type": "string"
            },
            {
              "id": "3c58e5b2-c23f-4765-99e5-3e81529f5112",
              "name": "resumen",
              "value": "={{ $('Clean Json').item.json.resumen }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2500,
        -560
      ],
      "id": "c76e215f-bd46-4955-8528-bcc668cd32bb",
      "name": "Data Projets"
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "={{ $('Search Projet').item.json.url || $('Create Projet').item.json.url }}",
          "mode": "url"
        },
        "title": "=📄 Preguntas aclaratorias",
        "simple": false,
        "blockUi": {
          "blockValues": [
            {
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "Estado: ",
                    "annotationUi": {
                      "bold": true,
                      "italic": true,
                      "color": "green"
                    }
                  },
                  {
                    "text": "Por revisar",
                    "annotationUi": {
                      "color": "default"
                    }
                  }
                ]
              }
            },
            {
              "richText": true,
              "text": {
                "text": [
                  {
                    "text": "🧑‍💼 Por favor, revisa las preguntas, edita o responde si es necesario, y cambia el texto arriba a 'Estado: Revisado o Contestado' cuando termines.",
                    "annotationUi": {
                      "color": "gray"
                    }
                  }
                ]
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2276,
        -560
      ],
      "id": "6f091273-9fdc-487f-b492-d9fcc2483fe2",
      "name": "create ask",
      "alwaysOutputData": true,
      "executeOnce": true,
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener el texto plano del agente\nconst raw = items[0].json.output;\n\n// Extraer el JSON entre los delimitadores ```json y ```\nconst match = raw.match(/```json\\s*([\\s\\S]*?)\\s*```/);\nconst cleanJsonString = match ? match[1] : raw;\n\n// Parsear el contenido\nlet parsedQuestions;\ntry {\n  parsedQuestions = JSON.parse(cleanJsonString);\n} catch (error) {\n  throw new Error(\"No se pudo parsear el JSON: \" + error.message);\n}\n\n// Verificar que sea un array\nif (!Array.isArray(parsedQuestions)) {\n  throw new Error(\"El JSON parseado no es un array.\");\n}\n\n// Organizar por relevancia y luego por categoría\nconst organizedData = {\n  alta: {},\n  media: {},\n  baja: {}\n};\n  \n// Agrupar preguntas\nparsedQuestions.forEach(question => {\n  const relevancia = question.relevancia.toLowerCase();\n  const categoria = question.categoria;\n  \n  if (!organizedData[relevancia][categoria]) {\n    organizedData[relevancia][categoria] = [];\n  }\n  \n  organizedData[relevancia][categoria].push(question.pregunta);\n});\n\n// Crear la estructura para Notion\nconst notionPayload = {\n  children: [] // Aquí irán todos los bloques\n};\n\n\n// Función para añadir un heading\nconst addHeading = (text, level = 2) => {\n  notionPayload.children.push({\n    object: \"block\",\n    type: `heading_${level}`,\n    [`heading_${level}`]: {\n      rich_text: [{\n        type: \"text\",\n        text: { content: text },\n        annotations: { bold: true }\n      }],\n      color: \"default\"\n    }\n  });\n};\n\n// Función para añadir un toggle\nconst addToggle = (title, items) => {\n  notionPayload.children.push({\n    object: \"block\",\n    type: \"toggle\",\n    toggle: {\n      rich_text: [{\n        type: \"text\",\n        text: { content: title },\n        annotations: { bold: true }\n      }],\n      children: items.map(item => ({\n        object: \"block\",\n        type: \"paragraph\",\n        paragraph: {\n          rich_text: [{\n            type: \"text\",\n            text: { content: item }\n          }],\n          color: \"default\"\n        }\n      }))\n    }\n  });\n};\n\nconst proyecto = $('Data Projets').first().json.proyecto;\n// Añadir título principal\naddHeading(`📋 Preguntas del ${proyecto}`, 1);  \n\n// Añadir sección de Alta Relevancia\nif (Object.keys(organizedData.alta).length > 0) {\n  addHeading(\"🔴 Alta Relevancia\", 2);\n  \n  for (const [categoria, preguntas] of Object.entries(organizedData.alta)) {\n    addToggle(`📌 ${categoria} (${preguntas.length} preguntas)`, preguntas);\n  }\n}\n\n// Añadir sección de Media Relevancia\nif (Object.keys(organizedData.media).length > 0) {\n  addHeading(\"🟡 Media Relevancia\", 2);\n  \n  for (const [categoria, preguntas] of Object.entries(organizedData.media)) {\n    addToggle(`📝 ${categoria} (${preguntas.length} preguntas)`, preguntas);\n  }\n}\n\n// Añadir sección de Baja Relevancia\nif (Object.keys(organizedData.baja).length > 0) {\n  addHeading(\"🔵 Baja Relevancia\", 2);\n  \n  for (const [categoria, preguntas] of Object.entries(organizedData.baja)) {\n    addToggle(`ℹ️ ${categoria} (${preguntas.length} preguntas)`, preguntas);\n  }\n}\n\nreturn [{\n  json: notionPayload\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3092,
        -560
      ],
      "id": "c1920478-c0c4-40e2-9450-cdedaafa87f7",
      "name": "Code1"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.notion.com/v1/blocks/{{ $('Data Projets').item.json.page_id }}/children",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"children\": {{JSON.stringify($json.children)}}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3320,
        -560
      ],
      "id": "dbddc886-1952-490d-8bc5-00e6841e9034",
      "name": "HTTP Request",
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "operation": "markAsRead",
        "messageId": "={{ $('Gmail Trigger').item.json.threadId }}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        3560,
        -560
      ],
      "id": "ae91a6fd-f7a7-4151-8819-8a4c299aba26",
      "name": "Mark a message as read",
      "webhookId": "9bef87db-c738-468f-b5fb-5cfce6263f37",
      "credentials": {
        "gmailOAuth2": {
          "id": "No30HHponDPtNWfb",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "21c3741c-09ed-809d-b8e4-c2b8a54316a5",
          "mode": "list",
          "cachedResultName": "Clientes - Proyectos",
          "cachedResultUrl": "https://www.notion.so/21c3741c09ed809db8e4c2b8a54316a5"
        },
        "title": "={{ $('Clean Json').item.json.cliente }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Cliente|title",
              "title": "={{ $('Clean Json').item.json.cliente }}"
            },
            {
              "key": "Empresa|rich_text",
              "textContent": "={{ $('Data').item.json.email.split('@')[1].split('.')[0].replace('gmail', 'Personal') }}"
            },
            {
              "key": "Correo|email",
              "emailValue": "={{ $('Data').item.json.email }}"
            },
            {
              "key": "Notas|rich_text",
              "textContent": "={{ $('Clean Json').item.json.resumen }}"
            },
            {
              "key": "Último contacto|date",
              "date": "={{ $('Gmail Trigger').item.json.date }}"
            },
            {
              "key": "Estado actual|select",
              "selectValue": "Preguntas Generadas"
            },
            {
              "key": "Proyecto|rich_text",
              "textContent": "={{ $('Search Projet').item.json.properties.title.title[0].text.content || $('Create Projet').item.json.properties.title.title[0].text.content  }}"
            },
            {
              "key": "Preguntas aclaratorias|url",
              "ignoreIfEmpty": true,
              "urlValue": "={{ $json.url }}"
            },
            {
              "key": "threadId|rich_text",
              "textContent": "={{ $('Data').item.json.threadId }}"
            }
          ]
        },
        "options": {
          "iconType": "emoji",
          "icon": "💼"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2340,
        -220
      ],
      "id": "88eedb06-ba74-44b0-8ed9-97b67ebc7a8f",
      "name": "Create a database page",
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "event": "pagedUpdatedInDatabase",
        "databaseId": {
          "__rl": true,
          "value": "21c3741c-09ed-809d-b8e4-c2b8a54316a5",
          "mode": "list",
          "cachedResultName": "Clientes - Proyectos",
          "cachedResultUrl": "https://www.notion.so/21c3741c09ed809db8e4c2b8a54316a5"
        }
      },
      "type": "n8n-nodes-base.notionTrigger",
      "typeVersion": 1,
      "position": [
        -400,
        320
      ],
      "id": "965321e4-dccb-41bc-9f6c-cb25bd639c80",
      "name": "Notion Trigger",
      "credentials": {
        "notionApi": {
          "id": "jWWM1rTAyxYomO7Y",
          "name": "hola@whitelabel.lat"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json[\"Estado actual\"] }}",
                    "rightValue": "Preguntas Generadas",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1a0086b1-dd61-4fe3-a0c8-783dbe7f259a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "268d0644-c01f-4a45-9724-5d7cdb8af21b",
                    "leftValue": "={{ $json[\"Estado actual\"] }}",
                    "rightValue": "Preguntas Confirmadas",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -180,
        320
      ],
      "id": "d8c40eda-829c-47d3-9181-30b1f22f16e2",
      "name": "Switch1"
    }
  ],
  "pinData": {
    "Gmail Trigger": [
      {
        "json": {
          "id": "197a76a3176b8afc",
          "threadId": "197a76a3176b8afc",
          "labelIds": [
            "UNREAD",
            "IMPORTANT",
            "CATEGORY_PERSONAL",
            "INBOX"
          ],
          "sizeEstimate": 8158,
          "headers": {
            "delivered-to": "Delivered-To: pedro@whitelabel.lat",
            "received": "Received: from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])\r\n        by mx.google.com with SMTPS id 3f1490d57ef6-e85f5b4df85sor2115094276.13.2025.06.25.07.07.23\r\n        for <pedro@whitelabel.lat>\r\n        (Google Transport Security);\r\n        Wed, 25 Jun 2025 07:07:23 -0700 (PDT)",
            "x-received": "X-Received: by 2002:a05:6902:18ce:b0:e84:4bf4:dc04 with SMTP id\r\n 3f1490d57ef6-e86017885dcmr3873252276.34.1750860443207; Wed, 25 Jun 2025\r\n 07:07:23 -0700 (PDT)",
            "arc-seal": "ARC-Seal: i=1; a=rsa-sha256; t=1750860443; cv=none;\r\n        d=google.com; s=arc-20240605;\r\n        b=aUxAQ5BgJHnUG8M2urQIPFkktV7D+/DQRMVf9iSAbIBqDEzYgAStVQ3BU46YlWpJNY\r\n         sARiXDmXzC7uIBxAz9n25dKVrj0mUAlf2quJLru5WNxwNW0r9nYSqRVFWJH2FsCuglXN\r\n         Rx44Q8PMKAIh7sPHuKDzx9H4zWo8RCImKrGttKU4sKUU/6u/c8QvJ+GN9bFVRkTuBnoX\r\n         vFMbVn+ZG8daukf7am2Z+xov4mEsEqYBbeFM0bVzPYDGaujBDWhjB0A62ODgOI3AYn3B\r\n         cBsMTMQd7OD6T+3Vi2qALmL44nuouuTyQCkYF+/GnC1N+4uEp46MViCdfytNqGdAI7iJ\r\n         34ow==",
            "arc-message-signature": "ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20240605;\r\n        h=to:subject:message-id:date:from:mime-version:dkim-signature;\r\n        bh=66GO79tXvxhP3XVUkGLDHVbU1M+Vk+agITupH9WVPZU=;\r\n        fh=q/hBV4+lzFR0tlHOrZ8+EVjdvyCpuWZ18VoX7bIghfA=;\r\n        b=bfD7BP1lYrngeP6W+Sx5se1a2Jq0RSXsb+b2/K4EL3DJ5Hm7mKtt1zZRFZTtk1I3M8\r\n         SIesLzZN7StLzVN/jSa0NZr8QwshXZk8ph3ue2qTsjo8CUWGfsYMEEU3tDKlp2u2zzCi\r\n         B+y10+3dLtx1fBgflIr+xTmtKTLyrnwUfeIpyOC5R9mqHiW/yl+Vxg6m6CorJuMf2LMF\r\n         2gj8X++b7XRBP21wOrTEuq2+Fqfa+ppWD/GkZztVSoXNyAIa9vLyfabCWkqK52Kq5smS\r\n         3/63lnxFjdoRo7IzL9GYF19qxu+/9uYJt09z9s9upzlPNFacOu3bYlew8oBtkJVMS/sv\r\n         S0CQ==;\r\n        dara=google.com",
            "arc-authentication-results": "ARC-Authentication-Results: i=1; mx.google.com;\r\n       dkim=pass header.i=@gmail.com header.s=20230601 header.b=QBxJG9Xp;\r\n       spf=pass (google.com: domain of pro.pedro0413@gmail.com designates 209.85.220.41 as permitted sender) smtp.mailfrom=pro.pedro0413@gmail.com;\r\n       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com;\r\n       dara=pass header.i=@whitelabel.lat",
            "return-path": "Return-Path: <pro.pedro0413@gmail.com>",
            "received-spf": "Received-SPF: pass (google.com: domain of pro.pedro0413@gmail.com designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;",
            "authentication-results": "Authentication-Results: mx.google.com;\r\n       dkim=pass header.i=@gmail.com header.s=20230601 header.b=QBxJG9Xp;\r\n       spf=pass (google.com: domain of pro.pedro0413@gmail.com designates 209.85.220.41 as permitted sender) smtp.mailfrom=pro.pedro0413@gmail.com;\r\n       dmarc=pass (p=NONE sp=QUARANTINE dis=NONE) header.from=gmail.com;\r\n       dara=pass header.i=@whitelabel.lat",
            "dkim-signature": "DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\r\n        d=gmail.com; s=20230601; t=1750860443; x=1751465243; darn=whitelabel.lat;\r\n        h=to:subject:message-id:date:from:mime-version:from:to:cc:subject\r\n         :date:message-id:reply-to;\r\n        bh=66GO79tXvxhP3XVUkGLDHVbU1M+Vk+agITupH9WVPZU=;\r\n        b=QBxJG9XppXRvTwWW+5dvID2BlgTAi++hLZ+L6BiKdtM2gUKsoC9z9DWv51PPlfcmd6\r\n         ubEYB7wAXpne62RcfLXC51KHC0UfkKIruaA+hnQgki/wjzSb/Cte+s1lcX0RtWgbaByM\r\n         MrgUGrz0/i8U49/ssUUPIthr/geBFTYBU+3jufMId0L7bTYWRWvhmHmpvbr1gdI44fx9\r\n         eetCr5JBAHwyNCAvhdKBFTDxuSP//Qb1ks6vaOklV5KuUYFQxq+IJsk2yq1igf6AXSus\r\n         emtLwFILx5lE4Luxfl72XfLg/sOT5oRpKXFc0WsNky/y2pBLdnZID7MtJgiyhe/i6J8M\r\n         0T4w==",
            "x-google-dkim-signature": "X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\r\n        d=1e100.net; s=20230601; t=1750860443; x=1751465243;\r\n        h=to:subject:message-id:date:from:mime-version:x-gm-message-state\r\n         :from:to:cc:subject:date:message-id:reply-to;\r\n        bh=66GO79tXvxhP3XVUkGLDHVbU1M+Vk+agITupH9WVPZU=;\r\n        b=YsK9D2rq+zK8nDAyTf+ejq15gqWPvtfws58QGHqkq0Yh46j4QUjyjtSDzeGCg+p7Vj\r\n         +kuMHv04NB5dYnLDHArNtaW2DIH2Zr03UeJYKzTyorj5kHhCJoAf720Nn1Z+SRraE3La\r\n         v/uhN6dF+FHkndoGMtSuuR0gx/xRGzZVwQlxqLy80fHA8E0/BQ5q7VHxhs4XvkFEe5Nt\r\n         MB80EZMcfcAow6k09Ujt4Ba2itpAfDt8KKxu8mBciuyXjPVTc1tZKS/0oViUXP0vBOsP\r\n         wK/u8ok5nkB/fA2omdrystzl3lYt84ds4N5vFjszrf/Gic8qdX5MGKN9sKIda2VPXYEp\r\n         E/dg==",
            "x-gm-message-state": "X-Gm-Message-State: AOJu0YzhLIsgH2GqxVxW0M922k2QPHlPNbDKeYO0/cHnoTdjq5PI8BhY\r\n\tNd1MZ4yEiYwS3WhwDiPmK68i54QNPa0awu6qbeNreBnPD7OyqFVOdisLGAoMzAjktxxSGULpNxi\r\n\t2zUAgl0T6P8h6S8per0sHp5tcoTkUEGLCvAxZ/5Y=",
            "x-gm-gg": "X-Gm-Gg: ASbGncuBvjfUS6Vff71JD4QQy3o/N71UmBpIL0pSHmf9EPHoS5MzDsumNMeWYRHdFnH\r\n\tvtC4S+CKg+sja7b/76tvIEpUVELuJxIzXbE47KimKpLIC6+g+s9Gl4C9NJFldBuwp6qiRUCi+mE\r\n\tFZjqpVXuACb9U1976vGSnqFV20QP312teBTRXlsRptaN8=",
            "x-google-smtp-source": "X-Google-Smtp-Source: AGHT+IF+2TNrcc44FcrWKZHjgYxqy6kn4L0ExIztMIACr4jxJyV3nE9celPwDChI/pPhYw9wmDV/Urn3TlHkhGlhutE=",
            "mime-version": "MIME-Version: 1.0",
            "from": "From: Pedro Rodriguez <pro.pedro0413@gmail.com>",
            "date": "Date: Wed, 25 Jun 2025 09:07:13 -0500",
            "x-gm-features": "X-Gm-Features: Ac12FXx-pa7U7e3oeKokgiOhx6nooKkORduvDypjfhbdFdJkFYQkPn43RaTUpPo",
            "message-id": "Message-ID: <CAGu-j9Zj+_ZYpQSRpuUZCHUxqdyERAU46RpZUC0NifqWz81fMw@mail.gmail.com>",
            "subject": "Subject: Agente IA, de cobranza",
            "to": "To: \"pedro@whitelabel.lat\" <pedro@whitelabel.lat>",
            "content-type": "Content-Type: multipart/alternative; boundary=\"000000000000c4cd40063865f66e\""
          },
          "html": "<div dir=\"ltr\"><div>Hola Andres, como estas,</div><div><br></div><div>ayudame porfa a cotizar lo siguiente:</div><div><br></div><div>Agente de Gestión de Cobranza, para una base de datos de 150 unidades arrendadas.<br>a través de estos canales:<br><p style=\"margin:0px;font-variant-numeric:normal;font-variant-east-asian:normal;font-variant-alternates:normal;font-size-adjust:none;font-kerning:auto;font-feature-settings:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:&quot;Helvetica Neue&quot;\"><br></p><p style=\"margin:0px;font-variant-numeric:normal;font-variant-east-asian:normal;font-variant-alternates:normal;font-size-adjust:none;font-kerning:auto;font-feature-settings:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:&quot;Helvetica Neue&quot;\">Mail</p><p style=\"margin:0px;font-variant-numeric:normal;font-variant-east-asian:normal;font-variant-alternates:normal;font-size-adjust:none;font-kerning:auto;font-feature-settings:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:&quot;Helvetica Neue&quot;\">Agente WhatsApp </p><p style=\"margin:0px;font-variant-numeric:normal;font-variant-east-asian:normal;font-variant-alternates:normal;font-size-adjust:none;font-kerning:auto;font-feature-settings:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:&quot;Helvetica Neue&quot;\">Llamada <br><br>Avísame si requieres más información.</p><p style=\"margin:0px;font-variant-numeric:normal;font-variant-east-asian:normal;font-variant-alternates:normal;font-size-adjust:none;font-kerning:auto;font-feature-settings:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:&quot;Helvetica Neue&quot;\"><br></p><p style=\"margin:0px;font-variant-numeric:normal;font-variant-east-asian:normal;font-variant-alternates:normal;font-size-adjust:none;font-kerning:auto;font-feature-settings:normal;font-stretch:normal;font-size:13px;line-height:normal;font-family:&quot;Helvetica Neue&quot;\">Quedo atento!</p></div><font color=\"#888888\"><div><br></div></font></div>\n",
          "text": "Hola Andres, como estas,\n\nayudame porfa a cotizar lo siguiente:\n\nAgente de Gestión de Cobranza, para una base de datos de 150 unidades\narrendadas.\na través de estos canales:\n\n\nMail\n\nAgente WhatsApp\n\nLlamada\n\nAvísame si requieres más información.\n\n\nQuedo atento!\n",
          "textAsHtml": "<p>Hola Andres, como estas,</p><p>ayudame porfa a cotizar lo siguiente:</p><p>Agente de Gesti&oacute;n de Cobranza, para una base de datos de 150 unidades<br/>arrendadas.<br/>a trav&eacute;s de estos canales:</p><p>Mail</p><p>Agente WhatsApp</p><p>Llamada</p><p>Av&iacute;same si requieres m&aacute;s informaci&oacute;n.</p><p>Quedo atento!</p>",
          "subject": "Agente IA, de cobranza",
          "date": "2025-06-25T14:07:13.000Z",
          "to": {
            "value": [
              {
                "address": "pedro@whitelabel.lat",
                "name": ""
              }
            ],
            "html": "<span class=\"mp_address_group\"><a href=\"mailto:pedro@whitelabel.lat\" class=\"mp_address_email\">pedro@whitelabel.lat</a></span>",
            "text": "pedro@whitelabel.lat"
          },
          "from": {
            "value": [
              {
                "address": "pro.pedro0413@gmail.com",
                "name": "Pedro Rodriguez"
              }
            ],
            "html": "<span class=\"mp_address_group\"><span class=\"mp_address_name\">Pedro Rodriguez</span> &lt;<a href=\"mailto:pro.pedro0413@gmail.com\" class=\"mp_address_email\">pro.pedro0413@gmail.com</a>&gt;</span>",
            "text": "\"Pedro Rodriguez\" <pro.pedro0413@gmail.com>"
          },
          "messageId": "<CAGu-j9Zj+_ZYpQSRpuUZCHUxqdyERAU46RpZUC0NifqWz81fMw@mail.gmail.com>"
        }
      }
    ]
  },
  "repo_name": "flujos_n8n",
  "repo_owner": "whitelabel-ai",
  "repo_path": "Automation/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Gmail Trigger": {
      "Gmail Trigger": {
        "lastTimeChecked": 1750814455,
        "possibleDuplicates": [
          "197a4acaa9ea5f21"
        ]
      }
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-06-25T19:55:49.656Z",
  "versionId": "78cbfc81-77a9-4437-aaca-e1cf75b86577"
}